//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SpecimenCollection;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Specimen.Collection", propOrder = {
    "collector",
    "comments",
    "collectedPeriod",
    "collectedDateTime",
    "quantity",
    "method",
    "sourceSite"
})
public class SpecimenCollectionImpl
    extends BackboneElementImpl
    implements Serializable, SpecimenCollection, Equals, HashCode
{

    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl collector;
    @XmlElement(name = "comment", type = StringImpl.class)
    protected List<org.hl7.fhir.model.String> comments;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl collectedPeriod;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl collectedDateTime;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl quantity;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl method;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl sourceSite;

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COLLECTOR_SPECIMENCOLLECTION_0")
    public ResourceReference getCollector() {
        return collector;
    }

    public void setCollector(ResourceReference value) {
        this.collector = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMENTS_SPECIMENCOLLECTION__0")
    public List<org.hl7.fhir.model.String> getComments() {
        if (comments == null) {
            comments = new ArrayList<org.hl7.fhir.model.String>();
        }
        return this.comments;
    }

    public void setComments(List<org.hl7.fhir.model.String> comments) {
        this.comments = comments;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COLLECTEDPERIOD_SPECIMENCOLL_0")
    public Period getCollectedPeriod() {
        return collectedPeriod;
    }

    public void setCollectedPeriod(Period value) {
        this.collectedPeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COLLECTEDDATETIME_SPECIMENCO_0")
    public DateTime getCollectedDateTime() {
        return collectedDateTime;
    }

    public void setCollectedDateTime(DateTime value) {
        this.collectedDateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_SPECIMENCOLLECTION__0")
    public Quantity getQuantity() {
        return quantity;
    }

    public void setQuantity(Quantity value) {
        this.quantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "METHOD__SPECIMENCOLLECTION_H_0")
    public CodeableConcept getMethod() {
        return method;
    }

    public void setMethod(CodeableConcept value) {
        this.method = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCESITE_SPECIMENCOLLECTIO_0")
    public CodeableConcept getSourceSite() {
        return sourceSite;
    }

    public void setSourceSite(CodeableConcept value) {
        this.sourceSite = ((CodeableConceptImpl) value);
    }

    public SpecimenCollectionImpl withCollector(ResourceReference value) {
        setCollector(value);
        return this;
    }

    public SpecimenCollectionImpl withComments(org.hl7.fhir.model.String... values) {
        if (values!= null) {
            for (org.hl7.fhir.model.String value: values) {
                getComments().add(value);
            }
        }
        return this;
    }

    public SpecimenCollectionImpl withComments(Collection<org.hl7.fhir.model.String> values) {
        if (values!= null) {
            getComments().addAll(values);
        }
        return this;
    }

    public SpecimenCollectionImpl withComments(List<org.hl7.fhir.model.String> comments) {
        setComments(comments);
        return this;
    }

    public SpecimenCollectionImpl withCollectedPeriod(Period value) {
        setCollectedPeriod(value);
        return this;
    }

    public SpecimenCollectionImpl withCollectedDateTime(DateTime value) {
        setCollectedDateTime(value);
        return this;
    }

    public SpecimenCollectionImpl withQuantity(Quantity value) {
        setQuantity(value);
        return this;
    }

    public SpecimenCollectionImpl withMethod(CodeableConcept value) {
        setMethod(value);
        return this;
    }

    public SpecimenCollectionImpl withSourceSite(CodeableConcept value) {
        setSourceSite(value);
        return this;
    }

    @Override
    public SpecimenCollectionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenCollectionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenCollectionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SpecimenCollectionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenCollectionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenCollectionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SpecimenCollectionImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecimenCollectionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SpecimenCollectionImpl that = ((SpecimenCollectionImpl) object);
        {
            ResourceReference lhsCollector;
            lhsCollector = this.getCollector();
            ResourceReference rhsCollector;
            rhsCollector = that.getCollector();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "collector", lhsCollector), LocatorUtils.property(thatLocator, "collector", rhsCollector), lhsCollector, rhsCollector)) {
                return false;
            }
        }
        {
            List<org.hl7.fhir.model.String> lhsComments;
            lhsComments = (((this.comments!= null)&&(!this.comments.isEmpty()))?this.getComments():null);
            List<org.hl7.fhir.model.String> rhsComments;
            rhsComments = (((that.comments!= null)&&(!that.comments.isEmpty()))?that.getComments():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comments", lhsComments), LocatorUtils.property(thatLocator, "comments", rhsComments), lhsComments, rhsComments)) {
                return false;
            }
        }
        {
            Period lhsCollectedPeriod;
            lhsCollectedPeriod = this.getCollectedPeriod();
            Period rhsCollectedPeriod;
            rhsCollectedPeriod = that.getCollectedPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "collectedPeriod", lhsCollectedPeriod), LocatorUtils.property(thatLocator, "collectedPeriod", rhsCollectedPeriod), lhsCollectedPeriod, rhsCollectedPeriod)) {
                return false;
            }
        }
        {
            DateTime lhsCollectedDateTime;
            lhsCollectedDateTime = this.getCollectedDateTime();
            DateTime rhsCollectedDateTime;
            rhsCollectedDateTime = that.getCollectedDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "collectedDateTime", lhsCollectedDateTime), LocatorUtils.property(thatLocator, "collectedDateTime", rhsCollectedDateTime), lhsCollectedDateTime, rhsCollectedDateTime)) {
                return false;
            }
        }
        {
            Quantity lhsQuantity;
            lhsQuantity = this.getQuantity();
            Quantity rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            CodeableConcept lhsMethod;
            lhsMethod = this.getMethod();
            CodeableConcept rhsMethod;
            rhsMethod = that.getMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "method", lhsMethod), LocatorUtils.property(thatLocator, "method", rhsMethod), lhsMethod, rhsMethod)) {
                return false;
            }
        }
        {
            CodeableConcept lhsSourceSite;
            lhsSourceSite = this.getSourceSite();
            CodeableConcept rhsSourceSite;
            rhsSourceSite = that.getSourceSite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceSite", lhsSourceSite), LocatorUtils.property(thatLocator, "sourceSite", rhsSourceSite), lhsSourceSite, rhsSourceSite)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ResourceReference theCollector;
            theCollector = this.getCollector();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "collector", theCollector), currentHashCode, theCollector);
        }
        {
            List<org.hl7.fhir.model.String> theComments;
            theComments = (((this.comments!= null)&&(!this.comments.isEmpty()))?this.getComments():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comments", theComments), currentHashCode, theComments);
        }
        {
            Period theCollectedPeriod;
            theCollectedPeriod = this.getCollectedPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "collectedPeriod", theCollectedPeriod), currentHashCode, theCollectedPeriod);
        }
        {
            DateTime theCollectedDateTime;
            theCollectedDateTime = this.getCollectedDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "collectedDateTime", theCollectedDateTime), currentHashCode, theCollectedDateTime);
        }
        {
            Quantity theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            CodeableConcept theMethod;
            theMethod = this.getMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "method", theMethod), currentHashCode, theMethod);
        }
        {
            CodeableConcept theSourceSite;
            theSourceSite = this.getSourceSite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceSite", theSourceSite), currentHashCode, theSourceSite);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
