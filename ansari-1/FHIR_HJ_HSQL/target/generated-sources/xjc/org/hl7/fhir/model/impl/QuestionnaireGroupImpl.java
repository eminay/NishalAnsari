//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.QuestionnaireGroup;
import org.hl7.fhir.model.QuestionnaireQuestion;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Questionnaire.Group", propOrder = {
    "name",
    "header",
    "text",
    "subject",
    "groups",
    "questions"
})
public class QuestionnaireGroupImpl
    extends BackboneElementImpl
    implements Serializable, QuestionnaireGroup, Equals, HashCode
{

    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl name;
    @XmlElement(type = StringImpl.class)
    protected StringImpl header;
    @XmlElement(type = StringImpl.class)
    protected StringImpl text;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(name = "group", type = QuestionnaireGroupImpl.class)
    protected List<QuestionnaireGroup> groups;
    @XmlElement(name = "question", type = QuestionnaireQuestionImpl.class)
    protected List<QuestionnaireQuestion> questions;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__QUESTIONNAIREGROUP_HJID")
    public CodeableConcept getName() {
        return name;
    }

    public void setName(CodeableConcept value) {
        this.name = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HEADER_QUESTIONNAIREGROUP_HJ_0")
    public org.hl7.fhir.model.String getHeader() {
        return header;
    }

    public void setHeader(org.hl7.fhir.model.String value) {
        this.header = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_QUESTIONNAIREGROUP_HJID")
    public org.hl7.fhir.model.String getText() {
        return text;
    }

    public void setText(org.hl7.fhir.model.String value) {
        this.text = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_QUESTIONNAIREGROUP_H_0")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = QuestionnaireGroup.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GROUPS_QUESTIONNAIREGROUP_HJ_0")
    public List<QuestionnaireGroup> getGroups() {
        if (groups == null) {
            groups = new ArrayList<QuestionnaireGroup>();
        }
        return this.groups;
    }

    public void setGroups(List<QuestionnaireGroup> groups) {
        this.groups = groups;
    }

    @OneToMany(targetEntity = QuestionnaireQuestion.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUESTIONS_QUESTIONNAIREGROUP_0")
    public List<QuestionnaireQuestion> getQuestions() {
        if (questions == null) {
            questions = new ArrayList<QuestionnaireQuestion>();
        }
        return this.questions;
    }

    public void setQuestions(List<QuestionnaireQuestion> questions) {
        this.questions = questions;
    }

    public QuestionnaireGroupImpl withName(CodeableConcept value) {
        setName(value);
        return this;
    }

    public QuestionnaireGroupImpl withHeader(org.hl7.fhir.model.String value) {
        setHeader(value);
        return this;
    }

    public QuestionnaireGroupImpl withText(org.hl7.fhir.model.String value) {
        setText(value);
        return this;
    }

    public QuestionnaireGroupImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public QuestionnaireGroupImpl withGroups(QuestionnaireGroup... values) {
        if (values!= null) {
            for (QuestionnaireGroup value: values) {
                getGroups().add(value);
            }
        }
        return this;
    }

    public QuestionnaireGroupImpl withGroups(Collection<QuestionnaireGroup> values) {
        if (values!= null) {
            getGroups().addAll(values);
        }
        return this;
    }

    public QuestionnaireGroupImpl withGroups(List<QuestionnaireGroup> groups) {
        setGroups(groups);
        return this;
    }

    public QuestionnaireGroupImpl withQuestions(QuestionnaireQuestion... values) {
        if (values!= null) {
            for (QuestionnaireQuestion value: values) {
                getQuestions().add(value);
            }
        }
        return this;
    }

    public QuestionnaireGroupImpl withQuestions(Collection<QuestionnaireQuestion> values) {
        if (values!= null) {
            getQuestions().addAll(values);
        }
        return this;
    }

    public QuestionnaireGroupImpl withQuestions(List<QuestionnaireQuestion> questions) {
        setQuestions(questions);
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public QuestionnaireGroupImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof QuestionnaireGroupImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final QuestionnaireGroupImpl that = ((QuestionnaireGroupImpl) object);
        {
            CodeableConcept lhsName;
            lhsName = this.getName();
            CodeableConcept rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsHeader;
            lhsHeader = this.getHeader();
            org.hl7.fhir.model.String rhsHeader;
            rhsHeader = that.getHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "header", lhsHeader), LocatorUtils.property(thatLocator, "header", rhsHeader), lhsHeader, rhsHeader)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsText;
            lhsText = this.getText();
            org.hl7.fhir.model.String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            List<QuestionnaireGroup> lhsGroups;
            lhsGroups = (((this.groups!= null)&&(!this.groups.isEmpty()))?this.getGroups():null);
            List<QuestionnaireGroup> rhsGroups;
            rhsGroups = (((that.groups!= null)&&(!that.groups.isEmpty()))?that.getGroups():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groups", lhsGroups), LocatorUtils.property(thatLocator, "groups", rhsGroups), lhsGroups, rhsGroups)) {
                return false;
            }
        }
        {
            List<QuestionnaireQuestion> lhsQuestions;
            lhsQuestions = (((this.questions!= null)&&(!this.questions.isEmpty()))?this.getQuestions():null);
            List<QuestionnaireQuestion> rhsQuestions;
            rhsQuestions = (((that.questions!= null)&&(!that.questions.isEmpty()))?that.getQuestions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "questions", lhsQuestions), LocatorUtils.property(thatLocator, "questions", rhsQuestions), lhsQuestions, rhsQuestions)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.model.String theHeader;
            theHeader = this.getHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "header", theHeader), currentHashCode, theHeader);
        }
        {
            org.hl7.fhir.model.String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            List<QuestionnaireGroup> theGroups;
            theGroups = (((this.groups!= null)&&(!this.groups.isEmpty()))?this.getGroups():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groups", theGroups), currentHashCode, theGroups);
        }
        {
            List<QuestionnaireQuestion> theQuestions;
            theQuestions = (((this.questions!= null)&&(!this.questions.isEmpty()))?this.getQuestions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "questions", theQuestions), currentHashCode, theQuestions);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
