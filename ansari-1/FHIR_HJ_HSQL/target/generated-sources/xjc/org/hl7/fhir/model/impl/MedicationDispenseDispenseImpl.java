//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.MedicationDispenseDispense;
import org.hl7.fhir.model.MedicationDispenseDosage;
import org.hl7.fhir.model.MedicationDispenseStatus;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationDispense.Dispense", propOrder = {
    "identifier",
    "status",
    "type",
    "quantity",
    "medication",
    "whenPrepared",
    "whenHandedOver",
    "destination",
    "receivers",
    "dosages"
})
public class MedicationDispenseDispenseImpl
    extends BackboneElementImpl
    implements Serializable, MedicationDispenseDispense, Equals, HashCode
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(type = MedicationDispenseStatusImpl.class)
    protected MedicationDispenseStatusImpl status;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl quantity;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl medication;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl whenPrepared;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl whenHandedOver;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl destination;
    @XmlElement(name = "receiver", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> receivers;
    @XmlElement(name = "dosage", type = MedicationDispenseDosageImpl.class)
    protected List<MedicationDispenseDosage> dosages;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MEDICATIONDISPENS_1")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = MedicationDispenseStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONDISPENSEDIS_0")
    public MedicationDispenseStatus getStatus() {
        return status;
    }

    public void setStatus(MedicationDispenseStatus value) {
        this.status = ((MedicationDispenseStatusImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__MEDICATIONDISPENSEDISP_0")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_MEDICATIONDISPENSED_0")
    public Quantity getQuantity() {
        return quantity;
    }

    public void setQuantity(Quantity value) {
        this.quantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONDISPENS_0")
    public ResourceReference getMedication() {
        return medication;
    }

    public void setMedication(ResourceReference value) {
        this.medication = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENPREPARED_MEDICATIONDISPE_0")
    public DateTime getWhenPrepared() {
        return whenPrepared;
    }

    public void setWhenPrepared(DateTime value) {
        this.whenPrepared = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENHANDEDOVER_MEDICATIONDIS_0")
    public DateTime getWhenHandedOver() {
        return whenHandedOver;
    }

    public void setWhenHandedOver(DateTime value) {
        this.whenHandedOver = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESTINATION_MEDICATIONDISPEN_0")
    public ResourceReference getDestination() {
        return destination;
    }

    public void setDestination(ResourceReference value) {
        this.destination = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECEIVERS_MEDICATIONDISPENSE_0")
    public List<ResourceReference> getReceivers() {
        if (receivers == null) {
            receivers = new ArrayList<ResourceReference>();
        }
        return this.receivers;
    }

    public void setReceivers(List<ResourceReference> receivers) {
        this.receivers = receivers;
    }

    @OneToMany(targetEntity = MedicationDispenseDosage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSAGES_MEDICATIONDISPENSEDI_0")
    public List<MedicationDispenseDosage> getDosages() {
        if (dosages == null) {
            dosages = new ArrayList<MedicationDispenseDosage>();
        }
        return this.dosages;
    }

    public void setDosages(List<MedicationDispenseDosage> dosages) {
        this.dosages = dosages;
    }

    public MedicationDispenseDispenseImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withStatus(MedicationDispenseStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withQuantity(Quantity value) {
        setQuantity(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withWhenPrepared(DateTime value) {
        setWhenPrepared(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withWhenHandedOver(DateTime value) {
        setWhenHandedOver(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withDestination(ResourceReference value) {
        setDestination(value);
        return this;
    }

    public MedicationDispenseDispenseImpl withReceivers(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getReceivers().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseDispenseImpl withReceivers(Collection<ResourceReference> values) {
        if (values!= null) {
            getReceivers().addAll(values);
        }
        return this;
    }

    public MedicationDispenseDispenseImpl withReceivers(List<ResourceReference> receivers) {
        setReceivers(receivers);
        return this;
    }

    public MedicationDispenseDispenseImpl withDosages(MedicationDispenseDosage... values) {
        if (values!= null) {
            for (MedicationDispenseDosage value: values) {
                getDosages().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseDispenseImpl withDosages(Collection<MedicationDispenseDosage> values) {
        if (values!= null) {
            getDosages().addAll(values);
        }
        return this;
    }

    public MedicationDispenseDispenseImpl withDosages(List<MedicationDispenseDosage> dosages) {
        setDosages(dosages);
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationDispenseDispenseImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationDispenseDispenseImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationDispenseDispenseImpl that = ((MedicationDispenseDispenseImpl) object);
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            MedicationDispenseStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationDispenseStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            Quantity lhsQuantity;
            lhsQuantity = this.getQuantity();
            Quantity rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            DateTime lhsWhenPrepared;
            lhsWhenPrepared = this.getWhenPrepared();
            DateTime rhsWhenPrepared;
            rhsWhenPrepared = that.getWhenPrepared();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenPrepared", lhsWhenPrepared), LocatorUtils.property(thatLocator, "whenPrepared", rhsWhenPrepared), lhsWhenPrepared, rhsWhenPrepared)) {
                return false;
            }
        }
        {
            DateTime lhsWhenHandedOver;
            lhsWhenHandedOver = this.getWhenHandedOver();
            DateTime rhsWhenHandedOver;
            rhsWhenHandedOver = that.getWhenHandedOver();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenHandedOver", lhsWhenHandedOver), LocatorUtils.property(thatLocator, "whenHandedOver", rhsWhenHandedOver), lhsWhenHandedOver, rhsWhenHandedOver)) {
                return false;
            }
        }
        {
            ResourceReference lhsDestination;
            lhsDestination = this.getDestination();
            ResourceReference rhsDestination;
            rhsDestination = that.getDestination();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destination", lhsDestination), LocatorUtils.property(thatLocator, "destination", rhsDestination), lhsDestination, rhsDestination)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsReceivers;
            lhsReceivers = (((this.receivers!= null)&&(!this.receivers.isEmpty()))?this.getReceivers():null);
            List<ResourceReference> rhsReceivers;
            rhsReceivers = (((that.receivers!= null)&&(!that.receivers.isEmpty()))?that.getReceivers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivers", lhsReceivers), LocatorUtils.property(thatLocator, "receivers", rhsReceivers), lhsReceivers, rhsReceivers)) {
                return false;
            }
        }
        {
            List<MedicationDispenseDosage> lhsDosages;
            lhsDosages = (((this.dosages!= null)&&(!this.dosages.isEmpty()))?this.getDosages():null);
            List<MedicationDispenseDosage> rhsDosages;
            rhsDosages = (((that.dosages!= null)&&(!that.dosages.isEmpty()))?that.getDosages():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dosages", lhsDosages), LocatorUtils.property(thatLocator, "dosages", rhsDosages), lhsDosages, rhsDosages)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            MedicationDispenseStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            Quantity theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            DateTime theWhenPrepared;
            theWhenPrepared = this.getWhenPrepared();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenPrepared", theWhenPrepared), currentHashCode, theWhenPrepared);
        }
        {
            DateTime theWhenHandedOver;
            theWhenHandedOver = this.getWhenHandedOver();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenHandedOver", theWhenHandedOver), currentHashCode, theWhenHandedOver);
        }
        {
            ResourceReference theDestination;
            theDestination = this.getDestination();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destination", theDestination), currentHashCode, theDestination);
        }
        {
            List<ResourceReference> theReceivers;
            theReceivers = (((this.receivers!= null)&&(!this.receivers.isEmpty()))?this.getReceivers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivers", theReceivers), currentHashCode, theReceivers);
        }
        {
            List<MedicationDispenseDosage> theDosages;
            theDosages = (((this.dosages!= null)&&(!this.dosages.isEmpty()))?this.getDosages():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dosages", theDosages), currentHashCode, theDosages);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
