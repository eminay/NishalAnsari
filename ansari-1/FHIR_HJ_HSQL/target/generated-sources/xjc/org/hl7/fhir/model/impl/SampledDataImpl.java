//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Decimal;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.SampledData;
import org.hl7.fhir.model.SampledDataDataType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SampledData", propOrder = {
    "origin",
    "period",
    "factor",
    "lowerLimit",
    "upperLimit",
    "dimensions",
    "data"
})
public class SampledDataImpl
    extends ElementImpl
    implements Serializable, SampledData, Equals, HashCode
{

    @XmlElement(required = true, type = QuantityImpl.class)
    protected QuantityImpl origin;
    @XmlElement(required = true, type = DecimalImpl.class)
    protected DecimalImpl period;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl factor;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl lowerLimit;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl upperLimit;
    @XmlElement(required = true, type = IntegerImpl.class)
    protected IntegerImpl dimensions;
    @XmlElement(required = true, type = SampledDataDataTypeImpl.class)
    protected SampledDataDataTypeImpl data;

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORIGIN_SAMPLEDDATA_HJID")
    public Quantity getOrigin() {
        return origin;
    }

    public void setOrigin(Quantity value) {
        this.origin = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_SAMPLEDDATA_HJID")
    public Decimal getPeriod() {
        return period;
    }

    public void setPeriod(Decimal value) {
        this.period = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FACTOR_SAMPLEDDATA_HJID")
    public Decimal getFactor() {
        return factor;
    }

    public void setFactor(Decimal value) {
        this.factor = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOWERLIMIT_SAMPLEDDATA_HJID")
    public Decimal getLowerLimit() {
        return lowerLimit;
    }

    public void setLowerLimit(Decimal value) {
        this.lowerLimit = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UPPERLIMIT_SAMPLEDDATA_HJID")
    public Decimal getUpperLimit() {
        return upperLimit;
    }

    public void setUpperLimit(Decimal value) {
        this.upperLimit = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIMENSIONS_SAMPLEDDATA_HJID")
    public Integer getDimensions() {
        return dimensions;
    }

    public void setDimensions(Integer value) {
        this.dimensions = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = SampledDataDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATA__SAMPLEDDATA_HJID")
    public SampledDataDataType getData() {
        return data;
    }

    public void setData(SampledDataDataType value) {
        this.data = ((SampledDataDataTypeImpl) value);
    }

    public SampledDataImpl withOrigin(Quantity value) {
        setOrigin(value);
        return this;
    }

    public SampledDataImpl withPeriod(Decimal value) {
        setPeriod(value);
        return this;
    }

    public SampledDataImpl withFactor(Decimal value) {
        setFactor(value);
        return this;
    }

    public SampledDataImpl withLowerLimit(Decimal value) {
        setLowerLimit(value);
        return this;
    }

    public SampledDataImpl withUpperLimit(Decimal value) {
        setUpperLimit(value);
        return this;
    }

    public SampledDataImpl withDimensions(Integer value) {
        setDimensions(value);
        return this;
    }

    public SampledDataImpl withData(SampledDataDataType value) {
        setData(value);
        return this;
    }

    @Override
    public SampledDataImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SampledDataImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SampledDataImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SampledDataImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SampledDataImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SampledDataImpl that = ((SampledDataImpl) object);
        {
            Quantity lhsOrigin;
            lhsOrigin = this.getOrigin();
            Quantity rhsOrigin;
            rhsOrigin = that.getOrigin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "origin", lhsOrigin), LocatorUtils.property(thatLocator, "origin", rhsOrigin), lhsOrigin, rhsOrigin)) {
                return false;
            }
        }
        {
            Decimal lhsPeriod;
            lhsPeriod = this.getPeriod();
            Decimal rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            Decimal lhsFactor;
            lhsFactor = this.getFactor();
            Decimal rhsFactor;
            rhsFactor = that.getFactor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "factor", lhsFactor), LocatorUtils.property(thatLocator, "factor", rhsFactor), lhsFactor, rhsFactor)) {
                return false;
            }
        }
        {
            Decimal lhsLowerLimit;
            lhsLowerLimit = this.getLowerLimit();
            Decimal rhsLowerLimit;
            rhsLowerLimit = that.getLowerLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lowerLimit", lhsLowerLimit), LocatorUtils.property(thatLocator, "lowerLimit", rhsLowerLimit), lhsLowerLimit, rhsLowerLimit)) {
                return false;
            }
        }
        {
            Decimal lhsUpperLimit;
            lhsUpperLimit = this.getUpperLimit();
            Decimal rhsUpperLimit;
            rhsUpperLimit = that.getUpperLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "upperLimit", lhsUpperLimit), LocatorUtils.property(thatLocator, "upperLimit", rhsUpperLimit), lhsUpperLimit, rhsUpperLimit)) {
                return false;
            }
        }
        {
            Integer lhsDimensions;
            lhsDimensions = this.getDimensions();
            Integer rhsDimensions;
            rhsDimensions = that.getDimensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dimensions", lhsDimensions), LocatorUtils.property(thatLocator, "dimensions", rhsDimensions), lhsDimensions, rhsDimensions)) {
                return false;
            }
        }
        {
            SampledDataDataType lhsData;
            lhsData = this.getData();
            SampledDataDataType rhsData;
            rhsData = that.getData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "data", lhsData), LocatorUtils.property(thatLocator, "data", rhsData), lhsData, rhsData)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Quantity theOrigin;
            theOrigin = this.getOrigin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "origin", theOrigin), currentHashCode, theOrigin);
        }
        {
            Decimal thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            Decimal theFactor;
            theFactor = this.getFactor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "factor", theFactor), currentHashCode, theFactor);
        }
        {
            Decimal theLowerLimit;
            theLowerLimit = this.getLowerLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lowerLimit", theLowerLimit), currentHashCode, theLowerLimit);
        }
        {
            Decimal theUpperLimit;
            theUpperLimit = this.getUpperLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "upperLimit", theUpperLimit), currentHashCode, theUpperLimit);
        }
        {
            Integer theDimensions;
            theDimensions = this.getDimensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dimensions", theDimensions), currentHashCode, theDimensions);
        }
        {
            SampledDataDataType theData;
            theData = this.getData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "data", theData), currentHashCode, theData);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
