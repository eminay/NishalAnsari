//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.ConformanceEvent;
import org.hl7.fhir.model.ConformanceEventMode;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.MessageSignificanceCategory;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Event", propOrder = {
    "code",
    "category",
    "mode",
    "protocols",
    "focus",
    "request",
    "response",
    "documentation"
})
public class ConformanceEventImpl
    extends BackboneElementImpl
    implements Serializable, ConformanceEvent, Equals, HashCode
{

    @XmlElement(required = true, type = CodingImpl.class)
    protected CodingImpl code;
    @XmlElement(type = MessageSignificanceCategoryImpl.class)
    protected MessageSignificanceCategoryImpl category;
    @XmlElement(required = true, type = ConformanceEventModeImpl.class)
    protected ConformanceEventModeImpl mode;
    @XmlElement(name = "protocol", type = CodingImpl.class)
    protected List<Coding> protocols;
    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl focus;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl request;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl response;
    @XmlElement(type = StringImpl.class)
    protected StringImpl documentation;

    @ManyToOne(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONFORMANCEEVENT_HJID")
    public Coding getCode() {
        return code;
    }

    public void setCode(Coding value) {
        this.code = ((CodingImpl) value);
    }

    @ManyToOne(targetEntity = MessageSignificanceCategory.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CATEGORY_CONFORMANCEEVENT_HJ_0")
    public MessageSignificanceCategory getCategory() {
        return category;
    }

    public void setCategory(MessageSignificanceCategory value) {
        this.category = ((MessageSignificanceCategoryImpl) value);
    }

    @ManyToOne(targetEntity = ConformanceEventMode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODE__CONFORMANCEEVENT_HJID")
    public ConformanceEventMode getMode() {
        return mode;
    }

    public void setMode(ConformanceEventMode value) {
        this.mode = ((ConformanceEventModeImpl) value);
    }

    @OneToMany(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROTOCOLS_CONFORMANCEEVENT_H_0")
    public List<Coding> getProtocols() {
        if (protocols == null) {
            protocols = new ArrayList<Coding>();
        }
        return this.protocols;
    }

    public void setProtocols(List<Coding> protocols) {
        this.protocols = protocols;
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FOCUS_CONFORMANCEEVENT_HJID")
    public Code getFocus() {
        return focus;
    }

    public void setFocus(Code value) {
        this.focus = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REQUEST_CONFORMANCEEVENT_HJID")
    public ResourceReference getRequest() {
        return request;
    }

    public void setRequest(ResourceReference value) {
        this.request = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESPONSE_CONFORMANCEEVENT_HJ_0")
    public ResourceReference getResponse() {
        return response;
    }

    public void setResponse(ResourceReference value) {
        this.response = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTATION_CONFORMANCEEVE_0")
    public org.hl7.fhir.model.String getDocumentation() {
        return documentation;
    }

    public void setDocumentation(org.hl7.fhir.model.String value) {
        this.documentation = ((StringImpl) value);
    }

    public ConformanceEventImpl withCode(Coding value) {
        setCode(value);
        return this;
    }

    public ConformanceEventImpl withCategory(MessageSignificanceCategory value) {
        setCategory(value);
        return this;
    }

    public ConformanceEventImpl withMode(ConformanceEventMode value) {
        setMode(value);
        return this;
    }

    public ConformanceEventImpl withProtocols(Coding... values) {
        if (values!= null) {
            for (Coding value: values) {
                getProtocols().add(value);
            }
        }
        return this;
    }

    public ConformanceEventImpl withProtocols(Collection<Coding> values) {
        if (values!= null) {
            getProtocols().addAll(values);
        }
        return this;
    }

    public ConformanceEventImpl withProtocols(List<Coding> protocols) {
        setProtocols(protocols);
        return this;
    }

    public ConformanceEventImpl withFocus(Code value) {
        setFocus(value);
        return this;
    }

    public ConformanceEventImpl withRequest(ResourceReference value) {
        setRequest(value);
        return this;
    }

    public ConformanceEventImpl withResponse(ResourceReference value) {
        setResponse(value);
        return this;
    }

    public ConformanceEventImpl withDocumentation(org.hl7.fhir.model.String value) {
        setDocumentation(value);
        return this;
    }

    @Override
    public ConformanceEventImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceEventImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceEventImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConformanceEventImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceEventImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceEventImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConformanceEventImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceEventImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceEventImpl that = ((ConformanceEventImpl) object);
        {
            Coding lhsCode;
            lhsCode = this.getCode();
            Coding rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            MessageSignificanceCategory lhsCategory;
            lhsCategory = this.getCategory();
            MessageSignificanceCategory rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            ConformanceEventMode lhsMode;
            lhsMode = this.getMode();
            ConformanceEventMode rhsMode;
            rhsMode = that.getMode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mode", lhsMode), LocatorUtils.property(thatLocator, "mode", rhsMode), lhsMode, rhsMode)) {
                return false;
            }
        }
        {
            List<Coding> lhsProtocols;
            lhsProtocols = (((this.protocols!= null)&&(!this.protocols.isEmpty()))?this.getProtocols():null);
            List<Coding> rhsProtocols;
            rhsProtocols = (((that.protocols!= null)&&(!that.protocols.isEmpty()))?that.getProtocols():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "protocols", lhsProtocols), LocatorUtils.property(thatLocator, "protocols", rhsProtocols), lhsProtocols, rhsProtocols)) {
                return false;
            }
        }
        {
            Code lhsFocus;
            lhsFocus = this.getFocus();
            Code rhsFocus;
            rhsFocus = that.getFocus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "focus", lhsFocus), LocatorUtils.property(thatLocator, "focus", rhsFocus), lhsFocus, rhsFocus)) {
                return false;
            }
        }
        {
            ResourceReference lhsRequest;
            lhsRequest = this.getRequest();
            ResourceReference rhsRequest;
            rhsRequest = that.getRequest();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "request", lhsRequest), LocatorUtils.property(thatLocator, "request", rhsRequest), lhsRequest, rhsRequest)) {
                return false;
            }
        }
        {
            ResourceReference lhsResponse;
            lhsResponse = this.getResponse();
            ResourceReference rhsResponse;
            rhsResponse = that.getResponse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "response", lhsResponse), LocatorUtils.property(thatLocator, "response", rhsResponse), lhsResponse, rhsResponse)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDocumentation;
            lhsDocumentation = this.getDocumentation();
            org.hl7.fhir.model.String rhsDocumentation;
            rhsDocumentation = that.getDocumentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentation", lhsDocumentation), LocatorUtils.property(thatLocator, "documentation", rhsDocumentation), lhsDocumentation, rhsDocumentation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Coding theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            MessageSignificanceCategory theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            ConformanceEventMode theMode;
            theMode = this.getMode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mode", theMode), currentHashCode, theMode);
        }
        {
            List<Coding> theProtocols;
            theProtocols = (((this.protocols!= null)&&(!this.protocols.isEmpty()))?this.getProtocols():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "protocols", theProtocols), currentHashCode, theProtocols);
        }
        {
            Code theFocus;
            theFocus = this.getFocus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "focus", theFocus), currentHashCode, theFocus);
        }
        {
            ResourceReference theRequest;
            theRequest = this.getRequest();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "request", theRequest), currentHashCode, theRequest);
        }
        {
            ResourceReference theResponse;
            theResponse = this.getResponse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "response", theResponse), currentHashCode, theResponse);
        }
        {
            org.hl7.fhir.model.String theDocumentation;
            theDocumentation = this.getDocumentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentation", theDocumentation), currentHashCode, theDocumentation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
