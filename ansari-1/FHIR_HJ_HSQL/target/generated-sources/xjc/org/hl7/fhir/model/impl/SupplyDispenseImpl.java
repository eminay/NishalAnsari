//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SupplyDispense;
import org.hl7.fhir.model.SupplyDispenseStatus;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Supply.Dispense", propOrder = {
    "identifier",
    "status",
    "type",
    "quantity",
    "suppliedItem",
    "supplier",
    "whenPrepared",
    "whenHandedOver",
    "destination",
    "receivers"
})
public class SupplyDispenseImpl
    extends BackboneElementImpl
    implements Serializable, SupplyDispense, Equals, HashCode
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(type = SupplyDispenseStatusImpl.class)
    protected SupplyDispenseStatusImpl status;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl quantity;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl suppliedItem;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl supplier;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl whenPrepared;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl whenHandedOver;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl destination;
    @XmlElement(name = "receiver", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> receivers;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_SUPPLYDISPENSE_HJ_0")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = SupplyDispenseStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_SUPPLYDISPENSE_HJID")
    public SupplyDispenseStatus getStatus() {
        return status;
    }

    public void setStatus(SupplyDispenseStatus value) {
        this.status = ((SupplyDispenseStatusImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SUPPLYDISPENSE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_SUPPLYDISPENSE_HJID")
    public Quantity getQuantity() {
        return quantity;
    }

    public void setQuantity(Quantity value) {
        this.quantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPLIEDITEM_SUPPLYDISPENSE__0")
    public ResourceReference getSuppliedItem() {
        return suppliedItem;
    }

    public void setSuppliedItem(ResourceReference value) {
        this.suppliedItem = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPLIER_SUPPLYDISPENSE_HJID")
    public ResourceReference getSupplier() {
        return supplier;
    }

    public void setSupplier(ResourceReference value) {
        this.supplier = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENPREPARED_SUPPLYDISPENSE__0")
    public Period getWhenPrepared() {
        return whenPrepared;
    }

    public void setWhenPrepared(Period value) {
        this.whenPrepared = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENHANDEDOVER_SUPPLYDISPENS_0")
    public Period getWhenHandedOver() {
        return whenHandedOver;
    }

    public void setWhenHandedOver(Period value) {
        this.whenHandedOver = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESTINATION_SUPPLYDISPENSE_H_0")
    public ResourceReference getDestination() {
        return destination;
    }

    public void setDestination(ResourceReference value) {
        this.destination = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECEIVERS_SUPPLYDISPENSE_HJID")
    public List<ResourceReference> getReceivers() {
        if (receivers == null) {
            receivers = new ArrayList<ResourceReference>();
        }
        return this.receivers;
    }

    public void setReceivers(List<ResourceReference> receivers) {
        this.receivers = receivers;
    }

    public SupplyDispenseImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public SupplyDispenseImpl withStatus(SupplyDispenseStatus value) {
        setStatus(value);
        return this;
    }

    public SupplyDispenseImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public SupplyDispenseImpl withQuantity(Quantity value) {
        setQuantity(value);
        return this;
    }

    public SupplyDispenseImpl withSuppliedItem(ResourceReference value) {
        setSuppliedItem(value);
        return this;
    }

    public SupplyDispenseImpl withSupplier(ResourceReference value) {
        setSupplier(value);
        return this;
    }

    public SupplyDispenseImpl withWhenPrepared(Period value) {
        setWhenPrepared(value);
        return this;
    }

    public SupplyDispenseImpl withWhenHandedOver(Period value) {
        setWhenHandedOver(value);
        return this;
    }

    public SupplyDispenseImpl withDestination(ResourceReference value) {
        setDestination(value);
        return this;
    }

    public SupplyDispenseImpl withReceivers(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getReceivers().add(value);
            }
        }
        return this;
    }

    public SupplyDispenseImpl withReceivers(Collection<ResourceReference> values) {
        if (values!= null) {
            getReceivers().addAll(values);
        }
        return this;
    }

    public SupplyDispenseImpl withReceivers(List<ResourceReference> receivers) {
        setReceivers(receivers);
        return this;
    }

    @Override
    public SupplyDispenseImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SupplyDispenseImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SupplyDispenseImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SupplyDispenseImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SupplyDispenseImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SupplyDispenseImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SupplyDispenseImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SupplyDispenseImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SupplyDispenseImpl that = ((SupplyDispenseImpl) object);
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            SupplyDispenseStatus lhsStatus;
            lhsStatus = this.getStatus();
            SupplyDispenseStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            Quantity lhsQuantity;
            lhsQuantity = this.getQuantity();
            Quantity rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            ResourceReference lhsSuppliedItem;
            lhsSuppliedItem = this.getSuppliedItem();
            ResourceReference rhsSuppliedItem;
            rhsSuppliedItem = that.getSuppliedItem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "suppliedItem", lhsSuppliedItem), LocatorUtils.property(thatLocator, "suppliedItem", rhsSuppliedItem), lhsSuppliedItem, rhsSuppliedItem)) {
                return false;
            }
        }
        {
            ResourceReference lhsSupplier;
            lhsSupplier = this.getSupplier();
            ResourceReference rhsSupplier;
            rhsSupplier = that.getSupplier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supplier", lhsSupplier), LocatorUtils.property(thatLocator, "supplier", rhsSupplier), lhsSupplier, rhsSupplier)) {
                return false;
            }
        }
        {
            Period lhsWhenPrepared;
            lhsWhenPrepared = this.getWhenPrepared();
            Period rhsWhenPrepared;
            rhsWhenPrepared = that.getWhenPrepared();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenPrepared", lhsWhenPrepared), LocatorUtils.property(thatLocator, "whenPrepared", rhsWhenPrepared), lhsWhenPrepared, rhsWhenPrepared)) {
                return false;
            }
        }
        {
            Period lhsWhenHandedOver;
            lhsWhenHandedOver = this.getWhenHandedOver();
            Period rhsWhenHandedOver;
            rhsWhenHandedOver = that.getWhenHandedOver();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenHandedOver", lhsWhenHandedOver), LocatorUtils.property(thatLocator, "whenHandedOver", rhsWhenHandedOver), lhsWhenHandedOver, rhsWhenHandedOver)) {
                return false;
            }
        }
        {
            ResourceReference lhsDestination;
            lhsDestination = this.getDestination();
            ResourceReference rhsDestination;
            rhsDestination = that.getDestination();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destination", lhsDestination), LocatorUtils.property(thatLocator, "destination", rhsDestination), lhsDestination, rhsDestination)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsReceivers;
            lhsReceivers = (((this.receivers!= null)&&(!this.receivers.isEmpty()))?this.getReceivers():null);
            List<ResourceReference> rhsReceivers;
            rhsReceivers = (((that.receivers!= null)&&(!that.receivers.isEmpty()))?that.getReceivers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivers", lhsReceivers), LocatorUtils.property(thatLocator, "receivers", rhsReceivers), lhsReceivers, rhsReceivers)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            SupplyDispenseStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            Quantity theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            ResourceReference theSuppliedItem;
            theSuppliedItem = this.getSuppliedItem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "suppliedItem", theSuppliedItem), currentHashCode, theSuppliedItem);
        }
        {
            ResourceReference theSupplier;
            theSupplier = this.getSupplier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supplier", theSupplier), currentHashCode, theSupplier);
        }
        {
            Period theWhenPrepared;
            theWhenPrepared = this.getWhenPrepared();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenPrepared", theWhenPrepared), currentHashCode, theWhenPrepared);
        }
        {
            Period theWhenHandedOver;
            theWhenHandedOver = this.getWhenHandedOver();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenHandedOver", theWhenHandedOver), currentHashCode, theWhenHandedOver);
        }
        {
            ResourceReference theDestination;
            theDestination = this.getDestination();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destination", theDestination), currentHashCode, theDestination);
        }
        {
            List<ResourceReference> theReceivers;
            theReceivers = (((this.receivers!= null)&&(!this.receivers.isEmpty()))?this.getReceivers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivers", theReceivers), currentHashCode, theReceivers);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
