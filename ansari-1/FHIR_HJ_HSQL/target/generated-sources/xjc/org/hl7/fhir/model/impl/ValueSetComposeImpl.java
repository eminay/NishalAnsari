//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Uri;
import org.hl7.fhir.model.ValueSetCompose;
import org.hl7.fhir.model.ValueSetInclude;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValueSet.Compose", propOrder = {
    "imports",
    "includes",
    "excludes"
})
public class ValueSetComposeImpl
    extends BackboneElementImpl
    implements Serializable, ValueSetCompose, Equals, HashCode
{

    @XmlElement(name = "import", type = UriImpl.class)
    protected List<Uri> imports;
    @XmlElement(name = "include", type = ValueSetIncludeImpl.class)
    protected List<ValueSetInclude> includes;
    @XmlElement(name = "exclude", type = ValueSetIncludeImpl.class)
    protected List<ValueSetInclude> excludes;

    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMPORTS_VALUESETCOMPOSE_HJID")
    public List<Uri> getImports() {
        if (imports == null) {
            imports = new ArrayList<Uri>();
        }
        return this.imports;
    }

    public void setImports(List<Uri> imports) {
        this.imports = imports;
    }

    @OneToMany(targetEntity = ValueSetInclude.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INCLUDES_VALUESETCOMPOSE_HJID")
    public List<ValueSetInclude> getIncludes() {
        if (includes == null) {
            includes = new ArrayList<ValueSetInclude>();
        }
        return this.includes;
    }

    public void setIncludes(List<ValueSetInclude> includes) {
        this.includes = includes;
    }

    @OneToMany(targetEntity = ValueSetInclude.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXCLUDES_VALUESETCOMPOSE_HJID")
    public List<ValueSetInclude> getExcludes() {
        if (excludes == null) {
            excludes = new ArrayList<ValueSetInclude>();
        }
        return this.excludes;
    }

    public void setExcludes(List<ValueSetInclude> excludes) {
        this.excludes = excludes;
    }

    public ValueSetComposeImpl withImports(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getImports().add(value);
            }
        }
        return this;
    }

    public ValueSetComposeImpl withImports(Collection<Uri> values) {
        if (values!= null) {
            getImports().addAll(values);
        }
        return this;
    }

    public ValueSetComposeImpl withImports(List<Uri> imports) {
        setImports(imports);
        return this;
    }

    public ValueSetComposeImpl withIncludes(ValueSetInclude... values) {
        if (values!= null) {
            for (ValueSetInclude value: values) {
                getIncludes().add(value);
            }
        }
        return this;
    }

    public ValueSetComposeImpl withIncludes(Collection<ValueSetInclude> values) {
        if (values!= null) {
            getIncludes().addAll(values);
        }
        return this;
    }

    public ValueSetComposeImpl withIncludes(List<ValueSetInclude> includes) {
        setIncludes(includes);
        return this;
    }

    public ValueSetComposeImpl withExcludes(ValueSetInclude... values) {
        if (values!= null) {
            for (ValueSetInclude value: values) {
                getExcludes().add(value);
            }
        }
        return this;
    }

    public ValueSetComposeImpl withExcludes(Collection<ValueSetInclude> values) {
        if (values!= null) {
            getExcludes().addAll(values);
        }
        return this;
    }

    public ValueSetComposeImpl withExcludes(List<ValueSetInclude> excludes) {
        setExcludes(excludes);
        return this;
    }

    @Override
    public ValueSetComposeImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetComposeImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetComposeImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ValueSetComposeImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetComposeImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetComposeImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ValueSetComposeImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValueSetComposeImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ValueSetComposeImpl that = ((ValueSetComposeImpl) object);
        {
            List<Uri> lhsImports;
            lhsImports = (((this.imports!= null)&&(!this.imports.isEmpty()))?this.getImports():null);
            List<Uri> rhsImports;
            rhsImports = (((that.imports!= null)&&(!that.imports.isEmpty()))?that.getImports():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imports", lhsImports), LocatorUtils.property(thatLocator, "imports", rhsImports), lhsImports, rhsImports)) {
                return false;
            }
        }
        {
            List<ValueSetInclude> lhsIncludes;
            lhsIncludes = (((this.includes!= null)&&(!this.includes.isEmpty()))?this.getIncludes():null);
            List<ValueSetInclude> rhsIncludes;
            rhsIncludes = (((that.includes!= null)&&(!that.includes.isEmpty()))?that.getIncludes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "includes", lhsIncludes), LocatorUtils.property(thatLocator, "includes", rhsIncludes), lhsIncludes, rhsIncludes)) {
                return false;
            }
        }
        {
            List<ValueSetInclude> lhsExcludes;
            lhsExcludes = (((this.excludes!= null)&&(!this.excludes.isEmpty()))?this.getExcludes():null);
            List<ValueSetInclude> rhsExcludes;
            rhsExcludes = (((that.excludes!= null)&&(!that.excludes.isEmpty()))?that.getExcludes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "excludes", lhsExcludes), LocatorUtils.property(thatLocator, "excludes", rhsExcludes), lhsExcludes, rhsExcludes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Uri> theImports;
            theImports = (((this.imports!= null)&&(!this.imports.isEmpty()))?this.getImports():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imports", theImports), currentHashCode, theImports);
        }
        {
            List<ValueSetInclude> theIncludes;
            theIncludes = (((this.includes!= null)&&(!this.includes.isEmpty()))?this.getIncludes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "includes", theIncludes), currentHashCode, theIncludes);
        }
        {
            List<ValueSetInclude> theExcludes;
            theExcludes = (((this.excludes!= null)&&(!this.excludes.isEmpty()))?this.getExcludes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "excludes", theExcludes), currentHashCode, theExcludes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
