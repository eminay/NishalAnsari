//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.EncounterAccomodation;
import org.hl7.fhir.model.EncounterHospitalization;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter.Hospitalization", propOrder = {
    "preAdmissionIdentifier",
    "origin",
    "admitSource",
    "period",
    "accomodations",
    "diet",
    "specialCourtesies",
    "specialArrangements",
    "destination",
    "dischargeDisposition",
    "dischargeDiagnosis",
    "reAdmission"
})
public class EncounterHospitalizationImpl
    extends BackboneElementImpl
    implements Serializable, EncounterHospitalization, Equals, HashCode
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl preAdmissionIdentifier;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl origin;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl admitSource;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(name = "accomodation", type = EncounterAccomodationImpl.class)
    protected List<EncounterAccomodation> accomodations;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl diet;
    @XmlElement(name = "specialCourtesy", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialCourtesies;
    @XmlElement(name = "specialArrangement", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialArrangements;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl destination;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl dischargeDisposition;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl dischargeDiagnosis;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl reAdmission;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PREADMISSIONIDENTIFIER_ENCOU_0")
    public Identifier getPreAdmissionIdentifier() {
        return preAdmissionIdentifier;
    }

    public void setPreAdmissionIdentifier(Identifier value) {
        this.preAdmissionIdentifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORIGIN_ENCOUNTERHOSPITALIZAT_0")
    public ResourceReference getOrigin() {
        return origin;
    }

    public void setOrigin(ResourceReference value) {
        this.origin = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADMITSOURCE_ENCOUNTERHOSPITA_0")
    public CodeableConcept getAdmitSource() {
        return admitSource;
    }

    public void setAdmitSource(CodeableConcept value) {
        this.admitSource = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_ENCOUNTERHOSPITALIZAT_0")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    @OneToMany(targetEntity = EncounterAccomodation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACCOMODATIONS_ENCOUNTERHOSPI_0")
    public List<EncounterAccomodation> getAccomodations() {
        if (accomodations == null) {
            accomodations = new ArrayList<EncounterAccomodation>();
        }
        return this.accomodations;
    }

    public void setAccomodations(List<EncounterAccomodation> accomodations) {
        this.accomodations = accomodations;
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIET_ENCOUNTERHOSPITALIZATIO_0")
    public CodeableConcept getDiet() {
        return diet;
    }

    public void setDiet(CodeableConcept value) {
        this.diet = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIALCOURTESIES_ENCOUNTERH_0")
    public List<CodeableConcept> getSpecialCourtesies() {
        if (specialCourtesies == null) {
            specialCourtesies = new ArrayList<CodeableConcept>();
        }
        return this.specialCourtesies;
    }

    public void setSpecialCourtesies(List<CodeableConcept> specialCourtesies) {
        this.specialCourtesies = specialCourtesies;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIALARRANGEMENTS_ENCOUNTE_0")
    public List<CodeableConcept> getSpecialArrangements() {
        if (specialArrangements == null) {
            specialArrangements = new ArrayList<CodeableConcept>();
        }
        return this.specialArrangements;
    }

    public void setSpecialArrangements(List<CodeableConcept> specialArrangements) {
        this.specialArrangements = specialArrangements;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESTINATION_ENCOUNTERHOSPITA_0")
    public ResourceReference getDestination() {
        return destination;
    }

    public void setDestination(ResourceReference value) {
        this.destination = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISCHARGEDISPOSITION_ENCOUNT_0")
    public CodeableConcept getDischargeDisposition() {
        return dischargeDisposition;
    }

    public void setDischargeDisposition(CodeableConcept value) {
        this.dischargeDisposition = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISCHARGEDIAGNOSIS_ENCOUNTER_0")
    public ResourceReference getDischargeDiagnosis() {
        return dischargeDiagnosis;
    }

    public void setDischargeDiagnosis(ResourceReference value) {
        this.dischargeDiagnosis = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "READMISSION_ENCOUNTERHOSPITA_0")
    public Boolean getReAdmission() {
        return reAdmission;
    }

    public void setReAdmission(Boolean value) {
        this.reAdmission = ((BooleanImpl) value);
    }

    public EncounterHospitalizationImpl withPreAdmissionIdentifier(Identifier value) {
        setPreAdmissionIdentifier(value);
        return this;
    }

    public EncounterHospitalizationImpl withOrigin(ResourceReference value) {
        setOrigin(value);
        return this;
    }

    public EncounterHospitalizationImpl withAdmitSource(CodeableConcept value) {
        setAdmitSource(value);
        return this;
    }

    public EncounterHospitalizationImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public EncounterHospitalizationImpl withAccomodations(EncounterAccomodation... values) {
        if (values!= null) {
            for (EncounterAccomodation value: values) {
                getAccomodations().add(value);
            }
        }
        return this;
    }

    public EncounterHospitalizationImpl withAccomodations(Collection<EncounterAccomodation> values) {
        if (values!= null) {
            getAccomodations().addAll(values);
        }
        return this;
    }

    public EncounterHospitalizationImpl withAccomodations(List<EncounterAccomodation> accomodations) {
        setAccomodations(accomodations);
        return this;
    }

    public EncounterHospitalizationImpl withDiet(CodeableConcept value) {
        setDiet(value);
        return this;
    }

    public EncounterHospitalizationImpl withSpecialCourtesies(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getSpecialCourtesies().add(value);
            }
        }
        return this;
    }

    public EncounterHospitalizationImpl withSpecialCourtesies(Collection<CodeableConcept> values) {
        if (values!= null) {
            getSpecialCourtesies().addAll(values);
        }
        return this;
    }

    public EncounterHospitalizationImpl withSpecialCourtesies(List<CodeableConcept> specialCourtesies) {
        setSpecialCourtesies(specialCourtesies);
        return this;
    }

    public EncounterHospitalizationImpl withSpecialArrangements(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getSpecialArrangements().add(value);
            }
        }
        return this;
    }

    public EncounterHospitalizationImpl withSpecialArrangements(Collection<CodeableConcept> values) {
        if (values!= null) {
            getSpecialArrangements().addAll(values);
        }
        return this;
    }

    public EncounterHospitalizationImpl withSpecialArrangements(List<CodeableConcept> specialArrangements) {
        setSpecialArrangements(specialArrangements);
        return this;
    }

    public EncounterHospitalizationImpl withDestination(ResourceReference value) {
        setDestination(value);
        return this;
    }

    public EncounterHospitalizationImpl withDischargeDisposition(CodeableConcept value) {
        setDischargeDisposition(value);
        return this;
    }

    public EncounterHospitalizationImpl withDischargeDiagnosis(ResourceReference value) {
        setDischargeDiagnosis(value);
        return this;
    }

    public EncounterHospitalizationImpl withReAdmission(Boolean value) {
        setReAdmission(value);
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public EncounterHospitalizationImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof EncounterHospitalizationImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final EncounterHospitalizationImpl that = ((EncounterHospitalizationImpl) object);
        {
            Identifier lhsPreAdmissionIdentifier;
            lhsPreAdmissionIdentifier = this.getPreAdmissionIdentifier();
            Identifier rhsPreAdmissionIdentifier;
            rhsPreAdmissionIdentifier = that.getPreAdmissionIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preAdmissionIdentifier", lhsPreAdmissionIdentifier), LocatorUtils.property(thatLocator, "preAdmissionIdentifier", rhsPreAdmissionIdentifier), lhsPreAdmissionIdentifier, rhsPreAdmissionIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrigin;
            lhsOrigin = this.getOrigin();
            ResourceReference rhsOrigin;
            rhsOrigin = that.getOrigin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "origin", lhsOrigin), LocatorUtils.property(thatLocator, "origin", rhsOrigin), lhsOrigin, rhsOrigin)) {
                return false;
            }
        }
        {
            CodeableConcept lhsAdmitSource;
            lhsAdmitSource = this.getAdmitSource();
            CodeableConcept rhsAdmitSource;
            rhsAdmitSource = that.getAdmitSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "admitSource", lhsAdmitSource), LocatorUtils.property(thatLocator, "admitSource", rhsAdmitSource), lhsAdmitSource, rhsAdmitSource)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            List<EncounterAccomodation> lhsAccomodations;
            lhsAccomodations = (((this.accomodations!= null)&&(!this.accomodations.isEmpty()))?this.getAccomodations():null);
            List<EncounterAccomodation> rhsAccomodations;
            rhsAccomodations = (((that.accomodations!= null)&&(!that.accomodations.isEmpty()))?that.getAccomodations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accomodations", lhsAccomodations), LocatorUtils.property(thatLocator, "accomodations", rhsAccomodations), lhsAccomodations, rhsAccomodations)) {
                return false;
            }
        }
        {
            CodeableConcept lhsDiet;
            lhsDiet = this.getDiet();
            CodeableConcept rhsDiet;
            rhsDiet = that.getDiet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diet", lhsDiet), LocatorUtils.property(thatLocator, "diet", rhsDiet), lhsDiet, rhsDiet)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsSpecialCourtesies;
            lhsSpecialCourtesies = (((this.specialCourtesies!= null)&&(!this.specialCourtesies.isEmpty()))?this.getSpecialCourtesies():null);
            List<CodeableConcept> rhsSpecialCourtesies;
            rhsSpecialCourtesies = (((that.specialCourtesies!= null)&&(!that.specialCourtesies.isEmpty()))?that.getSpecialCourtesies():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialCourtesies", lhsSpecialCourtesies), LocatorUtils.property(thatLocator, "specialCourtesies", rhsSpecialCourtesies), lhsSpecialCourtesies, rhsSpecialCourtesies)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsSpecialArrangements;
            lhsSpecialArrangements = (((this.specialArrangements!= null)&&(!this.specialArrangements.isEmpty()))?this.getSpecialArrangements():null);
            List<CodeableConcept> rhsSpecialArrangements;
            rhsSpecialArrangements = (((that.specialArrangements!= null)&&(!that.specialArrangements.isEmpty()))?that.getSpecialArrangements():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialArrangements", lhsSpecialArrangements), LocatorUtils.property(thatLocator, "specialArrangements", rhsSpecialArrangements), lhsSpecialArrangements, rhsSpecialArrangements)) {
                return false;
            }
        }
        {
            ResourceReference lhsDestination;
            lhsDestination = this.getDestination();
            ResourceReference rhsDestination;
            rhsDestination = that.getDestination();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destination", lhsDestination), LocatorUtils.property(thatLocator, "destination", rhsDestination), lhsDestination, rhsDestination)) {
                return false;
            }
        }
        {
            CodeableConcept lhsDischargeDisposition;
            lhsDischargeDisposition = this.getDischargeDisposition();
            CodeableConcept rhsDischargeDisposition;
            rhsDischargeDisposition = that.getDischargeDisposition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dischargeDisposition", lhsDischargeDisposition), LocatorUtils.property(thatLocator, "dischargeDisposition", rhsDischargeDisposition), lhsDischargeDisposition, rhsDischargeDisposition)) {
                return false;
            }
        }
        {
            ResourceReference lhsDischargeDiagnosis;
            lhsDischargeDiagnosis = this.getDischargeDiagnosis();
            ResourceReference rhsDischargeDiagnosis;
            rhsDischargeDiagnosis = that.getDischargeDiagnosis();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dischargeDiagnosis", lhsDischargeDiagnosis), LocatorUtils.property(thatLocator, "dischargeDiagnosis", rhsDischargeDiagnosis), lhsDischargeDiagnosis, rhsDischargeDiagnosis)) {
                return false;
            }
        }
        {
            Boolean lhsReAdmission;
            lhsReAdmission = this.getReAdmission();
            Boolean rhsReAdmission;
            rhsReAdmission = that.getReAdmission();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reAdmission", lhsReAdmission), LocatorUtils.property(thatLocator, "reAdmission", rhsReAdmission), lhsReAdmission, rhsReAdmission)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier thePreAdmissionIdentifier;
            thePreAdmissionIdentifier = this.getPreAdmissionIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preAdmissionIdentifier", thePreAdmissionIdentifier), currentHashCode, thePreAdmissionIdentifier);
        }
        {
            ResourceReference theOrigin;
            theOrigin = this.getOrigin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "origin", theOrigin), currentHashCode, theOrigin);
        }
        {
            CodeableConcept theAdmitSource;
            theAdmitSource = this.getAdmitSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "admitSource", theAdmitSource), currentHashCode, theAdmitSource);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            List<EncounterAccomodation> theAccomodations;
            theAccomodations = (((this.accomodations!= null)&&(!this.accomodations.isEmpty()))?this.getAccomodations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accomodations", theAccomodations), currentHashCode, theAccomodations);
        }
        {
            CodeableConcept theDiet;
            theDiet = this.getDiet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diet", theDiet), currentHashCode, theDiet);
        }
        {
            List<CodeableConcept> theSpecialCourtesies;
            theSpecialCourtesies = (((this.specialCourtesies!= null)&&(!this.specialCourtesies.isEmpty()))?this.getSpecialCourtesies():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialCourtesies", theSpecialCourtesies), currentHashCode, theSpecialCourtesies);
        }
        {
            List<CodeableConcept> theSpecialArrangements;
            theSpecialArrangements = (((this.specialArrangements!= null)&&(!this.specialArrangements.isEmpty()))?this.getSpecialArrangements():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialArrangements", theSpecialArrangements), currentHashCode, theSpecialArrangements);
        }
        {
            ResourceReference theDestination;
            theDestination = this.getDestination();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destination", theDestination), currentHashCode, theDestination);
        }
        {
            CodeableConcept theDischargeDisposition;
            theDischargeDisposition = this.getDischargeDisposition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dischargeDisposition", theDischargeDisposition), currentHashCode, theDischargeDisposition);
        }
        {
            ResourceReference theDischargeDiagnosis;
            theDischargeDiagnosis = this.getDischargeDiagnosis();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dischargeDiagnosis", theDischargeDiagnosis), currentHashCode, theDischargeDiagnosis);
        }
        {
            Boolean theReAdmission;
            theReAdmission = this.getReAdmission();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reAdmission", theReAdmission), currentHashCode, theReAdmission);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
