//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.AddressUse;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Period;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Address", propOrder = {
    "use",
    "text",
    "lines",
    "city",
    "state",
    "zip",
    "country",
    "period"
})
public class AddressImpl
    extends ElementImpl
    implements Serializable, Address, Equals, HashCode
{

    @XmlElement(type = AddressUseImpl.class)
    protected AddressUseImpl use;
    @XmlElement(type = StringImpl.class)
    protected StringImpl text;
    @XmlElement(name = "line", type = StringImpl.class)
    protected List<org.hl7.fhir.model.String> lines;
    @XmlElement(type = StringImpl.class)
    protected StringImpl city;
    @XmlElement(type = StringImpl.class)
    protected StringImpl state;
    @XmlElement(type = StringImpl.class)
    protected StringImpl zip;
    @XmlElement(type = StringImpl.class)
    protected StringImpl country;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;

    @ManyToOne(targetEntity = AddressUse.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "USE__ADDRESS_HJID")
    public AddressUse getUse() {
        return use;
    }

    public void setUse(AddressUse value) {
        this.use = ((AddressUseImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_ADDRESS_HJID")
    public org.hl7.fhir.model.String getText() {
        return text;
    }

    public void setText(org.hl7.fhir.model.String value) {
        this.text = ((StringImpl) value);
    }

    @OneToMany(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LINES_ADDRESS_HJID")
    public List<org.hl7.fhir.model.String> getLines() {
        if (lines == null) {
            lines = new ArrayList<org.hl7.fhir.model.String>();
        }
        return this.lines;
    }

    public void setLines(List<org.hl7.fhir.model.String> lines) {
        this.lines = lines;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CITY_ADDRESS_HJID")
    public org.hl7.fhir.model.String getCity() {
        return city;
    }

    public void setCity(org.hl7.fhir.model.String value) {
        this.city = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATE__ADDRESS_HJID")
    public org.hl7.fhir.model.String getState() {
        return state;
    }

    public void setState(org.hl7.fhir.model.String value) {
        this.state = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ZIP_ADDRESS_HJID")
    public org.hl7.fhir.model.String getZip() {
        return zip;
    }

    public void setZip(org.hl7.fhir.model.String value) {
        this.zip = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COUNTRY_ADDRESS_HJID")
    public org.hl7.fhir.model.String getCountry() {
        return country;
    }

    public void setCountry(org.hl7.fhir.model.String value) {
        this.country = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_ADDRESS_HJID")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    public AddressImpl withUse(AddressUse value) {
        setUse(value);
        return this;
    }

    public AddressImpl withText(org.hl7.fhir.model.String value) {
        setText(value);
        return this;
    }

    public AddressImpl withLines(org.hl7.fhir.model.String... values) {
        if (values!= null) {
            for (org.hl7.fhir.model.String value: values) {
                getLines().add(value);
            }
        }
        return this;
    }

    public AddressImpl withLines(Collection<org.hl7.fhir.model.String> values) {
        if (values!= null) {
            getLines().addAll(values);
        }
        return this;
    }

    public AddressImpl withLines(List<org.hl7.fhir.model.String> lines) {
        setLines(lines);
        return this;
    }

    public AddressImpl withCity(org.hl7.fhir.model.String value) {
        setCity(value);
        return this;
    }

    public AddressImpl withState(org.hl7.fhir.model.String value) {
        setState(value);
        return this;
    }

    public AddressImpl withZip(org.hl7.fhir.model.String value) {
        setZip(value);
        return this;
    }

    public AddressImpl withCountry(org.hl7.fhir.model.String value) {
        setCountry(value);
        return this;
    }

    public AddressImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    @Override
    public AddressImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public AddressImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public AddressImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public AddressImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AddressImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AddressImpl that = ((AddressImpl) object);
        {
            AddressUse lhsUse;
            lhsUse = this.getUse();
            AddressUse rhsUse;
            rhsUse = that.getUse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "use", lhsUse), LocatorUtils.property(thatLocator, "use", rhsUse), lhsUse, rhsUse)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsText;
            lhsText = this.getText();
            org.hl7.fhir.model.String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            List<org.hl7.fhir.model.String> lhsLines;
            lhsLines = (((this.lines!= null)&&(!this.lines.isEmpty()))?this.getLines():null);
            List<org.hl7.fhir.model.String> rhsLines;
            rhsLines = (((that.lines!= null)&&(!that.lines.isEmpty()))?that.getLines():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lines", lhsLines), LocatorUtils.property(thatLocator, "lines", rhsLines), lhsLines, rhsLines)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsCity;
            lhsCity = this.getCity();
            org.hl7.fhir.model.String rhsCity;
            rhsCity = that.getCity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "city", lhsCity), LocatorUtils.property(thatLocator, "city", rhsCity), lhsCity, rhsCity)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsState;
            lhsState = this.getState();
            org.hl7.fhir.model.String rhsState;
            rhsState = that.getState();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "state", lhsState), LocatorUtils.property(thatLocator, "state", rhsState), lhsState, rhsState)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsZip;
            lhsZip = this.getZip();
            org.hl7.fhir.model.String rhsZip;
            rhsZip = that.getZip();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "zip", lhsZip), LocatorUtils.property(thatLocator, "zip", rhsZip), lhsZip, rhsZip)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsCountry;
            lhsCountry = this.getCountry();
            org.hl7.fhir.model.String rhsCountry;
            rhsCountry = that.getCountry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "country", lhsCountry), LocatorUtils.property(thatLocator, "country", rhsCountry), lhsCountry, rhsCountry)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            AddressUse theUse;
            theUse = this.getUse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "use", theUse), currentHashCode, theUse);
        }
        {
            org.hl7.fhir.model.String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            List<org.hl7.fhir.model.String> theLines;
            theLines = (((this.lines!= null)&&(!this.lines.isEmpty()))?this.getLines():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lines", theLines), currentHashCode, theLines);
        }
        {
            org.hl7.fhir.model.String theCity;
            theCity = this.getCity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "city", theCity), currentHashCode, theCity);
        }
        {
            org.hl7.fhir.model.String theState;
            theState = this.getState();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "state", theState), currentHashCode, theState);
        }
        {
            org.hl7.fhir.model.String theZip;
            theZip = this.getZip();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "zip", theZip), currentHashCode, theZip);
        }
        {
            org.hl7.fhir.model.String theCountry;
            theCountry = this.getCountry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "country", theCountry), currentHashCode, theCountry);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
