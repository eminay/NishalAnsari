//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.Base64Binary;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.Date;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Decimal;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Oid;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.QuestionnaireGroup;
import org.hl7.fhir.model.QuestionnaireQuestion;
import org.hl7.fhir.model.Range;
import org.hl7.fhir.model.Ratio;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SampledData;
import org.hl7.fhir.model.Schedule;
import org.hl7.fhir.model.Uri;
import org.hl7.fhir.model.Uuid;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Questionnaire.Question", propOrder = {
    "name",
    "text",
    "answerInstant",
    "answerDateTime",
    "answerString",
    "answerDate",
    "answerBoolean",
    "answerInteger",
    "answerDecimal",
    "choices",
    "options",
    "dataSchedule",
    "dataContact",
    "dataAddress",
    "dataHumanName",
    "dataSampledData",
    "dataResource",
    "dataRatio",
    "dataPeriod",
    "dataRange",
    "dataQuantity",
    "dataCoding",
    "dataCodeableConcept",
    "dataIdentifier",
    "dataAttachment",
    "dataId",
    "dataUuid",
    "dataOid",
    "dataCode",
    "dataDateTime",
    "dataDate",
    "dataUri",
    "dataString",
    "dataInstant",
    "dataBase64Binary",
    "dataDecimal",
    "dataInteger",
    "dataBoolean",
    "remarks",
    "groups"
})
public class QuestionnaireQuestionImpl
    extends BackboneElementImpl
    implements Serializable, QuestionnaireQuestion, Equals, HashCode
{

    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl name;
    @XmlElement(type = StringImpl.class)
    protected StringImpl text;
    @XmlElement(type = InstantImpl.class)
    protected InstantImpl answerInstant;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl answerDateTime;
    @XmlElement(type = StringImpl.class)
    protected StringImpl answerString;
    @XmlElement(type = DateImpl.class)
    protected DateImpl answerDate;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl answerBoolean;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl answerInteger;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl answerDecimal;
    @XmlElement(name = "choice", type = CodingImpl.class)
    protected List<Coding> choices;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl options;
    @XmlElement(type = ScheduleImpl.class)
    protected ScheduleImpl dataSchedule;
    @XmlElement(type = ContactImpl.class)
    protected ContactImpl dataContact;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl dataAddress;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl dataHumanName;
    @XmlElement(type = SampledDataImpl.class)
    protected SampledDataImpl dataSampledData;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl dataResource;
    @XmlElement(type = RatioImpl.class)
    protected RatioImpl dataRatio;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl dataPeriod;
    @XmlElement(type = RangeImpl.class)
    protected RangeImpl dataRange;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl dataQuantity;
    @XmlElement(type = CodingImpl.class)
    protected CodingImpl dataCoding;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl dataCodeableConcept;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl dataIdentifier;
    @XmlElement(type = AttachmentImpl.class)
    protected AttachmentImpl dataAttachment;
    @XmlElement(type = IdImpl.class)
    protected IdImpl dataId;
    @XmlElement(type = UuidImpl.class)
    protected UuidImpl dataUuid;
    @XmlElement(type = OidImpl.class)
    protected OidImpl dataOid;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl dataCode;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dataDateTime;
    @XmlElement(type = DateImpl.class)
    protected DateImpl dataDate;
    @XmlElement(type = UriImpl.class)
    protected UriImpl dataUri;
    @XmlElement(type = StringImpl.class)
    protected StringImpl dataString;
    @XmlElement(type = InstantImpl.class)
    protected InstantImpl dataInstant;
    @XmlElement(type = Base64BinaryImpl.class)
    protected Base64BinaryImpl dataBase64Binary;
    @XmlElement(type = DecimalImpl.class)
    protected DecimalImpl dataDecimal;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl dataInteger;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl dataBoolean;
    @XmlElement(type = StringImpl.class)
    protected StringImpl remarks;
    @XmlElement(name = "group", type = QuestionnaireGroupImpl.class)
    protected List<QuestionnaireGroup> groups;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__QUESTIONNAIREQUESTION__0")
    public CodeableConcept getName() {
        return name;
    }

    public void setName(CodeableConcept value) {
        this.name = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_QUESTIONNAIREQUESTION_H_0")
    public org.hl7.fhir.model.String getText() {
        return text;
    }

    public void setText(org.hl7.fhir.model.String value) {
        this.text = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERINSTANT_QUESTIONNAIREQ_0")
    public Instant getAnswerInstant() {
        return answerInstant;
    }

    public void setAnswerInstant(Instant value) {
        this.answerInstant = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERDATETIME_QUESTIONNAIRE_0")
    public DateTime getAnswerDateTime() {
        return answerDateTime;
    }

    public void setAnswerDateTime(DateTime value) {
        this.answerDateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERSTRING_QUESTIONNAIREQU_0")
    public org.hl7.fhir.model.String getAnswerString() {
        return answerString;
    }

    public void setAnswerString(org.hl7.fhir.model.String value) {
        this.answerString = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERDATE_QUESTIONNAIREQUES_0")
    public Date getAnswerDate() {
        return answerDate;
    }

    public void setAnswerDate(Date value) {
        this.answerDate = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERBOOLEAN_QUESTIONNAIREQ_0")
    public Boolean getAnswerBoolean() {
        return answerBoolean;
    }

    public void setAnswerBoolean(Boolean value) {
        this.answerBoolean = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERINTEGER_QUESTIONNAIREQ_0")
    public Integer getAnswerInteger() {
        return answerInteger;
    }

    public void setAnswerInteger(Integer value) {
        this.answerInteger = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANSWERDECIMAL_QUESTIONNAIREQ_0")
    public Decimal getAnswerDecimal() {
        return answerDecimal;
    }

    public void setAnswerDecimal(Decimal value) {
        this.answerDecimal = ((DecimalImpl) value);
    }

    @OneToMany(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CHOICES_QUESTIONNAIREQUESTIO_0")
    public List<Coding> getChoices() {
        if (choices == null) {
            choices = new ArrayList<Coding>();
        }
        return this.choices;
    }

    public void setChoices(List<Coding> choices) {
        this.choices = choices;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPTIONS__QUESTIONNAIREQUESTI_0")
    public ResourceReference getOptions() {
        return options;
    }

    public void setOptions(ResourceReference value) {
        this.options = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Schedule.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATASCHEDULE_QUESTIONNAIREQU_0")
    public Schedule getDataSchedule() {
        return dataSchedule;
    }

    public void setDataSchedule(Schedule value) {
        this.dataSchedule = ((ScheduleImpl) value);
    }

    @ManyToOne(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATACONTACT_QUESTIONNAIREQUE_0")
    public Contact getDataContact() {
        return dataContact;
    }

    public void setDataContact(Contact value) {
        this.dataContact = ((ContactImpl) value);
    }

    @ManyToOne(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAADDRESS_QUESTIONNAIREQUE_0")
    public Address getDataAddress() {
        return dataAddress;
    }

    public void setDataAddress(Address value) {
        this.dataAddress = ((AddressImpl) value);
    }

    @ManyToOne(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAHUMANNAME_QUESTIONNAIREQ_0")
    public HumanName getDataHumanName() {
        return dataHumanName;
    }

    public void setDataHumanName(HumanName value) {
        this.dataHumanName = ((HumanNameImpl) value);
    }

    @ManyToOne(targetEntity = SampledData.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATASAMPLEDDATA_QUESTIONNAIR_0")
    public SampledData getDataSampledData() {
        return dataSampledData;
    }

    public void setDataSampledData(SampledData value) {
        this.dataSampledData = ((SampledDataImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATARESOURCE_QUESTIONNAIREQU_0")
    public ResourceReference getDataResource() {
        return dataResource;
    }

    public void setDataResource(ResourceReference value) {
        this.dataResource = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Ratio.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATARATIO_QUESTIONNAIREQUEST_0")
    public Ratio getDataRatio() {
        return dataRatio;
    }

    public void setDataRatio(Ratio value) {
        this.dataRatio = ((RatioImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAPERIOD_QUESTIONNAIREQUES_0")
    public Period getDataPeriod() {
        return dataPeriod;
    }

    public void setDataPeriod(Period value) {
        this.dataPeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = Range.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATARANGE_QUESTIONNAIREQUEST_0")
    public Range getDataRange() {
        return dataRange;
    }

    public void setDataRange(Range value) {
        this.dataRange = ((RangeImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAQUANTITY_QUESTIONNAIREQU_0")
    public Quantity getDataQuantity() {
        return dataQuantity;
    }

    public void setDataQuantity(Quantity value) {
        this.dataQuantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATACODING_QUESTIONNAIREQUES_0")
    public Coding getDataCoding() {
        return dataCoding;
    }

    public void setDataCoding(Coding value) {
        this.dataCoding = ((CodingImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATACODEABLECONCEPT_QUESTION_0")
    public CodeableConcept getDataCodeableConcept() {
        return dataCodeableConcept;
    }

    public void setDataCodeableConcept(CodeableConcept value) {
        this.dataCodeableConcept = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAIDENTIFIER_QUESTIONNAIRE_0")
    public Identifier getDataIdentifier() {
        return dataIdentifier;
    }

    public void setDataIdentifier(Identifier value) {
        this.dataIdentifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAATTACHMENT_QUESTIONNAIRE_0")
    public Attachment getDataAttachment() {
        return dataAttachment;
    }

    public void setDataAttachment(Attachment value) {
        this.dataAttachment = ((AttachmentImpl) value);
    }

    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAID_QUESTIONNAIREQUESTION_0")
    public Id getDataId() {
        return dataId;
    }

    public void setDataId(Id value) {
        this.dataId = ((IdImpl) value);
    }

    @ManyToOne(targetEntity = Uuid.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAUUID_QUESTIONNAIREQUESTI_0")
    public Uuid getDataUuid() {
        return dataUuid;
    }

    public void setDataUuid(Uuid value) {
        this.dataUuid = ((UuidImpl) value);
    }

    @ManyToOne(targetEntity = Oid.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAOID_QUESTIONNAIREQUESTIO_0")
    public Oid getDataOid() {
        return dataOid;
    }

    public void setDataOid(Oid value) {
        this.dataOid = ((OidImpl) value);
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATACODE_QUESTIONNAIREQUESTI_0")
    public Code getDataCode() {
        return dataCode;
    }

    public void setDataCode(Code value) {
        this.dataCode = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATADATETIME_QUESTIONNAIREQU_0")
    public DateTime getDataDateTime() {
        return dataDateTime;
    }

    public void setDataDateTime(DateTime value) {
        this.dataDateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATADATE_QUESTIONNAIREQUESTI_0")
    public Date getDataDate() {
        return dataDate;
    }

    public void setDataDate(Date value) {
        this.dataDate = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAURI_QUESTIONNAIREQUESTIO_0")
    public Uri getDataUri() {
        return dataUri;
    }

    public void setDataUri(Uri value) {
        this.dataUri = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATASTRING_QUESTIONNAIREQUES_0")
    public org.hl7.fhir.model.String getDataString() {
        return dataString;
    }

    public void setDataString(org.hl7.fhir.model.String value) {
        this.dataString = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAINSTANT_QUESTIONNAIREQUE_0")
    public Instant getDataInstant() {
        return dataInstant;
    }

    public void setDataInstant(Instant value) {
        this.dataInstant = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = Base64Binary.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATABASE64BINARY_QUESTIONNAI_0")
    public Base64Binary getDataBase64Binary() {
        return dataBase64Binary;
    }

    public void setDataBase64Binary(Base64Binary value) {
        this.dataBase64Binary = ((Base64BinaryImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATADECIMAL_QUESTIONNAIREQUE_0")
    public Decimal getDataDecimal() {
        return dataDecimal;
    }

    public void setDataDecimal(Decimal value) {
        this.dataDecimal = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAINTEGER_QUESTIONNAIREQUE_0")
    public Integer getDataInteger() {
        return dataInteger;
    }

    public void setDataInteger(Integer value) {
        this.dataInteger = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATABOOLEAN_QUESTIONNAIREQUE_0")
    public Boolean getDataBoolean() {
        return dataBoolean;
    }

    public void setDataBoolean(Boolean value) {
        this.dataBoolean = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REMARKS_QUESTIONNAIREQUESTIO_0")
    public org.hl7.fhir.model.String getRemarks() {
        return remarks;
    }

    public void setRemarks(org.hl7.fhir.model.String value) {
        this.remarks = ((StringImpl) value);
    }

    @OneToMany(targetEntity = QuestionnaireGroup.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GROUPS_QUESTIONNAIREQUESTION_0")
    public List<QuestionnaireGroup> getGroups() {
        if (groups == null) {
            groups = new ArrayList<QuestionnaireGroup>();
        }
        return this.groups;
    }

    public void setGroups(List<QuestionnaireGroup> groups) {
        this.groups = groups;
    }

    public QuestionnaireQuestionImpl withName(CodeableConcept value) {
        setName(value);
        return this;
    }

    public QuestionnaireQuestionImpl withText(org.hl7.fhir.model.String value) {
        setText(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerInstant(Instant value) {
        setAnswerInstant(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerDateTime(DateTime value) {
        setAnswerDateTime(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerString(org.hl7.fhir.model.String value) {
        setAnswerString(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerDate(Date value) {
        setAnswerDate(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerBoolean(Boolean value) {
        setAnswerBoolean(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerInteger(Integer value) {
        setAnswerInteger(value);
        return this;
    }

    public QuestionnaireQuestionImpl withAnswerDecimal(Decimal value) {
        setAnswerDecimal(value);
        return this;
    }

    public QuestionnaireQuestionImpl withChoices(Coding... values) {
        if (values!= null) {
            for (Coding value: values) {
                getChoices().add(value);
            }
        }
        return this;
    }

    public QuestionnaireQuestionImpl withChoices(Collection<Coding> values) {
        if (values!= null) {
            getChoices().addAll(values);
        }
        return this;
    }

    public QuestionnaireQuestionImpl withChoices(List<Coding> choices) {
        setChoices(choices);
        return this;
    }

    public QuestionnaireQuestionImpl withOptions(ResourceReference value) {
        setOptions(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataSchedule(Schedule value) {
        setDataSchedule(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataContact(Contact value) {
        setDataContact(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataAddress(Address value) {
        setDataAddress(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataHumanName(HumanName value) {
        setDataHumanName(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataSampledData(SampledData value) {
        setDataSampledData(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataResource(ResourceReference value) {
        setDataResource(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataRatio(Ratio value) {
        setDataRatio(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataPeriod(Period value) {
        setDataPeriod(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataRange(Range value) {
        setDataRange(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataQuantity(Quantity value) {
        setDataQuantity(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataCoding(Coding value) {
        setDataCoding(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataCodeableConcept(CodeableConcept value) {
        setDataCodeableConcept(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataIdentifier(Identifier value) {
        setDataIdentifier(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataAttachment(Attachment value) {
        setDataAttachment(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataId(Id value) {
        setDataId(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataUuid(Uuid value) {
        setDataUuid(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataOid(Oid value) {
        setDataOid(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataCode(Code value) {
        setDataCode(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataDateTime(DateTime value) {
        setDataDateTime(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataDate(Date value) {
        setDataDate(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataUri(Uri value) {
        setDataUri(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataString(org.hl7.fhir.model.String value) {
        setDataString(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataInstant(Instant value) {
        setDataInstant(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataBase64Binary(Base64Binary value) {
        setDataBase64Binary(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataDecimal(Decimal value) {
        setDataDecimal(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataInteger(Integer value) {
        setDataInteger(value);
        return this;
    }

    public QuestionnaireQuestionImpl withDataBoolean(Boolean value) {
        setDataBoolean(value);
        return this;
    }

    public QuestionnaireQuestionImpl withRemarks(org.hl7.fhir.model.String value) {
        setRemarks(value);
        return this;
    }

    public QuestionnaireQuestionImpl withGroups(QuestionnaireGroup... values) {
        if (values!= null) {
            for (QuestionnaireGroup value: values) {
                getGroups().add(value);
            }
        }
        return this;
    }

    public QuestionnaireQuestionImpl withGroups(Collection<QuestionnaireGroup> values) {
        if (values!= null) {
            getGroups().addAll(values);
        }
        return this;
    }

    public QuestionnaireQuestionImpl withGroups(List<QuestionnaireGroup> groups) {
        setGroups(groups);
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public QuestionnaireQuestionImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof QuestionnaireQuestionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final QuestionnaireQuestionImpl that = ((QuestionnaireQuestionImpl) object);
        {
            CodeableConcept lhsName;
            lhsName = this.getName();
            CodeableConcept rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsText;
            lhsText = this.getText();
            org.hl7.fhir.model.String rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            Instant lhsAnswerInstant;
            lhsAnswerInstant = this.getAnswerInstant();
            Instant rhsAnswerInstant;
            rhsAnswerInstant = that.getAnswerInstant();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerInstant", lhsAnswerInstant), LocatorUtils.property(thatLocator, "answerInstant", rhsAnswerInstant), lhsAnswerInstant, rhsAnswerInstant)) {
                return false;
            }
        }
        {
            DateTime lhsAnswerDateTime;
            lhsAnswerDateTime = this.getAnswerDateTime();
            DateTime rhsAnswerDateTime;
            rhsAnswerDateTime = that.getAnswerDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerDateTime", lhsAnswerDateTime), LocatorUtils.property(thatLocator, "answerDateTime", rhsAnswerDateTime), lhsAnswerDateTime, rhsAnswerDateTime)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsAnswerString;
            lhsAnswerString = this.getAnswerString();
            org.hl7.fhir.model.String rhsAnswerString;
            rhsAnswerString = that.getAnswerString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerString", lhsAnswerString), LocatorUtils.property(thatLocator, "answerString", rhsAnswerString), lhsAnswerString, rhsAnswerString)) {
                return false;
            }
        }
        {
            Date lhsAnswerDate;
            lhsAnswerDate = this.getAnswerDate();
            Date rhsAnswerDate;
            rhsAnswerDate = that.getAnswerDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerDate", lhsAnswerDate), LocatorUtils.property(thatLocator, "answerDate", rhsAnswerDate), lhsAnswerDate, rhsAnswerDate)) {
                return false;
            }
        }
        {
            Boolean lhsAnswerBoolean;
            lhsAnswerBoolean = this.getAnswerBoolean();
            Boolean rhsAnswerBoolean;
            rhsAnswerBoolean = that.getAnswerBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerBoolean", lhsAnswerBoolean), LocatorUtils.property(thatLocator, "answerBoolean", rhsAnswerBoolean), lhsAnswerBoolean, rhsAnswerBoolean)) {
                return false;
            }
        }
        {
            Integer lhsAnswerInteger;
            lhsAnswerInteger = this.getAnswerInteger();
            Integer rhsAnswerInteger;
            rhsAnswerInteger = that.getAnswerInteger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerInteger", lhsAnswerInteger), LocatorUtils.property(thatLocator, "answerInteger", rhsAnswerInteger), lhsAnswerInteger, rhsAnswerInteger)) {
                return false;
            }
        }
        {
            Decimal lhsAnswerDecimal;
            lhsAnswerDecimal = this.getAnswerDecimal();
            Decimal rhsAnswerDecimal;
            rhsAnswerDecimal = that.getAnswerDecimal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "answerDecimal", lhsAnswerDecimal), LocatorUtils.property(thatLocator, "answerDecimal", rhsAnswerDecimal), lhsAnswerDecimal, rhsAnswerDecimal)) {
                return false;
            }
        }
        {
            List<Coding> lhsChoices;
            lhsChoices = (((this.choices!= null)&&(!this.choices.isEmpty()))?this.getChoices():null);
            List<Coding> rhsChoices;
            rhsChoices = (((that.choices!= null)&&(!that.choices.isEmpty()))?that.getChoices():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "choices", lhsChoices), LocatorUtils.property(thatLocator, "choices", rhsChoices), lhsChoices, rhsChoices)) {
                return false;
            }
        }
        {
            ResourceReference lhsOptions;
            lhsOptions = this.getOptions();
            ResourceReference rhsOptions;
            rhsOptions = that.getOptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "options", lhsOptions), LocatorUtils.property(thatLocator, "options", rhsOptions), lhsOptions, rhsOptions)) {
                return false;
            }
        }
        {
            Schedule lhsDataSchedule;
            lhsDataSchedule = this.getDataSchedule();
            Schedule rhsDataSchedule;
            rhsDataSchedule = that.getDataSchedule();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataSchedule", lhsDataSchedule), LocatorUtils.property(thatLocator, "dataSchedule", rhsDataSchedule), lhsDataSchedule, rhsDataSchedule)) {
                return false;
            }
        }
        {
            Contact lhsDataContact;
            lhsDataContact = this.getDataContact();
            Contact rhsDataContact;
            rhsDataContact = that.getDataContact();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataContact", lhsDataContact), LocatorUtils.property(thatLocator, "dataContact", rhsDataContact), lhsDataContact, rhsDataContact)) {
                return false;
            }
        }
        {
            Address lhsDataAddress;
            lhsDataAddress = this.getDataAddress();
            Address rhsDataAddress;
            rhsDataAddress = that.getDataAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataAddress", lhsDataAddress), LocatorUtils.property(thatLocator, "dataAddress", rhsDataAddress), lhsDataAddress, rhsDataAddress)) {
                return false;
            }
        }
        {
            HumanName lhsDataHumanName;
            lhsDataHumanName = this.getDataHumanName();
            HumanName rhsDataHumanName;
            rhsDataHumanName = that.getDataHumanName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataHumanName", lhsDataHumanName), LocatorUtils.property(thatLocator, "dataHumanName", rhsDataHumanName), lhsDataHumanName, rhsDataHumanName)) {
                return false;
            }
        }
        {
            SampledData lhsDataSampledData;
            lhsDataSampledData = this.getDataSampledData();
            SampledData rhsDataSampledData;
            rhsDataSampledData = that.getDataSampledData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataSampledData", lhsDataSampledData), LocatorUtils.property(thatLocator, "dataSampledData", rhsDataSampledData), lhsDataSampledData, rhsDataSampledData)) {
                return false;
            }
        }
        {
            ResourceReference lhsDataResource;
            lhsDataResource = this.getDataResource();
            ResourceReference rhsDataResource;
            rhsDataResource = that.getDataResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataResource", lhsDataResource), LocatorUtils.property(thatLocator, "dataResource", rhsDataResource), lhsDataResource, rhsDataResource)) {
                return false;
            }
        }
        {
            Ratio lhsDataRatio;
            lhsDataRatio = this.getDataRatio();
            Ratio rhsDataRatio;
            rhsDataRatio = that.getDataRatio();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataRatio", lhsDataRatio), LocatorUtils.property(thatLocator, "dataRatio", rhsDataRatio), lhsDataRatio, rhsDataRatio)) {
                return false;
            }
        }
        {
            Period lhsDataPeriod;
            lhsDataPeriod = this.getDataPeriod();
            Period rhsDataPeriod;
            rhsDataPeriod = that.getDataPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataPeriod", lhsDataPeriod), LocatorUtils.property(thatLocator, "dataPeriod", rhsDataPeriod), lhsDataPeriod, rhsDataPeriod)) {
                return false;
            }
        }
        {
            Range lhsDataRange;
            lhsDataRange = this.getDataRange();
            Range rhsDataRange;
            rhsDataRange = that.getDataRange();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataRange", lhsDataRange), LocatorUtils.property(thatLocator, "dataRange", rhsDataRange), lhsDataRange, rhsDataRange)) {
                return false;
            }
        }
        {
            Quantity lhsDataQuantity;
            lhsDataQuantity = this.getDataQuantity();
            Quantity rhsDataQuantity;
            rhsDataQuantity = that.getDataQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataQuantity", lhsDataQuantity), LocatorUtils.property(thatLocator, "dataQuantity", rhsDataQuantity), lhsDataQuantity, rhsDataQuantity)) {
                return false;
            }
        }
        {
            Coding lhsDataCoding;
            lhsDataCoding = this.getDataCoding();
            Coding rhsDataCoding;
            rhsDataCoding = that.getDataCoding();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataCoding", lhsDataCoding), LocatorUtils.property(thatLocator, "dataCoding", rhsDataCoding), lhsDataCoding, rhsDataCoding)) {
                return false;
            }
        }
        {
            CodeableConcept lhsDataCodeableConcept;
            lhsDataCodeableConcept = this.getDataCodeableConcept();
            CodeableConcept rhsDataCodeableConcept;
            rhsDataCodeableConcept = that.getDataCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataCodeableConcept", lhsDataCodeableConcept), LocatorUtils.property(thatLocator, "dataCodeableConcept", rhsDataCodeableConcept), lhsDataCodeableConcept, rhsDataCodeableConcept)) {
                return false;
            }
        }
        {
            Identifier lhsDataIdentifier;
            lhsDataIdentifier = this.getDataIdentifier();
            Identifier rhsDataIdentifier;
            rhsDataIdentifier = that.getDataIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataIdentifier", lhsDataIdentifier), LocatorUtils.property(thatLocator, "dataIdentifier", rhsDataIdentifier), lhsDataIdentifier, rhsDataIdentifier)) {
                return false;
            }
        }
        {
            Attachment lhsDataAttachment;
            lhsDataAttachment = this.getDataAttachment();
            Attachment rhsDataAttachment;
            rhsDataAttachment = that.getDataAttachment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataAttachment", lhsDataAttachment), LocatorUtils.property(thatLocator, "dataAttachment", rhsDataAttachment), lhsDataAttachment, rhsDataAttachment)) {
                return false;
            }
        }
        {
            Id lhsDataId;
            lhsDataId = this.getDataId();
            Id rhsDataId;
            rhsDataId = that.getDataId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataId", lhsDataId), LocatorUtils.property(thatLocator, "dataId", rhsDataId), lhsDataId, rhsDataId)) {
                return false;
            }
        }
        {
            Uuid lhsDataUuid;
            lhsDataUuid = this.getDataUuid();
            Uuid rhsDataUuid;
            rhsDataUuid = that.getDataUuid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataUuid", lhsDataUuid), LocatorUtils.property(thatLocator, "dataUuid", rhsDataUuid), lhsDataUuid, rhsDataUuid)) {
                return false;
            }
        }
        {
            Oid lhsDataOid;
            lhsDataOid = this.getDataOid();
            Oid rhsDataOid;
            rhsDataOid = that.getDataOid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataOid", lhsDataOid), LocatorUtils.property(thatLocator, "dataOid", rhsDataOid), lhsDataOid, rhsDataOid)) {
                return false;
            }
        }
        {
            Code lhsDataCode;
            lhsDataCode = this.getDataCode();
            Code rhsDataCode;
            rhsDataCode = that.getDataCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataCode", lhsDataCode), LocatorUtils.property(thatLocator, "dataCode", rhsDataCode), lhsDataCode, rhsDataCode)) {
                return false;
            }
        }
        {
            DateTime lhsDataDateTime;
            lhsDataDateTime = this.getDataDateTime();
            DateTime rhsDataDateTime;
            rhsDataDateTime = that.getDataDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataDateTime", lhsDataDateTime), LocatorUtils.property(thatLocator, "dataDateTime", rhsDataDateTime), lhsDataDateTime, rhsDataDateTime)) {
                return false;
            }
        }
        {
            Date lhsDataDate;
            lhsDataDate = this.getDataDate();
            Date rhsDataDate;
            rhsDataDate = that.getDataDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataDate", lhsDataDate), LocatorUtils.property(thatLocator, "dataDate", rhsDataDate), lhsDataDate, rhsDataDate)) {
                return false;
            }
        }
        {
            Uri lhsDataUri;
            lhsDataUri = this.getDataUri();
            Uri rhsDataUri;
            rhsDataUri = that.getDataUri();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataUri", lhsDataUri), LocatorUtils.property(thatLocator, "dataUri", rhsDataUri), lhsDataUri, rhsDataUri)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDataString;
            lhsDataString = this.getDataString();
            org.hl7.fhir.model.String rhsDataString;
            rhsDataString = that.getDataString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataString", lhsDataString), LocatorUtils.property(thatLocator, "dataString", rhsDataString), lhsDataString, rhsDataString)) {
                return false;
            }
        }
        {
            Instant lhsDataInstant;
            lhsDataInstant = this.getDataInstant();
            Instant rhsDataInstant;
            rhsDataInstant = that.getDataInstant();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataInstant", lhsDataInstant), LocatorUtils.property(thatLocator, "dataInstant", rhsDataInstant), lhsDataInstant, rhsDataInstant)) {
                return false;
            }
        }
        {
            Base64Binary lhsDataBase64Binary;
            lhsDataBase64Binary = this.getDataBase64Binary();
            Base64Binary rhsDataBase64Binary;
            rhsDataBase64Binary = that.getDataBase64Binary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataBase64Binary", lhsDataBase64Binary), LocatorUtils.property(thatLocator, "dataBase64Binary", rhsDataBase64Binary), lhsDataBase64Binary, rhsDataBase64Binary)) {
                return false;
            }
        }
        {
            Decimal lhsDataDecimal;
            lhsDataDecimal = this.getDataDecimal();
            Decimal rhsDataDecimal;
            rhsDataDecimal = that.getDataDecimal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataDecimal", lhsDataDecimal), LocatorUtils.property(thatLocator, "dataDecimal", rhsDataDecimal), lhsDataDecimal, rhsDataDecimal)) {
                return false;
            }
        }
        {
            Integer lhsDataInteger;
            lhsDataInteger = this.getDataInteger();
            Integer rhsDataInteger;
            rhsDataInteger = that.getDataInteger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataInteger", lhsDataInteger), LocatorUtils.property(thatLocator, "dataInteger", rhsDataInteger), lhsDataInteger, rhsDataInteger)) {
                return false;
            }
        }
        {
            Boolean lhsDataBoolean;
            lhsDataBoolean = this.getDataBoolean();
            Boolean rhsDataBoolean;
            rhsDataBoolean = that.getDataBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataBoolean", lhsDataBoolean), LocatorUtils.property(thatLocator, "dataBoolean", rhsDataBoolean), lhsDataBoolean, rhsDataBoolean)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsRemarks;
            lhsRemarks = this.getRemarks();
            org.hl7.fhir.model.String rhsRemarks;
            rhsRemarks = that.getRemarks();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "remarks", lhsRemarks), LocatorUtils.property(thatLocator, "remarks", rhsRemarks), lhsRemarks, rhsRemarks)) {
                return false;
            }
        }
        {
            List<QuestionnaireGroup> lhsGroups;
            lhsGroups = (((this.groups!= null)&&(!this.groups.isEmpty()))?this.getGroups():null);
            List<QuestionnaireGroup> rhsGroups;
            rhsGroups = (((that.groups!= null)&&(!that.groups.isEmpty()))?that.getGroups():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groups", lhsGroups), LocatorUtils.property(thatLocator, "groups", rhsGroups), lhsGroups, rhsGroups)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.model.String theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            Instant theAnswerInstant;
            theAnswerInstant = this.getAnswerInstant();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerInstant", theAnswerInstant), currentHashCode, theAnswerInstant);
        }
        {
            DateTime theAnswerDateTime;
            theAnswerDateTime = this.getAnswerDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerDateTime", theAnswerDateTime), currentHashCode, theAnswerDateTime);
        }
        {
            org.hl7.fhir.model.String theAnswerString;
            theAnswerString = this.getAnswerString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerString", theAnswerString), currentHashCode, theAnswerString);
        }
        {
            Date theAnswerDate;
            theAnswerDate = this.getAnswerDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerDate", theAnswerDate), currentHashCode, theAnswerDate);
        }
        {
            Boolean theAnswerBoolean;
            theAnswerBoolean = this.getAnswerBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerBoolean", theAnswerBoolean), currentHashCode, theAnswerBoolean);
        }
        {
            Integer theAnswerInteger;
            theAnswerInteger = this.getAnswerInteger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerInteger", theAnswerInteger), currentHashCode, theAnswerInteger);
        }
        {
            Decimal theAnswerDecimal;
            theAnswerDecimal = this.getAnswerDecimal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "answerDecimal", theAnswerDecimal), currentHashCode, theAnswerDecimal);
        }
        {
            List<Coding> theChoices;
            theChoices = (((this.choices!= null)&&(!this.choices.isEmpty()))?this.getChoices():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "choices", theChoices), currentHashCode, theChoices);
        }
        {
            ResourceReference theOptions;
            theOptions = this.getOptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "options", theOptions), currentHashCode, theOptions);
        }
        {
            Schedule theDataSchedule;
            theDataSchedule = this.getDataSchedule();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataSchedule", theDataSchedule), currentHashCode, theDataSchedule);
        }
        {
            Contact theDataContact;
            theDataContact = this.getDataContact();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataContact", theDataContact), currentHashCode, theDataContact);
        }
        {
            Address theDataAddress;
            theDataAddress = this.getDataAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataAddress", theDataAddress), currentHashCode, theDataAddress);
        }
        {
            HumanName theDataHumanName;
            theDataHumanName = this.getDataHumanName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataHumanName", theDataHumanName), currentHashCode, theDataHumanName);
        }
        {
            SampledData theDataSampledData;
            theDataSampledData = this.getDataSampledData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataSampledData", theDataSampledData), currentHashCode, theDataSampledData);
        }
        {
            ResourceReference theDataResource;
            theDataResource = this.getDataResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataResource", theDataResource), currentHashCode, theDataResource);
        }
        {
            Ratio theDataRatio;
            theDataRatio = this.getDataRatio();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataRatio", theDataRatio), currentHashCode, theDataRatio);
        }
        {
            Period theDataPeriod;
            theDataPeriod = this.getDataPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataPeriod", theDataPeriod), currentHashCode, theDataPeriod);
        }
        {
            Range theDataRange;
            theDataRange = this.getDataRange();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataRange", theDataRange), currentHashCode, theDataRange);
        }
        {
            Quantity theDataQuantity;
            theDataQuantity = this.getDataQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataQuantity", theDataQuantity), currentHashCode, theDataQuantity);
        }
        {
            Coding theDataCoding;
            theDataCoding = this.getDataCoding();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataCoding", theDataCoding), currentHashCode, theDataCoding);
        }
        {
            CodeableConcept theDataCodeableConcept;
            theDataCodeableConcept = this.getDataCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataCodeableConcept", theDataCodeableConcept), currentHashCode, theDataCodeableConcept);
        }
        {
            Identifier theDataIdentifier;
            theDataIdentifier = this.getDataIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataIdentifier", theDataIdentifier), currentHashCode, theDataIdentifier);
        }
        {
            Attachment theDataAttachment;
            theDataAttachment = this.getDataAttachment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataAttachment", theDataAttachment), currentHashCode, theDataAttachment);
        }
        {
            Id theDataId;
            theDataId = this.getDataId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataId", theDataId), currentHashCode, theDataId);
        }
        {
            Uuid theDataUuid;
            theDataUuid = this.getDataUuid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataUuid", theDataUuid), currentHashCode, theDataUuid);
        }
        {
            Oid theDataOid;
            theDataOid = this.getDataOid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataOid", theDataOid), currentHashCode, theDataOid);
        }
        {
            Code theDataCode;
            theDataCode = this.getDataCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataCode", theDataCode), currentHashCode, theDataCode);
        }
        {
            DateTime theDataDateTime;
            theDataDateTime = this.getDataDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataDateTime", theDataDateTime), currentHashCode, theDataDateTime);
        }
        {
            Date theDataDate;
            theDataDate = this.getDataDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataDate", theDataDate), currentHashCode, theDataDate);
        }
        {
            Uri theDataUri;
            theDataUri = this.getDataUri();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataUri", theDataUri), currentHashCode, theDataUri);
        }
        {
            org.hl7.fhir.model.String theDataString;
            theDataString = this.getDataString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataString", theDataString), currentHashCode, theDataString);
        }
        {
            Instant theDataInstant;
            theDataInstant = this.getDataInstant();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataInstant", theDataInstant), currentHashCode, theDataInstant);
        }
        {
            Base64Binary theDataBase64Binary;
            theDataBase64Binary = this.getDataBase64Binary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataBase64Binary", theDataBase64Binary), currentHashCode, theDataBase64Binary);
        }
        {
            Decimal theDataDecimal;
            theDataDecimal = this.getDataDecimal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataDecimal", theDataDecimal), currentHashCode, theDataDecimal);
        }
        {
            Integer theDataInteger;
            theDataInteger = this.getDataInteger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataInteger", theDataInteger), currentHashCode, theDataInteger);
        }
        {
            Boolean theDataBoolean;
            theDataBoolean = this.getDataBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataBoolean", theDataBoolean), currentHashCode, theDataBoolean);
        }
        {
            org.hl7.fhir.model.String theRemarks;
            theRemarks = this.getRemarks();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "remarks", theRemarks), currentHashCode, theRemarks);
        }
        {
            List<QuestionnaireGroup> theGroups;
            theGroups = (((this.groups!= null)&&(!this.groups.isEmpty()))?this.getGroups():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groups", theGroups), currentHashCode, theGroups);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
