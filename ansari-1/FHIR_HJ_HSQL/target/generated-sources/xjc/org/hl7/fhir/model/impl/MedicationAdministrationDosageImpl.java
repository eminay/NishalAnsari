//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.MedicationAdministrationDosage;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.Ratio;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationAdministration.Dosage", propOrder = {
    "timingPeriod",
    "timingDateTime",
    "asNeededCodeableConcept",
    "asNeededBoolean",
    "site",
    "route",
    "method",
    "quantity",
    "rate",
    "maxDosePerPeriod"
})
public class MedicationAdministrationDosageImpl
    extends BackboneElementImpl
    implements Serializable, MedicationAdministrationDosage, Equals, HashCode
{

    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl timingPeriod;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl timingDateTime;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl asNeededCodeableConcept;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl asNeededBoolean;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl site;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl route;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl method;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl quantity;
    @XmlElement(type = RatioImpl.class)
    protected RatioImpl rate;
    @XmlElement(type = RatioImpl.class)
    protected RatioImpl maxDosePerPeriod;

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TIMINGPERIOD_MEDICATIONADMIN_0")
    public Period getTimingPeriod() {
        return timingPeriod;
    }

    public void setTimingPeriod(Period value) {
        this.timingPeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TIMINGDATETIME_MEDICATIONADM_0")
    public DateTime getTimingDateTime() {
        return timingDateTime;
    }

    public void setTimingDateTime(DateTime value) {
        this.timingDateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASNEEDEDCODEABLECONCEPT_MEDI_1")
    public CodeableConcept getAsNeededCodeableConcept() {
        return asNeededCodeableConcept;
    }

    public void setAsNeededCodeableConcept(CodeableConcept value) {
        this.asNeededCodeableConcept = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASNEEDEDBOOLEAN_MEDICATIONAD_0")
    public Boolean getAsNeededBoolean() {
        return asNeededBoolean;
    }

    public void setAsNeededBoolean(Boolean value) {
        this.asNeededBoolean = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SITE_MEDICATIONADMINISTRATIO_0")
    public CodeableConcept getSite() {
        return site;
    }

    public void setSite(CodeableConcept value) {
        this.site = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROUTE_MEDICATIONADMINISTRATI_0")
    public CodeableConcept getRoute() {
        return route;
    }

    public void setRoute(CodeableConcept value) {
        this.route = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "METHOD__MEDICATIONADMINISTRA_0")
    public CodeableConcept getMethod() {
        return method;
    }

    public void setMethod(CodeableConcept value) {
        this.method = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_MEDICATIONADMINISTR_0")
    public Quantity getQuantity() {
        return quantity;
    }

    public void setQuantity(Quantity value) {
        this.quantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = Ratio.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RATE_MEDICATIONADMINISTRATIO_0")
    public Ratio getRate() {
        return rate;
    }

    public void setRate(Ratio value) {
        this.rate = ((RatioImpl) value);
    }

    @ManyToOne(targetEntity = Ratio.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MAXDOSEPERPERIOD_MEDICATIONA_0")
    public Ratio getMaxDosePerPeriod() {
        return maxDosePerPeriod;
    }

    public void setMaxDosePerPeriod(Ratio value) {
        this.maxDosePerPeriod = ((RatioImpl) value);
    }

    public MedicationAdministrationDosageImpl withTimingPeriod(Period value) {
        setTimingPeriod(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withTimingDateTime(DateTime value) {
        setTimingDateTime(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withAsNeededCodeableConcept(CodeableConcept value) {
        setAsNeededCodeableConcept(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withAsNeededBoolean(Boolean value) {
        setAsNeededBoolean(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withSite(CodeableConcept value) {
        setSite(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withRoute(CodeableConcept value) {
        setRoute(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withMethod(CodeableConcept value) {
        setMethod(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withQuantity(Quantity value) {
        setQuantity(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withRate(Ratio value) {
        setRate(value);
        return this;
    }

    public MedicationAdministrationDosageImpl withMaxDosePerPeriod(Ratio value) {
        setMaxDosePerPeriod(value);
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationAdministrationDosageImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationAdministrationDosageImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationAdministrationDosageImpl that = ((MedicationAdministrationDosageImpl) object);
        {
            Period lhsTimingPeriod;
            lhsTimingPeriod = this.getTimingPeriod();
            Period rhsTimingPeriod;
            rhsTimingPeriod = that.getTimingPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timingPeriod", lhsTimingPeriod), LocatorUtils.property(thatLocator, "timingPeriod", rhsTimingPeriod), lhsTimingPeriod, rhsTimingPeriod)) {
                return false;
            }
        }
        {
            DateTime lhsTimingDateTime;
            lhsTimingDateTime = this.getTimingDateTime();
            DateTime rhsTimingDateTime;
            rhsTimingDateTime = that.getTimingDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timingDateTime", lhsTimingDateTime), LocatorUtils.property(thatLocator, "timingDateTime", rhsTimingDateTime), lhsTimingDateTime, rhsTimingDateTime)) {
                return false;
            }
        }
        {
            CodeableConcept lhsAsNeededCodeableConcept;
            lhsAsNeededCodeableConcept = this.getAsNeededCodeableConcept();
            CodeableConcept rhsAsNeededCodeableConcept;
            rhsAsNeededCodeableConcept = that.getAsNeededCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asNeededCodeableConcept", lhsAsNeededCodeableConcept), LocatorUtils.property(thatLocator, "asNeededCodeableConcept", rhsAsNeededCodeableConcept), lhsAsNeededCodeableConcept, rhsAsNeededCodeableConcept)) {
                return false;
            }
        }
        {
            Boolean lhsAsNeededBoolean;
            lhsAsNeededBoolean = this.getAsNeededBoolean();
            Boolean rhsAsNeededBoolean;
            rhsAsNeededBoolean = that.getAsNeededBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asNeededBoolean", lhsAsNeededBoolean), LocatorUtils.property(thatLocator, "asNeededBoolean", rhsAsNeededBoolean), lhsAsNeededBoolean, rhsAsNeededBoolean)) {
                return false;
            }
        }
        {
            CodeableConcept lhsSite;
            lhsSite = this.getSite();
            CodeableConcept rhsSite;
            rhsSite = that.getSite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "site", lhsSite), LocatorUtils.property(thatLocator, "site", rhsSite), lhsSite, rhsSite)) {
                return false;
            }
        }
        {
            CodeableConcept lhsRoute;
            lhsRoute = this.getRoute();
            CodeableConcept rhsRoute;
            rhsRoute = that.getRoute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "route", lhsRoute), LocatorUtils.property(thatLocator, "route", rhsRoute), lhsRoute, rhsRoute)) {
                return false;
            }
        }
        {
            CodeableConcept lhsMethod;
            lhsMethod = this.getMethod();
            CodeableConcept rhsMethod;
            rhsMethod = that.getMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "method", lhsMethod), LocatorUtils.property(thatLocator, "method", rhsMethod), lhsMethod, rhsMethod)) {
                return false;
            }
        }
        {
            Quantity lhsQuantity;
            lhsQuantity = this.getQuantity();
            Quantity rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            Ratio lhsRate;
            lhsRate = this.getRate();
            Ratio rhsRate;
            rhsRate = that.getRate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rate", lhsRate), LocatorUtils.property(thatLocator, "rate", rhsRate), lhsRate, rhsRate)) {
                return false;
            }
        }
        {
            Ratio lhsMaxDosePerPeriod;
            lhsMaxDosePerPeriod = this.getMaxDosePerPeriod();
            Ratio rhsMaxDosePerPeriod;
            rhsMaxDosePerPeriod = that.getMaxDosePerPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxDosePerPeriod", lhsMaxDosePerPeriod), LocatorUtils.property(thatLocator, "maxDosePerPeriod", rhsMaxDosePerPeriod), lhsMaxDosePerPeriod, rhsMaxDosePerPeriod)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Period theTimingPeriod;
            theTimingPeriod = this.getTimingPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timingPeriod", theTimingPeriod), currentHashCode, theTimingPeriod);
        }
        {
            DateTime theTimingDateTime;
            theTimingDateTime = this.getTimingDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timingDateTime", theTimingDateTime), currentHashCode, theTimingDateTime);
        }
        {
            CodeableConcept theAsNeededCodeableConcept;
            theAsNeededCodeableConcept = this.getAsNeededCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asNeededCodeableConcept", theAsNeededCodeableConcept), currentHashCode, theAsNeededCodeableConcept);
        }
        {
            Boolean theAsNeededBoolean;
            theAsNeededBoolean = this.getAsNeededBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asNeededBoolean", theAsNeededBoolean), currentHashCode, theAsNeededBoolean);
        }
        {
            CodeableConcept theSite;
            theSite = this.getSite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "site", theSite), currentHashCode, theSite);
        }
        {
            CodeableConcept theRoute;
            theRoute = this.getRoute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "route", theRoute), currentHashCode, theRoute);
        }
        {
            CodeableConcept theMethod;
            theMethod = this.getMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "method", theMethod), currentHashCode, theMethod);
        }
        {
            Quantity theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            Ratio theRate;
            theRate = this.getRate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rate", theRate), currentHashCode, theRate);
        }
        {
            Ratio theMaxDosePerPeriod;
            theMaxDosePerPeriod = this.getMaxDosePerPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxDosePerPeriod", theMaxDosePerPeriod), currentHashCode, theMaxDosePerPeriod);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
