//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.HierarchicalRelationshipType;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SpecimenSource;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Specimen.Source", propOrder = {
    "relationship",
    "targets"
})
public class SpecimenSourceImpl
    extends BackboneElementImpl
    implements Serializable, SpecimenSource, Equals, HashCode
{

    @XmlElement(required = true, type = HierarchicalRelationshipTypeImpl.class)
    protected HierarchicalRelationshipTypeImpl relationship;
    @XmlElement(name = "target", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> targets;

    @ManyToOne(targetEntity = HierarchicalRelationshipType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATIONSHIP_SPECIMENSOURCE__0")
    public HierarchicalRelationshipType getRelationship() {
        return relationship;
    }

    public void setRelationship(HierarchicalRelationshipType value) {
        this.relationship = ((HierarchicalRelationshipTypeImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TARGETS_SPECIMENSOURCE_HJID")
    public List<ResourceReference> getTargets() {
        if (targets == null) {
            targets = new ArrayList<ResourceReference>();
        }
        return this.targets;
    }

    public void setTargets(List<ResourceReference> targets) {
        this.targets = targets;
    }

    public SpecimenSourceImpl withRelationship(HierarchicalRelationshipType value) {
        setRelationship(value);
        return this;
    }

    public SpecimenSourceImpl withTargets(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getTargets().add(value);
            }
        }
        return this;
    }

    public SpecimenSourceImpl withTargets(Collection<ResourceReference> values) {
        if (values!= null) {
            getTargets().addAll(values);
        }
        return this;
    }

    public SpecimenSourceImpl withTargets(List<ResourceReference> targets) {
        setTargets(targets);
        return this;
    }

    @Override
    public SpecimenSourceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenSourceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenSourceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SpecimenSourceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenSourceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenSourceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SpecimenSourceImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecimenSourceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SpecimenSourceImpl that = ((SpecimenSourceImpl) object);
        {
            HierarchicalRelationshipType lhsRelationship;
            lhsRelationship = this.getRelationship();
            HierarchicalRelationshipType rhsRelationship;
            rhsRelationship = that.getRelationship();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relationship", lhsRelationship), LocatorUtils.property(thatLocator, "relationship", rhsRelationship), lhsRelationship, rhsRelationship)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsTargets;
            lhsTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            List<ResourceReference> rhsTargets;
            rhsTargets = (((that.targets!= null)&&(!that.targets.isEmpty()))?that.getTargets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "targets", lhsTargets), LocatorUtils.property(thatLocator, "targets", rhsTargets), lhsTargets, rhsTargets)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            HierarchicalRelationshipType theRelationship;
            theRelationship = this.getRelationship();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relationship", theRelationship), currentHashCode, theRelationship);
        }
        {
            List<ResourceReference> theTargets;
            theTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targets", theTargets), currentHashCode, theTargets);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
