//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Order;
import org.hl7.fhir.model.OrderWhen;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Order", propOrder = {
    "identifiers",
    "date",
    "subject",
    "source",
    "target",
    "reasonResource",
    "reasonCodeableConcept",
    "authority",
    "when",
    "details"
})
@XmlRootElement(name = "Order")
public class OrderImpl
    extends ResourceImpl
    implements Serializable, Order, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl source;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl target;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl reasonResource;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reasonCodeableConcept;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl authority;
    @XmlElement(type = OrderWhenImpl.class)
    protected OrderWhenImpl when;
    @XmlElement(name = "detail", required = true, type = ResourceReferenceImpl.class)
    protected List<ResourceReference> details;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_ORDER__HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__ORDER__HJID")
    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ORDER__HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCE__ORDER__HJID")
    public ResourceReference getSource() {
        return source;
    }

    public void setSource(ResourceReference value) {
        this.source = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TARGET_ORDER__HJID")
    public ResourceReference getTarget() {
        return target;
    }

    public void setTarget(ResourceReference value) {
        this.target = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONRESOURCE_ORDER__HJID")
    public ResourceReference getReasonResource() {
        return reasonResource;
    }

    public void setReasonResource(ResourceReference value) {
        this.reasonResource = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONCODEABLECONCEPT_ORDER__0")
    public CodeableConcept getReasonCodeableConcept() {
        return reasonCodeableConcept;
    }

    public void setReasonCodeableConcept(CodeableConcept value) {
        this.reasonCodeableConcept = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHORITY_ORDER__HJID")
    public ResourceReference getAuthority() {
        return authority;
    }

    public void setAuthority(ResourceReference value) {
        this.authority = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = OrderWhen.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHEN__ORDER__HJID")
    public OrderWhen getWhen() {
        return when;
    }

    public void setWhen(OrderWhen value) {
        this.when = ((OrderWhenImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DETAILS_ORDER__HJID")
    public List<ResourceReference> getDetails() {
        if (details == null) {
            details = new ArrayList<ResourceReference>();
        }
        return this.details;
    }

    public void setDetails(List<ResourceReference> details) {
        this.details = details;
    }

    public OrderImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public OrderImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public OrderImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public OrderImpl withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public OrderImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public OrderImpl withSource(ResourceReference value) {
        setSource(value);
        return this;
    }

    public OrderImpl withTarget(ResourceReference value) {
        setTarget(value);
        return this;
    }

    public OrderImpl withReasonResource(ResourceReference value) {
        setReasonResource(value);
        return this;
    }

    public OrderImpl withReasonCodeableConcept(CodeableConcept value) {
        setReasonCodeableConcept(value);
        return this;
    }

    public OrderImpl withAuthority(ResourceReference value) {
        setAuthority(value);
        return this;
    }

    public OrderImpl withWhen(OrderWhen value) {
        setWhen(value);
        return this;
    }

    public OrderImpl withDetails(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getDetails().add(value);
            }
        }
        return this;
    }

    public OrderImpl withDetails(Collection<ResourceReference> values) {
        if (values!= null) {
            getDetails().addAll(values);
        }
        return this;
    }

    public OrderImpl withDetails(List<ResourceReference> details) {
        setDetails(details);
        return this;
    }

    @Override
    public OrderImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public OrderImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public OrderImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public OrderImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public OrderImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public OrderImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public OrderImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public OrderImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public OrderImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public OrderImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public OrderImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public OrderImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OrderImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final OrderImpl that = ((OrderImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsSource;
            lhsSource = this.getSource();
            ResourceReference rhsSource;
            rhsSource = that.getSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "source", lhsSource), LocatorUtils.property(thatLocator, "source", rhsSource), lhsSource, rhsSource)) {
                return false;
            }
        }
        {
            ResourceReference lhsTarget;
            lhsTarget = this.getTarget();
            ResourceReference rhsTarget;
            rhsTarget = that.getTarget();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "target", lhsTarget), LocatorUtils.property(thatLocator, "target", rhsTarget), lhsTarget, rhsTarget)) {
                return false;
            }
        }
        {
            ResourceReference lhsReasonResource;
            lhsReasonResource = this.getReasonResource();
            ResourceReference rhsReasonResource;
            rhsReasonResource = that.getReasonResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonResource", lhsReasonResource), LocatorUtils.property(thatLocator, "reasonResource", rhsReasonResource), lhsReasonResource, rhsReasonResource)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReasonCodeableConcept;
            lhsReasonCodeableConcept = this.getReasonCodeableConcept();
            CodeableConcept rhsReasonCodeableConcept;
            rhsReasonCodeableConcept = that.getReasonCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonCodeableConcept", lhsReasonCodeableConcept), LocatorUtils.property(thatLocator, "reasonCodeableConcept", rhsReasonCodeableConcept), lhsReasonCodeableConcept, rhsReasonCodeableConcept)) {
                return false;
            }
        }
        {
            ResourceReference lhsAuthority;
            lhsAuthority = this.getAuthority();
            ResourceReference rhsAuthority;
            rhsAuthority = that.getAuthority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authority", lhsAuthority), LocatorUtils.property(thatLocator, "authority", rhsAuthority), lhsAuthority, rhsAuthority)) {
                return false;
            }
        }
        {
            OrderWhen lhsWhen;
            lhsWhen = this.getWhen();
            OrderWhen rhsWhen;
            rhsWhen = that.getWhen();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "when", lhsWhen), LocatorUtils.property(thatLocator, "when", rhsWhen), lhsWhen, rhsWhen)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsDetails;
            lhsDetails = (((this.details!= null)&&(!this.details.isEmpty()))?this.getDetails():null);
            List<ResourceReference> rhsDetails;
            rhsDetails = (((that.details!= null)&&(!that.details.isEmpty()))?that.getDetails():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "details", lhsDetails), LocatorUtils.property(thatLocator, "details", rhsDetails), lhsDetails, rhsDetails)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theSource;
            theSource = this.getSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "source", theSource), currentHashCode, theSource);
        }
        {
            ResourceReference theTarget;
            theTarget = this.getTarget();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "target", theTarget), currentHashCode, theTarget);
        }
        {
            ResourceReference theReasonResource;
            theReasonResource = this.getReasonResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonResource", theReasonResource), currentHashCode, theReasonResource);
        }
        {
            CodeableConcept theReasonCodeableConcept;
            theReasonCodeableConcept = this.getReasonCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonCodeableConcept", theReasonCodeableConcept), currentHashCode, theReasonCodeableConcept);
        }
        {
            ResourceReference theAuthority;
            theAuthority = this.getAuthority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authority", theAuthority), currentHashCode, theAuthority);
        }
        {
            OrderWhen theWhen;
            theWhen = this.getWhen();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "when", theWhen), currentHashCode, theWhen);
        }
        {
            List<ResourceReference> theDetails;
            theDetails = (((this.details!= null)&&(!this.details.isEmpty()))?this.getDetails():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "details", theDetails), currentHashCode, theDetails);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
