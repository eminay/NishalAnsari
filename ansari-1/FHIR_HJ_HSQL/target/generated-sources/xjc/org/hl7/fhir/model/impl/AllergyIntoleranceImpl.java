//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.AllergyIntolerance;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Criticality;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SensitivityStatus;
import org.hl7.fhir.model.SensitivityType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AllergyIntolerance", propOrder = {
    "identifiers",
    "criticality",
    "sensitivityType",
    "recordedDate",
    "status",
    "subject",
    "recorder",
    "substance",
    "reactions",
    "sensitivityTests"
})
@XmlRootElement(name = "AllergyIntolerance")
public class AllergyIntoleranceImpl
    extends ResourceImpl
    implements Serializable, AllergyIntolerance, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = CriticalityImpl.class)
    protected CriticalityImpl criticality;
    @XmlElement(required = true, type = SensitivityTypeImpl.class)
    protected SensitivityTypeImpl sensitivityType;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl recordedDate;
    @XmlElement(required = true, type = SensitivityStatusImpl.class)
    protected SensitivityStatusImpl status;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl recorder;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl substance;
    @XmlElement(name = "reaction", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> reactions;
    @XmlElement(name = "sensitivityTest", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> sensitivityTests;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_ALLERGYINTOLERAN_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = Criticality.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CRITICALITY_ALLERGYINTOLERAN_0")
    public Criticality getCriticality() {
        return criticality;
    }

    public void setCriticality(Criticality value) {
        this.criticality = ((CriticalityImpl) value);
    }

    @ManyToOne(targetEntity = SensitivityType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SENSITIVITYTYPE_ALLERGYINTOL_0")
    public SensitivityType getSensitivityType() {
        return sensitivityType;
    }

    public void setSensitivityType(SensitivityType value) {
        this.sensitivityType = ((SensitivityTypeImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDEDDATE_ALLERGYINTOLERA_0")
    public DateTime getRecordedDate() {
        return recordedDate;
    }

    public void setRecordedDate(DateTime value) {
        this.recordedDate = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = SensitivityStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_ALLERGYINTOLERANCE_HJ_0")
    public SensitivityStatus getStatus() {
        return status;
    }

    public void setStatus(SensitivityStatus value) {
        this.status = ((SensitivityStatusImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ALLERGYINTOLERANCE_H_0")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDER_ALLERGYINTOLERANCE__0")
    public ResourceReference getRecorder() {
        return recorder;
    }

    public void setRecorder(ResourceReference value) {
        this.recorder = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTANCE_ALLERGYINTOLERANCE_0")
    public ResourceReference getSubstance() {
        return substance;
    }

    public void setSubstance(ResourceReference value) {
        this.substance = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REACTIONS_ALLERGYINTOLERANCE_0")
    public List<ResourceReference> getReactions() {
        if (reactions == null) {
            reactions = new ArrayList<ResourceReference>();
        }
        return this.reactions;
    }

    public void setReactions(List<ResourceReference> reactions) {
        this.reactions = reactions;
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SENSITIVITYTESTS_ALLERGYINTO_0")
    public List<ResourceReference> getSensitivityTests() {
        if (sensitivityTests == null) {
            sensitivityTests = new ArrayList<ResourceReference>();
        }
        return this.sensitivityTests;
    }

    public void setSensitivityTests(List<ResourceReference> sensitivityTests) {
        this.sensitivityTests = sensitivityTests;
    }

    public AllergyIntoleranceImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public AllergyIntoleranceImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public AllergyIntoleranceImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public AllergyIntoleranceImpl withCriticality(Criticality value) {
        setCriticality(value);
        return this;
    }

    public AllergyIntoleranceImpl withSensitivityType(SensitivityType value) {
        setSensitivityType(value);
        return this;
    }

    public AllergyIntoleranceImpl withRecordedDate(DateTime value) {
        setRecordedDate(value);
        return this;
    }

    public AllergyIntoleranceImpl withStatus(SensitivityStatus value) {
        setStatus(value);
        return this;
    }

    public AllergyIntoleranceImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public AllergyIntoleranceImpl withRecorder(ResourceReference value) {
        setRecorder(value);
        return this;
    }

    public AllergyIntoleranceImpl withSubstance(ResourceReference value) {
        setSubstance(value);
        return this;
    }

    public AllergyIntoleranceImpl withReactions(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getReactions().add(value);
            }
        }
        return this;
    }

    public AllergyIntoleranceImpl withReactions(Collection<ResourceReference> values) {
        if (values!= null) {
            getReactions().addAll(values);
        }
        return this;
    }

    public AllergyIntoleranceImpl withReactions(List<ResourceReference> reactions) {
        setReactions(reactions);
        return this;
    }

    public AllergyIntoleranceImpl withSensitivityTests(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSensitivityTests().add(value);
            }
        }
        return this;
    }

    public AllergyIntoleranceImpl withSensitivityTests(Collection<ResourceReference> values) {
        if (values!= null) {
            getSensitivityTests().addAll(values);
        }
        return this;
    }

    public AllergyIntoleranceImpl withSensitivityTests(List<ResourceReference> sensitivityTests) {
        setSensitivityTests(sensitivityTests);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public AllergyIntoleranceImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AllergyIntoleranceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AllergyIntoleranceImpl that = ((AllergyIntoleranceImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            Criticality lhsCriticality;
            lhsCriticality = this.getCriticality();
            Criticality rhsCriticality;
            rhsCriticality = that.getCriticality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "criticality", lhsCriticality), LocatorUtils.property(thatLocator, "criticality", rhsCriticality), lhsCriticality, rhsCriticality)) {
                return false;
            }
        }
        {
            SensitivityType lhsSensitivityType;
            lhsSensitivityType = this.getSensitivityType();
            SensitivityType rhsSensitivityType;
            rhsSensitivityType = that.getSensitivityType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sensitivityType", lhsSensitivityType), LocatorUtils.property(thatLocator, "sensitivityType", rhsSensitivityType), lhsSensitivityType, rhsSensitivityType)) {
                return false;
            }
        }
        {
            DateTime lhsRecordedDate;
            lhsRecordedDate = this.getRecordedDate();
            DateTime rhsRecordedDate;
            rhsRecordedDate = that.getRecordedDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recordedDate", lhsRecordedDate), LocatorUtils.property(thatLocator, "recordedDate", rhsRecordedDate), lhsRecordedDate, rhsRecordedDate)) {
                return false;
            }
        }
        {
            SensitivityStatus lhsStatus;
            lhsStatus = this.getStatus();
            SensitivityStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsRecorder;
            lhsRecorder = this.getRecorder();
            ResourceReference rhsRecorder;
            rhsRecorder = that.getRecorder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recorder", lhsRecorder), LocatorUtils.property(thatLocator, "recorder", rhsRecorder), lhsRecorder, rhsRecorder)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubstance;
            lhsSubstance = this.getSubstance();
            ResourceReference rhsSubstance;
            rhsSubstance = that.getSubstance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substance", lhsSubstance), LocatorUtils.property(thatLocator, "substance", rhsSubstance), lhsSubstance, rhsSubstance)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsReactions;
            lhsReactions = (((this.reactions!= null)&&(!this.reactions.isEmpty()))?this.getReactions():null);
            List<ResourceReference> rhsReactions;
            rhsReactions = (((that.reactions!= null)&&(!that.reactions.isEmpty()))?that.getReactions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reactions", lhsReactions), LocatorUtils.property(thatLocator, "reactions", rhsReactions), lhsReactions, rhsReactions)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSensitivityTests;
            lhsSensitivityTests = (((this.sensitivityTests!= null)&&(!this.sensitivityTests.isEmpty()))?this.getSensitivityTests():null);
            List<ResourceReference> rhsSensitivityTests;
            rhsSensitivityTests = (((that.sensitivityTests!= null)&&(!that.sensitivityTests.isEmpty()))?that.getSensitivityTests():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sensitivityTests", lhsSensitivityTests), LocatorUtils.property(thatLocator, "sensitivityTests", rhsSensitivityTests), lhsSensitivityTests, rhsSensitivityTests)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            Criticality theCriticality;
            theCriticality = this.getCriticality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "criticality", theCriticality), currentHashCode, theCriticality);
        }
        {
            SensitivityType theSensitivityType;
            theSensitivityType = this.getSensitivityType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sensitivityType", theSensitivityType), currentHashCode, theSensitivityType);
        }
        {
            DateTime theRecordedDate;
            theRecordedDate = this.getRecordedDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recordedDate", theRecordedDate), currentHashCode, theRecordedDate);
        }
        {
            SensitivityStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theRecorder;
            theRecorder = this.getRecorder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recorder", theRecorder), currentHashCode, theRecorder);
        }
        {
            ResourceReference theSubstance;
            theSubstance = this.getSubstance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substance", theSubstance), currentHashCode, theSubstance);
        }
        {
            List<ResourceReference> theReactions;
            theReactions = (((this.reactions!= null)&&(!this.reactions.isEmpty()))?this.getReactions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reactions", theReactions), currentHashCode, theReactions);
        }
        {
            List<ResourceReference> theSensitivityTests;
            theSensitivityTests = (((this.sensitivityTests!= null)&&(!this.sensitivityTests.isEmpty()))?this.getSensitivityTests():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sensitivityTests", theSensitivityTests), currentHashCode, theSensitivityTests);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
