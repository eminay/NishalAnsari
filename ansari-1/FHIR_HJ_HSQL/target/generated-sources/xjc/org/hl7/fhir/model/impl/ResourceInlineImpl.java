//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.AdverseReaction;
import org.hl7.fhir.model.Alert;
import org.hl7.fhir.model.AllergyIntolerance;
import org.hl7.fhir.model.Binary;
import org.hl7.fhir.model.CarePlan;
import org.hl7.fhir.model.Composition;
import org.hl7.fhir.model.ConceptMap;
import org.hl7.fhir.model.Condition;
import org.hl7.fhir.model.Conformance;
import org.hl7.fhir.model.Device;
import org.hl7.fhir.model.DeviceObservationReport;
import org.hl7.fhir.model.DiagnosticOrder;
import org.hl7.fhir.model.DiagnosticReport;
import org.hl7.fhir.model.DocumentManifest;
import org.hl7.fhir.model.DocumentReference;
import org.hl7.fhir.model.Encounter;
import org.hl7.fhir.model.FamilyHistory;
import org.hl7.fhir.model.Group;
import org.hl7.fhir.model.ImagingStudy;
import org.hl7.fhir.model.Immunization;
import org.hl7.fhir.model.ImmunizationRecommendation;
import org.hl7.fhir.model.List;
import org.hl7.fhir.model.Location;
import org.hl7.fhir.model.Media;
import org.hl7.fhir.model.Medication;
import org.hl7.fhir.model.MedicationAdministration;
import org.hl7.fhir.model.MedicationDispense;
import org.hl7.fhir.model.MedicationPrescription;
import org.hl7.fhir.model.MedicationStatement;
import org.hl7.fhir.model.MessageHeader;
import org.hl7.fhir.model.Observation;
import org.hl7.fhir.model.OperationOutcome;
import org.hl7.fhir.model.Order;
import org.hl7.fhir.model.OrderResponse;
import org.hl7.fhir.model.Organization;
import org.hl7.fhir.model.Other;
import org.hl7.fhir.model.Patient;
import org.hl7.fhir.model.Practitioner;
import org.hl7.fhir.model.Procedure;
import org.hl7.fhir.model.Profile;
import org.hl7.fhir.model.Provenance;
import org.hl7.fhir.model.Query;
import org.hl7.fhir.model.Questionnaire;
import org.hl7.fhir.model.RelatedPerson;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.SecurityEvent;
import org.hl7.fhir.model.Specimen;
import org.hl7.fhir.model.Substance;
import org.hl7.fhir.model.Supply;
import org.hl7.fhir.model.ValueSet;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Resource.Inline", propOrder = {
    "diagnosticOrder",
    "imagingStudy",
    "adverseReaction",
    "practitioner",
    "patient",
    "conceptMap",
    "alert",
    "orderResponse",
    "specimen",
    "relatedPerson",
    "immunization",
    "documentReference",
    "allergyIntolerance",
    "observation",
    "location",
    "profile",
    "other",
    "familyHistory",
    "media",
    "conformance",
    "operationOutcome",
    "deviceObservationReport",
    "composition",
    "questionnaire",
    "list",
    "medicationStatement",
    "securityEvent",
    "encounter",
    "medicationAdministration",
    "medicationPrescription",
    "medicationDispense",
    "documentManifest",
    "immunizationRecommendation",
    "messageHeader",
    "medication",
    "valueSet",
    "group",
    "diagnosticReport",
    "substance",
    "procedure",
    "organization",
    "order",
    "query",
    "device",
    "supply",
    "carePlan",
    "condition",
    "provenance",
    "binary"
})
public class ResourceInlineImpl
    implements Serializable, ResourceInline, Equals, HashCode
{

    @XmlElement(name = "DiagnosticOrder", type = DiagnosticOrderImpl.class)
    protected DiagnosticOrderImpl diagnosticOrder;
    @XmlElement(name = "ImagingStudy", type = ImagingStudyImpl.class)
    protected ImagingStudyImpl imagingStudy;
    @XmlElement(name = "AdverseReaction", type = AdverseReactionImpl.class)
    protected AdverseReactionImpl adverseReaction;
    @XmlElement(name = "Practitioner", type = PractitionerImpl.class)
    protected PractitionerImpl practitioner;
    @XmlElement(name = "Patient", type = PatientImpl.class)
    protected PatientImpl patient;
    @XmlElement(name = "ConceptMap", type = ConceptMapImpl.class)
    protected ConceptMapImpl conceptMap;
    @XmlElement(name = "Alert", type = AlertImpl.class)
    protected AlertImpl alert;
    @XmlElement(name = "OrderResponse", type = OrderResponseImpl.class)
    protected OrderResponseImpl orderResponse;
    @XmlElement(name = "Specimen", type = SpecimenImpl.class)
    protected SpecimenImpl specimen;
    @XmlElement(name = "RelatedPerson", type = RelatedPersonImpl.class)
    protected RelatedPersonImpl relatedPerson;
    @XmlElement(name = "Immunization", type = ImmunizationImpl.class)
    protected ImmunizationImpl immunization;
    @XmlElement(name = "DocumentReference", type = DocumentReferenceImpl.class)
    protected DocumentReferenceImpl documentReference;
    @XmlElement(name = "AllergyIntolerance", type = AllergyIntoleranceImpl.class)
    protected AllergyIntoleranceImpl allergyIntolerance;
    @XmlElement(name = "Observation", type = ObservationImpl.class)
    protected ObservationImpl observation;
    @XmlElement(name = "Location", type = LocationImpl.class)
    protected LocationImpl location;
    @XmlElement(name = "Profile", type = ProfileImpl.class)
    protected ProfileImpl profile;
    @XmlElement(name = "Other", type = OtherImpl.class)
    protected OtherImpl other;
    @XmlElement(name = "FamilyHistory", type = FamilyHistoryImpl.class)
    protected FamilyHistoryImpl familyHistory;
    @XmlElement(name = "Media", type = MediaImpl.class)
    protected MediaImpl media;
    @XmlElement(name = "Conformance", type = ConformanceImpl.class)
    protected ConformanceImpl conformance;
    @XmlElement(name = "OperationOutcome", type = OperationOutcomeImpl.class)
    protected OperationOutcomeImpl operationOutcome;
    @XmlElement(name = "DeviceObservationReport", type = DeviceObservationReportImpl.class)
    protected DeviceObservationReportImpl deviceObservationReport;
    @XmlElement(name = "Composition", type = CompositionImpl.class)
    protected CompositionImpl composition;
    @XmlElement(name = "Questionnaire", type = QuestionnaireImpl.class)
    protected QuestionnaireImpl questionnaire;
    @XmlElement(name = "List", type = ListImpl.class)
    protected ListImpl list;
    @XmlElement(name = "MedicationStatement", type = MedicationStatementImpl.class)
    protected MedicationStatementImpl medicationStatement;
    @XmlElement(name = "SecurityEvent", type = SecurityEventImpl.class)
    protected SecurityEventImpl securityEvent;
    @XmlElement(name = "Encounter", type = EncounterImpl.class)
    protected EncounterImpl encounter;
    @XmlElement(name = "MedicationAdministration", type = MedicationAdministrationImpl.class)
    protected MedicationAdministrationImpl medicationAdministration;
    @XmlElement(name = "MedicationPrescription", type = MedicationPrescriptionImpl.class)
    protected MedicationPrescriptionImpl medicationPrescription;
    @XmlElement(name = "MedicationDispense", type = MedicationDispenseImpl.class)
    protected MedicationDispenseImpl medicationDispense;
    @XmlElement(name = "DocumentManifest", type = DocumentManifestImpl.class)
    protected DocumentManifestImpl documentManifest;
    @XmlElement(name = "ImmunizationRecommendation", type = ImmunizationRecommendationImpl.class)
    protected ImmunizationRecommendationImpl immunizationRecommendation;
    @XmlElement(name = "MessageHeader", type = MessageHeaderImpl.class)
    protected MessageHeaderImpl messageHeader;
    @XmlElement(name = "Medication", type = MedicationImpl.class)
    protected MedicationImpl medication;
    @XmlElement(name = "ValueSet", type = ValueSetImpl.class)
    protected ValueSetImpl valueSet;
    @XmlElement(name = "Group", type = GroupImpl.class)
    protected GroupImpl group;
    @XmlElement(name = "DiagnosticReport", type = DiagnosticReportImpl.class)
    protected DiagnosticReportImpl diagnosticReport;
    @XmlElement(name = "Substance", type = SubstanceImpl.class)
    protected SubstanceImpl substance;
    @XmlElement(name = "Procedure", type = ProcedureImpl.class)
    protected ProcedureImpl procedure;
    @XmlElement(name = "Organization", type = OrganizationImpl.class)
    protected OrganizationImpl organization;
    @XmlElement(name = "Order", type = OrderImpl.class)
    protected OrderImpl order;
    @XmlElement(name = "Query", type = QueryImpl.class)
    protected QueryImpl query;
    @XmlElement(name = "Device", type = DeviceImpl.class)
    protected DeviceImpl device;
    @XmlElement(name = "Supply", type = SupplyImpl.class)
    protected SupplyImpl supply;
    @XmlElement(name = "CarePlan", type = CarePlanImpl.class)
    protected CarePlanImpl carePlan;
    @XmlElement(name = "Condition", type = ConditionImpl.class)
    protected ConditionImpl condition;
    @XmlElement(name = "Provenance", type = ProvenanceImpl.class)
    protected ProvenanceImpl provenance;
    @XmlElement(name = "Binary", type = BinaryImpl.class)
    protected BinaryImpl binary;
    @XmlAttribute(name = "Hjid")
    protected Long hjid;

    @ManyToOne(targetEntity = DiagnosticOrder.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICORDER_RESOURCEINLI_0")
    public DiagnosticOrder getDiagnosticOrder() {
        return diagnosticOrder;
    }

    public void setDiagnosticOrder(DiagnosticOrder value) {
        this.diagnosticOrder = ((DiagnosticOrderImpl) value);
    }

    @ManyToOne(targetEntity = ImagingStudy.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMAGINGSTUDY_RESOURCEINLINE__0")
    public ImagingStudy getImagingStudy() {
        return imagingStudy;
    }

    public void setImagingStudy(ImagingStudy value) {
        this.imagingStudy = ((ImagingStudyImpl) value);
    }

    @ManyToOne(targetEntity = AdverseReaction.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADVERSEREACTION_RESOURCEINLI_0")
    public AdverseReaction getAdverseReaction() {
        return adverseReaction;
    }

    public void setAdverseReaction(AdverseReaction value) {
        this.adverseReaction = ((AdverseReactionImpl) value);
    }

    @ManyToOne(targetEntity = Practitioner.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRACTITIONER_RESOURCEINLINE__0")
    public Practitioner getPractitioner() {
        return practitioner;
    }

    public void setPractitioner(Practitioner value) {
        this.practitioner = ((PractitionerImpl) value);
    }

    @ManyToOne(targetEntity = Patient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_RESOURCEINLINE_HJID")
    public Patient getPatient() {
        return patient;
    }

    public void setPatient(Patient value) {
        this.patient = ((PatientImpl) value);
    }

    @ManyToOne(targetEntity = ConceptMap.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCEPTMAP_RESOURCEINLINE_HJ_0")
    public ConceptMap getConceptMap() {
        return conceptMap;
    }

    public void setConceptMap(ConceptMap value) {
        this.conceptMap = ((ConceptMapImpl) value);
    }

    @ManyToOne(targetEntity = Alert.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ALERT_RESOURCEINLINE_HJID")
    public Alert getAlert() {
        return alert;
    }

    public void setAlert(Alert value) {
        this.alert = ((AlertImpl) value);
    }

    @ManyToOne(targetEntity = OrderResponse.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDERRESPONSE_RESOURCEINLINE_0")
    public OrderResponse getOrderResponse() {
        return orderResponse;
    }

    public void setOrderResponse(OrderResponse value) {
        this.orderResponse = ((OrderResponseImpl) value);
    }

    @ManyToOne(targetEntity = Specimen.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMEN_RESOURCEINLINE_HJID")
    public Specimen getSpecimen() {
        return specimen;
    }

    public void setSpecimen(Specimen value) {
        this.specimen = ((SpecimenImpl) value);
    }

    @ManyToOne(targetEntity = RelatedPerson.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATEDPERSON_RESOURCEINLINE_0")
    public RelatedPerson getRelatedPerson() {
        return relatedPerson;
    }

    public void setRelatedPerson(RelatedPerson value) {
        this.relatedPerson = ((RelatedPersonImpl) value);
    }

    @ManyToOne(targetEntity = Immunization.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMMUNIZATION_RESOURCEINLINE__0")
    public Immunization getImmunization() {
        return immunization;
    }

    public void setImmunization(Immunization value) {
        this.immunization = ((ImmunizationImpl) value);
    }

    @ManyToOne(targetEntity = DocumentReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTREFERENCE_RESOURCEIN_0")
    public DocumentReference getDocumentReference() {
        return documentReference;
    }

    public void setDocumentReference(DocumentReference value) {
        this.documentReference = ((DocumentReferenceImpl) value);
    }

    @ManyToOne(targetEntity = AllergyIntolerance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ALLERGYINTOLERANCE_RESOURCEI_0")
    public AllergyIntolerance getAllergyIntolerance() {
        return allergyIntolerance;
    }

    public void setAllergyIntolerance(AllergyIntolerance value) {
        this.allergyIntolerance = ((AllergyIntoleranceImpl) value);
    }

    @ManyToOne(targetEntity = Observation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OBSERVATION_RESOURCEINLINE_H_0")
    public Observation getObservation() {
        return observation;
    }

    public void setObservation(Observation value) {
        this.observation = ((ObservationImpl) value);
    }

    @ManyToOne(targetEntity = Location.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__RESOURCEINLINE_HJID")
    public Location getLocation() {
        return location;
    }

    public void setLocation(Location value) {
        this.location = ((LocationImpl) value);
    }

    @ManyToOne(targetEntity = Profile.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROFILE_RESOURCEINLINE_HJID")
    public Profile getProfile() {
        return profile;
    }

    public void setProfile(Profile value) {
        this.profile = ((ProfileImpl) value);
    }

    @ManyToOne(targetEntity = Other.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OTHER_RESOURCEINLINE_HJID")
    public Other getOther() {
        return other;
    }

    public void setOther(Other value) {
        this.other = ((OtherImpl) value);
    }

    @ManyToOne(targetEntity = FamilyHistory.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FAMILYHISTORY_RESOURCEINLINE_0")
    public FamilyHistory getFamilyHistory() {
        return familyHistory;
    }

    public void setFamilyHistory(FamilyHistory value) {
        this.familyHistory = ((FamilyHistoryImpl) value);
    }

    @ManyToOne(targetEntity = Media.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDIA_RESOURCEINLINE_HJID")
    public Media getMedia() {
        return media;
    }

    public void setMedia(Media value) {
        this.media = ((MediaImpl) value);
    }

    @ManyToOne(targetEntity = Conformance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONFORMANCE_RESOURCEINLINE_H_0")
    public Conformance getConformance() {
        return conformance;
    }

    public void setConformance(Conformance value) {
        this.conformance = ((ConformanceImpl) value);
    }

    @ManyToOne(targetEntity = OperationOutcome.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPERATIONOUTCOME_RESOURCEINL_0")
    public OperationOutcome getOperationOutcome() {
        return operationOutcome;
    }

    public void setOperationOutcome(OperationOutcome value) {
        this.operationOutcome = ((OperationOutcomeImpl) value);
    }

    @ManyToOne(targetEntity = DeviceObservationReport.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEVICEOBSERVATIONREPORT_RESO_0")
    public DeviceObservationReport getDeviceObservationReport() {
        return deviceObservationReport;
    }

    public void setDeviceObservationReport(DeviceObservationReport value) {
        this.deviceObservationReport = ((DeviceObservationReportImpl) value);
    }

    @ManyToOne(targetEntity = Composition.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMPOSITION_RESOURCEINLINE_H_0")
    public Composition getComposition() {
        return composition;
    }

    public void setComposition(Composition value) {
        this.composition = ((CompositionImpl) value);
    }

    @ManyToOne(targetEntity = Questionnaire.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUESTIONNAIRE_RESOURCEINLINE_0")
    public Questionnaire getQuestionnaire() {
        return questionnaire;
    }

    public void setQuestionnaire(Questionnaire value) {
        this.questionnaire = ((QuestionnaireImpl) value);
    }

    @ManyToOne(targetEntity = List.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LIST_RESOURCEINLINE_HJID")
    public List getList() {
        return list;
    }

    public void setList(List value) {
        this.list = ((ListImpl) value);
    }

    @ManyToOne(targetEntity = MedicationStatement.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATIONSTATEMENT_RESOURCE_0")
    public MedicationStatement getMedicationStatement() {
        return medicationStatement;
    }

    public void setMedicationStatement(MedicationStatement value) {
        this.medicationStatement = ((MedicationStatementImpl) value);
    }

    @ManyToOne(targetEntity = SecurityEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SECURITYEVENT_RESOURCEINLINE_0")
    public SecurityEvent getSecurityEvent() {
        return securityEvent;
    }

    public void setSecurityEvent(SecurityEvent value) {
        this.securityEvent = ((SecurityEventImpl) value);
    }

    @ManyToOne(targetEntity = Encounter.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_RESOURCEINLINE_HJID")
    public Encounter getEncounter() {
        return encounter;
    }

    public void setEncounter(Encounter value) {
        this.encounter = ((EncounterImpl) value);
    }

    @ManyToOne(targetEntity = MedicationAdministration.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATIONADMINISTRATION_RES_0")
    public MedicationAdministration getMedicationAdministration() {
        return medicationAdministration;
    }

    public void setMedicationAdministration(MedicationAdministration value) {
        this.medicationAdministration = ((MedicationAdministrationImpl) value);
    }

    @ManyToOne(targetEntity = MedicationPrescription.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATIONPRESCRIPTION_RESOU_0")
    public MedicationPrescription getMedicationPrescription() {
        return medicationPrescription;
    }

    public void setMedicationPrescription(MedicationPrescription value) {
        this.medicationPrescription = ((MedicationPrescriptionImpl) value);
    }

    @ManyToOne(targetEntity = MedicationDispense.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATIONDISPENSE_RESOURCEI_0")
    public MedicationDispense getMedicationDispense() {
        return medicationDispense;
    }

    public void setMedicationDispense(MedicationDispense value) {
        this.medicationDispense = ((MedicationDispenseImpl) value);
    }

    @ManyToOne(targetEntity = DocumentManifest.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTMANIFEST_RESOURCEINL_0")
    public DocumentManifest getDocumentManifest() {
        return documentManifest;
    }

    public void setDocumentManifest(DocumentManifest value) {
        this.documentManifest = ((DocumentManifestImpl) value);
    }

    @ManyToOne(targetEntity = ImmunizationRecommendation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMMUNIZATIONRECOMMENDATION_R_0")
    public ImmunizationRecommendation getImmunizationRecommendation() {
        return immunizationRecommendation;
    }

    public void setImmunizationRecommendation(ImmunizationRecommendation value) {
        this.immunizationRecommendation = ((ImmunizationRecommendationImpl) value);
    }

    @ManyToOne(targetEntity = MessageHeader.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MESSAGEHEADER_RESOURCEINLINE_0")
    public MessageHeader getMessageHeader() {
        return messageHeader;
    }

    public void setMessageHeader(MessageHeader value) {
        this.messageHeader = ((MessageHeaderImpl) value);
    }

    @ManyToOne(targetEntity = Medication.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_RESOURCEINLINE_HJ_0")
    public Medication getMedication() {
        return medication;
    }

    public void setMedication(Medication value) {
        this.medication = ((MedicationImpl) value);
    }

    @ManyToOne(targetEntity = ValueSet.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUESET_RESOURCEINLINE_HJID")
    public ValueSet getValueSet() {
        return valueSet;
    }

    public void setValueSet(ValueSet value) {
        this.valueSet = ((ValueSetImpl) value);
    }

    @ManyToOne(targetEntity = Group.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GROUP__RESOURCEINLINE_HJID")
    public Group getGroup() {
        return group;
    }

    public void setGroup(Group value) {
        this.group = ((GroupImpl) value);
    }

    @ManyToOne(targetEntity = DiagnosticReport.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICREPORT_RESOURCEINL_0")
    public DiagnosticReport getDiagnosticReport() {
        return diagnosticReport;
    }

    public void setDiagnosticReport(DiagnosticReport value) {
        this.diagnosticReport = ((DiagnosticReportImpl) value);
    }

    @ManyToOne(targetEntity = Substance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTANCE_RESOURCEINLINE_HJID")
    public Substance getSubstance() {
        return substance;
    }

    public void setSubstance(Substance value) {
        this.substance = ((SubstanceImpl) value);
    }

    @ManyToOne(targetEntity = Procedure.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROCEDURE__RESOURCEINLINE_HJ_0")
    public Procedure getProcedure() {
        return procedure;
    }

    public void setProcedure(Procedure value) {
        this.procedure = ((ProcedureImpl) value);
    }

    @ManyToOne(targetEntity = Organization.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORGANIZATION_RESOURCEINLINE__0")
    public Organization getOrganization() {
        return organization;
    }

    public void setOrganization(Organization value) {
        this.organization = ((OrganizationImpl) value);
    }

    @ManyToOne(targetEntity = Order.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDER__RESOURCEINLINE_HJID")
    public Order getOrder() {
        return order;
    }

    public void setOrder(Order value) {
        this.order = ((OrderImpl) value);
    }

    @ManyToOne(targetEntity = Query.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUERY_RESOURCEINLINE_HJID")
    public Query getQuery() {
        return query;
    }

    public void setQuery(Query value) {
        this.query = ((QueryImpl) value);
    }

    @ManyToOne(targetEntity = Device.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEVICE_RESOURCEINLINE_HJID")
    public Device getDevice() {
        return device;
    }

    public void setDevice(Device value) {
        this.device = ((DeviceImpl) value);
    }

    @ManyToOne(targetEntity = Supply.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPLY_RESOURCEINLINE_HJID")
    public Supply getSupply() {
        return supply;
    }

    public void setSupply(Supply value) {
        this.supply = ((SupplyImpl) value);
    }

    @ManyToOne(targetEntity = CarePlan.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CAREPLAN_RESOURCEINLINE_HJID")
    public CarePlan getCarePlan() {
        return carePlan;
    }

    public void setCarePlan(CarePlan value) {
        this.carePlan = ((CarePlanImpl) value);
    }

    @ManyToOne(targetEntity = Condition.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONDITION_RESOURCEINLINE_HJID")
    public Condition getCondition() {
        return condition;
    }

    public void setCondition(Condition value) {
        this.condition = ((ConditionImpl) value);
    }

    @ManyToOne(targetEntity = Provenance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROVENANCE_RESOURCEINLINE_HJ_0")
    public Provenance getProvenance() {
        return provenance;
    }

    public void setProvenance(Provenance value) {
        this.provenance = ((ProvenanceImpl) value);
    }

    @ManyToOne(targetEntity = Binary.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BINARY__RESOURCEINLINE_HJID")
    public Binary getBinary() {
        return binary;
    }

    public void setBinary(Binary value) {
        this.binary = ((BinaryImpl) value);
    }

    public ResourceInlineImpl withDiagnosticOrder(DiagnosticOrder value) {
        setDiagnosticOrder(value);
        return this;
    }

    public ResourceInlineImpl withImagingStudy(ImagingStudy value) {
        setImagingStudy(value);
        return this;
    }

    public ResourceInlineImpl withAdverseReaction(AdverseReaction value) {
        setAdverseReaction(value);
        return this;
    }

    public ResourceInlineImpl withPractitioner(Practitioner value) {
        setPractitioner(value);
        return this;
    }

    public ResourceInlineImpl withPatient(Patient value) {
        setPatient(value);
        return this;
    }

    public ResourceInlineImpl withConceptMap(ConceptMap value) {
        setConceptMap(value);
        return this;
    }

    public ResourceInlineImpl withAlert(Alert value) {
        setAlert(value);
        return this;
    }

    public ResourceInlineImpl withOrderResponse(OrderResponse value) {
        setOrderResponse(value);
        return this;
    }

    public ResourceInlineImpl withSpecimen(Specimen value) {
        setSpecimen(value);
        return this;
    }

    public ResourceInlineImpl withRelatedPerson(RelatedPerson value) {
        setRelatedPerson(value);
        return this;
    }

    public ResourceInlineImpl withImmunization(Immunization value) {
        setImmunization(value);
        return this;
    }

    public ResourceInlineImpl withDocumentReference(DocumentReference value) {
        setDocumentReference(value);
        return this;
    }

    public ResourceInlineImpl withAllergyIntolerance(AllergyIntolerance value) {
        setAllergyIntolerance(value);
        return this;
    }

    public ResourceInlineImpl withObservation(Observation value) {
        setObservation(value);
        return this;
    }

    public ResourceInlineImpl withLocation(Location value) {
        setLocation(value);
        return this;
    }

    public ResourceInlineImpl withProfile(Profile value) {
        setProfile(value);
        return this;
    }

    public ResourceInlineImpl withOther(Other value) {
        setOther(value);
        return this;
    }

    public ResourceInlineImpl withFamilyHistory(FamilyHistory value) {
        setFamilyHistory(value);
        return this;
    }

    public ResourceInlineImpl withMedia(Media value) {
        setMedia(value);
        return this;
    }

    public ResourceInlineImpl withConformance(Conformance value) {
        setConformance(value);
        return this;
    }

    public ResourceInlineImpl withOperationOutcome(OperationOutcome value) {
        setOperationOutcome(value);
        return this;
    }

    public ResourceInlineImpl withDeviceObservationReport(DeviceObservationReport value) {
        setDeviceObservationReport(value);
        return this;
    }

    public ResourceInlineImpl withComposition(Composition value) {
        setComposition(value);
        return this;
    }

    public ResourceInlineImpl withQuestionnaire(Questionnaire value) {
        setQuestionnaire(value);
        return this;
    }

    public ResourceInlineImpl withList(List value) {
        setList(value);
        return this;
    }

    public ResourceInlineImpl withMedicationStatement(MedicationStatement value) {
        setMedicationStatement(value);
        return this;
    }

    public ResourceInlineImpl withSecurityEvent(SecurityEvent value) {
        setSecurityEvent(value);
        return this;
    }

    public ResourceInlineImpl withEncounter(Encounter value) {
        setEncounter(value);
        return this;
    }

    public ResourceInlineImpl withMedicationAdministration(MedicationAdministration value) {
        setMedicationAdministration(value);
        return this;
    }

    public ResourceInlineImpl withMedicationPrescription(MedicationPrescription value) {
        setMedicationPrescription(value);
        return this;
    }

    public ResourceInlineImpl withMedicationDispense(MedicationDispense value) {
        setMedicationDispense(value);
        return this;
    }

    public ResourceInlineImpl withDocumentManifest(DocumentManifest value) {
        setDocumentManifest(value);
        return this;
    }

    public ResourceInlineImpl withImmunizationRecommendation(ImmunizationRecommendation value) {
        setImmunizationRecommendation(value);
        return this;
    }

    public ResourceInlineImpl withMessageHeader(MessageHeader value) {
        setMessageHeader(value);
        return this;
    }

    public ResourceInlineImpl withMedication(Medication value) {
        setMedication(value);
        return this;
    }

    public ResourceInlineImpl withValueSet(ValueSet value) {
        setValueSet(value);
        return this;
    }

    public ResourceInlineImpl withGroup(Group value) {
        setGroup(value);
        return this;
    }

    public ResourceInlineImpl withDiagnosticReport(DiagnosticReport value) {
        setDiagnosticReport(value);
        return this;
    }

    public ResourceInlineImpl withSubstance(Substance value) {
        setSubstance(value);
        return this;
    }

    public ResourceInlineImpl withProcedure(Procedure value) {
        setProcedure(value);
        return this;
    }

    public ResourceInlineImpl withOrganization(Organization value) {
        setOrganization(value);
        return this;
    }

    public ResourceInlineImpl withOrder(Order value) {
        setOrder(value);
        return this;
    }

    public ResourceInlineImpl withQuery(Query value) {
        setQuery(value);
        return this;
    }

    public ResourceInlineImpl withDevice(Device value) {
        setDevice(value);
        return this;
    }

    public ResourceInlineImpl withSupply(Supply value) {
        setSupply(value);
        return this;
    }

    public ResourceInlineImpl withCarePlan(CarePlan value) {
        setCarePlan(value);
        return this;
    }

    public ResourceInlineImpl withCondition(Condition value) {
        setCondition(value);
        return this;
    }

    public ResourceInlineImpl withProvenance(Provenance value) {
        setProvenance(value);
        return this;
    }

    public ResourceInlineImpl withBinary(Binary value) {
        setBinary(value);
        return this;
    }

    @Id
    @Column(name = "HJID")
    @GeneratedValue(strategy = GenerationType.AUTO)
    public Long getHjid() {
        return hjid;
    }

    public void setHjid(Long value) {
        this.hjid = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ResourceInlineImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ResourceInlineImpl that = ((ResourceInlineImpl) object);
        {
            DiagnosticOrder lhsDiagnosticOrder;
            lhsDiagnosticOrder = this.getDiagnosticOrder();
            DiagnosticOrder rhsDiagnosticOrder;
            rhsDiagnosticOrder = that.getDiagnosticOrder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticOrder", lhsDiagnosticOrder), LocatorUtils.property(thatLocator, "diagnosticOrder", rhsDiagnosticOrder), lhsDiagnosticOrder, rhsDiagnosticOrder)) {
                return false;
            }
        }
        {
            ImagingStudy lhsImagingStudy;
            lhsImagingStudy = this.getImagingStudy();
            ImagingStudy rhsImagingStudy;
            rhsImagingStudy = that.getImagingStudy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imagingStudy", lhsImagingStudy), LocatorUtils.property(thatLocator, "imagingStudy", rhsImagingStudy), lhsImagingStudy, rhsImagingStudy)) {
                return false;
            }
        }
        {
            AdverseReaction lhsAdverseReaction;
            lhsAdverseReaction = this.getAdverseReaction();
            AdverseReaction rhsAdverseReaction;
            rhsAdverseReaction = that.getAdverseReaction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "adverseReaction", lhsAdverseReaction), LocatorUtils.property(thatLocator, "adverseReaction", rhsAdverseReaction), lhsAdverseReaction, rhsAdverseReaction)) {
                return false;
            }
        }
        {
            Practitioner lhsPractitioner;
            lhsPractitioner = this.getPractitioner();
            Practitioner rhsPractitioner;
            rhsPractitioner = that.getPractitioner();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "practitioner", lhsPractitioner), LocatorUtils.property(thatLocator, "practitioner", rhsPractitioner), lhsPractitioner, rhsPractitioner)) {
                return false;
            }
        }
        {
            Patient lhsPatient;
            lhsPatient = this.getPatient();
            Patient rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ConceptMap lhsConceptMap;
            lhsConceptMap = this.getConceptMap();
            ConceptMap rhsConceptMap;
            rhsConceptMap = that.getConceptMap();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conceptMap", lhsConceptMap), LocatorUtils.property(thatLocator, "conceptMap", rhsConceptMap), lhsConceptMap, rhsConceptMap)) {
                return false;
            }
        }
        {
            Alert lhsAlert;
            lhsAlert = this.getAlert();
            Alert rhsAlert;
            rhsAlert = that.getAlert();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "alert", lhsAlert), LocatorUtils.property(thatLocator, "alert", rhsAlert), lhsAlert, rhsAlert)) {
                return false;
            }
        }
        {
            OrderResponse lhsOrderResponse;
            lhsOrderResponse = this.getOrderResponse();
            OrderResponse rhsOrderResponse;
            rhsOrderResponse = that.getOrderResponse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderResponse", lhsOrderResponse), LocatorUtils.property(thatLocator, "orderResponse", rhsOrderResponse), lhsOrderResponse, rhsOrderResponse)) {
                return false;
            }
        }
        {
            Specimen lhsSpecimen;
            lhsSpecimen = this.getSpecimen();
            Specimen rhsSpecimen;
            rhsSpecimen = that.getSpecimen();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimen", lhsSpecimen), LocatorUtils.property(thatLocator, "specimen", rhsSpecimen), lhsSpecimen, rhsSpecimen)) {
                return false;
            }
        }
        {
            RelatedPerson lhsRelatedPerson;
            lhsRelatedPerson = this.getRelatedPerson();
            RelatedPerson rhsRelatedPerson;
            rhsRelatedPerson = that.getRelatedPerson();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedPerson", lhsRelatedPerson), LocatorUtils.property(thatLocator, "relatedPerson", rhsRelatedPerson), lhsRelatedPerson, rhsRelatedPerson)) {
                return false;
            }
        }
        {
            Immunization lhsImmunization;
            lhsImmunization = this.getImmunization();
            Immunization rhsImmunization;
            rhsImmunization = that.getImmunization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "immunization", lhsImmunization), LocatorUtils.property(thatLocator, "immunization", rhsImmunization), lhsImmunization, rhsImmunization)) {
                return false;
            }
        }
        {
            DocumentReference lhsDocumentReference;
            lhsDocumentReference = this.getDocumentReference();
            DocumentReference rhsDocumentReference;
            rhsDocumentReference = that.getDocumentReference();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentReference", lhsDocumentReference), LocatorUtils.property(thatLocator, "documentReference", rhsDocumentReference), lhsDocumentReference, rhsDocumentReference)) {
                return false;
            }
        }
        {
            AllergyIntolerance lhsAllergyIntolerance;
            lhsAllergyIntolerance = this.getAllergyIntolerance();
            AllergyIntolerance rhsAllergyIntolerance;
            rhsAllergyIntolerance = that.getAllergyIntolerance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "allergyIntolerance", lhsAllergyIntolerance), LocatorUtils.property(thatLocator, "allergyIntolerance", rhsAllergyIntolerance), lhsAllergyIntolerance, rhsAllergyIntolerance)) {
                return false;
            }
        }
        {
            Observation lhsObservation;
            lhsObservation = this.getObservation();
            Observation rhsObservation;
            rhsObservation = that.getObservation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "observation", lhsObservation), LocatorUtils.property(thatLocator, "observation", rhsObservation), lhsObservation, rhsObservation)) {
                return false;
            }
        }
        {
            Location lhsLocation;
            lhsLocation = this.getLocation();
            Location rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            Profile lhsProfile;
            lhsProfile = this.getProfile();
            Profile rhsProfile;
            rhsProfile = that.getProfile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profile", lhsProfile), LocatorUtils.property(thatLocator, "profile", rhsProfile), lhsProfile, rhsProfile)) {
                return false;
            }
        }
        {
            Other lhsOther;
            lhsOther = this.getOther();
            Other rhsOther;
            rhsOther = that.getOther();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "other", lhsOther), LocatorUtils.property(thatLocator, "other", rhsOther), lhsOther, rhsOther)) {
                return false;
            }
        }
        {
            FamilyHistory lhsFamilyHistory;
            lhsFamilyHistory = this.getFamilyHistory();
            FamilyHistory rhsFamilyHistory;
            rhsFamilyHistory = that.getFamilyHistory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "familyHistory", lhsFamilyHistory), LocatorUtils.property(thatLocator, "familyHistory", rhsFamilyHistory), lhsFamilyHistory, rhsFamilyHistory)) {
                return false;
            }
        }
        {
            Media lhsMedia;
            lhsMedia = this.getMedia();
            Media rhsMedia;
            rhsMedia = that.getMedia();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "media", lhsMedia), LocatorUtils.property(thatLocator, "media", rhsMedia), lhsMedia, rhsMedia)) {
                return false;
            }
        }
        {
            Conformance lhsConformance;
            lhsConformance = this.getConformance();
            Conformance rhsConformance;
            rhsConformance = that.getConformance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conformance", lhsConformance), LocatorUtils.property(thatLocator, "conformance", rhsConformance), lhsConformance, rhsConformance)) {
                return false;
            }
        }
        {
            OperationOutcome lhsOperationOutcome;
            lhsOperationOutcome = this.getOperationOutcome();
            OperationOutcome rhsOperationOutcome;
            rhsOperationOutcome = that.getOperationOutcome();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operationOutcome", lhsOperationOutcome), LocatorUtils.property(thatLocator, "operationOutcome", rhsOperationOutcome), lhsOperationOutcome, rhsOperationOutcome)) {
                return false;
            }
        }
        {
            DeviceObservationReport lhsDeviceObservationReport;
            lhsDeviceObservationReport = this.getDeviceObservationReport();
            DeviceObservationReport rhsDeviceObservationReport;
            rhsDeviceObservationReport = that.getDeviceObservationReport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deviceObservationReport", lhsDeviceObservationReport), LocatorUtils.property(thatLocator, "deviceObservationReport", rhsDeviceObservationReport), lhsDeviceObservationReport, rhsDeviceObservationReport)) {
                return false;
            }
        }
        {
            Composition lhsComposition;
            lhsComposition = this.getComposition();
            Composition rhsComposition;
            rhsComposition = that.getComposition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "composition", lhsComposition), LocatorUtils.property(thatLocator, "composition", rhsComposition), lhsComposition, rhsComposition)) {
                return false;
            }
        }
        {
            Questionnaire lhsQuestionnaire;
            lhsQuestionnaire = this.getQuestionnaire();
            Questionnaire rhsQuestionnaire;
            rhsQuestionnaire = that.getQuestionnaire();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "questionnaire", lhsQuestionnaire), LocatorUtils.property(thatLocator, "questionnaire", rhsQuestionnaire), lhsQuestionnaire, rhsQuestionnaire)) {
                return false;
            }
        }
        {
            List lhsList;
            lhsList = this.getList();
            List rhsList;
            rhsList = that.getList();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "list", lhsList), LocatorUtils.property(thatLocator, "list", rhsList), lhsList, rhsList)) {
                return false;
            }
        }
        {
            MedicationStatement lhsMedicationStatement;
            lhsMedicationStatement = this.getMedicationStatement();
            MedicationStatement rhsMedicationStatement;
            rhsMedicationStatement = that.getMedicationStatement();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medicationStatement", lhsMedicationStatement), LocatorUtils.property(thatLocator, "medicationStatement", rhsMedicationStatement), lhsMedicationStatement, rhsMedicationStatement)) {
                return false;
            }
        }
        {
            SecurityEvent lhsSecurityEvent;
            lhsSecurityEvent = this.getSecurityEvent();
            SecurityEvent rhsSecurityEvent;
            rhsSecurityEvent = that.getSecurityEvent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "securityEvent", lhsSecurityEvent), LocatorUtils.property(thatLocator, "securityEvent", rhsSecurityEvent), lhsSecurityEvent, rhsSecurityEvent)) {
                return false;
            }
        }
        {
            Encounter lhsEncounter;
            lhsEncounter = this.getEncounter();
            Encounter rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            MedicationAdministration lhsMedicationAdministration;
            lhsMedicationAdministration = this.getMedicationAdministration();
            MedicationAdministration rhsMedicationAdministration;
            rhsMedicationAdministration = that.getMedicationAdministration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medicationAdministration", lhsMedicationAdministration), LocatorUtils.property(thatLocator, "medicationAdministration", rhsMedicationAdministration), lhsMedicationAdministration, rhsMedicationAdministration)) {
                return false;
            }
        }
        {
            MedicationPrescription lhsMedicationPrescription;
            lhsMedicationPrescription = this.getMedicationPrescription();
            MedicationPrescription rhsMedicationPrescription;
            rhsMedicationPrescription = that.getMedicationPrescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medicationPrescription", lhsMedicationPrescription), LocatorUtils.property(thatLocator, "medicationPrescription", rhsMedicationPrescription), lhsMedicationPrescription, rhsMedicationPrescription)) {
                return false;
            }
        }
        {
            MedicationDispense lhsMedicationDispense;
            lhsMedicationDispense = this.getMedicationDispense();
            MedicationDispense rhsMedicationDispense;
            rhsMedicationDispense = that.getMedicationDispense();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medicationDispense", lhsMedicationDispense), LocatorUtils.property(thatLocator, "medicationDispense", rhsMedicationDispense), lhsMedicationDispense, rhsMedicationDispense)) {
                return false;
            }
        }
        {
            DocumentManifest lhsDocumentManifest;
            lhsDocumentManifest = this.getDocumentManifest();
            DocumentManifest rhsDocumentManifest;
            rhsDocumentManifest = that.getDocumentManifest();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentManifest", lhsDocumentManifest), LocatorUtils.property(thatLocator, "documentManifest", rhsDocumentManifest), lhsDocumentManifest, rhsDocumentManifest)) {
                return false;
            }
        }
        {
            ImmunizationRecommendation lhsImmunizationRecommendation;
            lhsImmunizationRecommendation = this.getImmunizationRecommendation();
            ImmunizationRecommendation rhsImmunizationRecommendation;
            rhsImmunizationRecommendation = that.getImmunizationRecommendation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "immunizationRecommendation", lhsImmunizationRecommendation), LocatorUtils.property(thatLocator, "immunizationRecommendation", rhsImmunizationRecommendation), lhsImmunizationRecommendation, rhsImmunizationRecommendation)) {
                return false;
            }
        }
        {
            MessageHeader lhsMessageHeader;
            lhsMessageHeader = this.getMessageHeader();
            MessageHeader rhsMessageHeader;
            rhsMessageHeader = that.getMessageHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messageHeader", lhsMessageHeader), LocatorUtils.property(thatLocator, "messageHeader", rhsMessageHeader), lhsMessageHeader, rhsMessageHeader)) {
                return false;
            }
        }
        {
            Medication lhsMedication;
            lhsMedication = this.getMedication();
            Medication rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            ValueSet lhsValueSet;
            lhsValueSet = this.getValueSet();
            ValueSet rhsValueSet;
            rhsValueSet = that.getValueSet();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueSet", lhsValueSet), LocatorUtils.property(thatLocator, "valueSet", rhsValueSet), lhsValueSet, rhsValueSet)) {
                return false;
            }
        }
        {
            Group lhsGroup;
            lhsGroup = this.getGroup();
            Group rhsGroup;
            rhsGroup = that.getGroup();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "group", lhsGroup), LocatorUtils.property(thatLocator, "group", rhsGroup), lhsGroup, rhsGroup)) {
                return false;
            }
        }
        {
            DiagnosticReport lhsDiagnosticReport;
            lhsDiagnosticReport = this.getDiagnosticReport();
            DiagnosticReport rhsDiagnosticReport;
            rhsDiagnosticReport = that.getDiagnosticReport();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticReport", lhsDiagnosticReport), LocatorUtils.property(thatLocator, "diagnosticReport", rhsDiagnosticReport), lhsDiagnosticReport, rhsDiagnosticReport)) {
                return false;
            }
        }
        {
            Substance lhsSubstance;
            lhsSubstance = this.getSubstance();
            Substance rhsSubstance;
            rhsSubstance = that.getSubstance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substance", lhsSubstance), LocatorUtils.property(thatLocator, "substance", rhsSubstance), lhsSubstance, rhsSubstance)) {
                return false;
            }
        }
        {
            Procedure lhsProcedure;
            lhsProcedure = this.getProcedure();
            Procedure rhsProcedure;
            rhsProcedure = that.getProcedure();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "procedure", lhsProcedure), LocatorUtils.property(thatLocator, "procedure", rhsProcedure), lhsProcedure, rhsProcedure)) {
                return false;
            }
        }
        {
            Organization lhsOrganization;
            lhsOrganization = this.getOrganization();
            Organization rhsOrganization;
            rhsOrganization = that.getOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organization", lhsOrganization), LocatorUtils.property(thatLocator, "organization", rhsOrganization), lhsOrganization, rhsOrganization)) {
                return false;
            }
        }
        {
            Order lhsOrder;
            lhsOrder = this.getOrder();
            Order rhsOrder;
            rhsOrder = that.getOrder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "order", lhsOrder), LocatorUtils.property(thatLocator, "order", rhsOrder), lhsOrder, rhsOrder)) {
                return false;
            }
        }
        {
            Query lhsQuery;
            lhsQuery = this.getQuery();
            Query rhsQuery;
            rhsQuery = that.getQuery();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "query", lhsQuery), LocatorUtils.property(thatLocator, "query", rhsQuery), lhsQuery, rhsQuery)) {
                return false;
            }
        }
        {
            Device lhsDevice;
            lhsDevice = this.getDevice();
            Device rhsDevice;
            rhsDevice = that.getDevice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "device", lhsDevice), LocatorUtils.property(thatLocator, "device", rhsDevice), lhsDevice, rhsDevice)) {
                return false;
            }
        }
        {
            Supply lhsSupply;
            lhsSupply = this.getSupply();
            Supply rhsSupply;
            rhsSupply = that.getSupply();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supply", lhsSupply), LocatorUtils.property(thatLocator, "supply", rhsSupply), lhsSupply, rhsSupply)) {
                return false;
            }
        }
        {
            CarePlan lhsCarePlan;
            lhsCarePlan = this.getCarePlan();
            CarePlan rhsCarePlan;
            rhsCarePlan = that.getCarePlan();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "carePlan", lhsCarePlan), LocatorUtils.property(thatLocator, "carePlan", rhsCarePlan), lhsCarePlan, rhsCarePlan)) {
                return false;
            }
        }
        {
            Condition lhsCondition;
            lhsCondition = this.getCondition();
            Condition rhsCondition;
            rhsCondition = that.getCondition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "condition", lhsCondition), LocatorUtils.property(thatLocator, "condition", rhsCondition), lhsCondition, rhsCondition)) {
                return false;
            }
        }
        {
            Provenance lhsProvenance;
            lhsProvenance = this.getProvenance();
            Provenance rhsProvenance;
            rhsProvenance = that.getProvenance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "provenance", lhsProvenance), LocatorUtils.property(thatLocator, "provenance", rhsProvenance), lhsProvenance, rhsProvenance)) {
                return false;
            }
        }
        {
            Binary lhsBinary;
            lhsBinary = this.getBinary();
            Binary rhsBinary;
            rhsBinary = that.getBinary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "binary", lhsBinary), LocatorUtils.property(thatLocator, "binary", rhsBinary), lhsBinary, rhsBinary)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            DiagnosticOrder theDiagnosticOrder;
            theDiagnosticOrder = this.getDiagnosticOrder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticOrder", theDiagnosticOrder), currentHashCode, theDiagnosticOrder);
        }
        {
            ImagingStudy theImagingStudy;
            theImagingStudy = this.getImagingStudy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imagingStudy", theImagingStudy), currentHashCode, theImagingStudy);
        }
        {
            AdverseReaction theAdverseReaction;
            theAdverseReaction = this.getAdverseReaction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "adverseReaction", theAdverseReaction), currentHashCode, theAdverseReaction);
        }
        {
            Practitioner thePractitioner;
            thePractitioner = this.getPractitioner();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "practitioner", thePractitioner), currentHashCode, thePractitioner);
        }
        {
            Patient thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ConceptMap theConceptMap;
            theConceptMap = this.getConceptMap();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conceptMap", theConceptMap), currentHashCode, theConceptMap);
        }
        {
            Alert theAlert;
            theAlert = this.getAlert();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "alert", theAlert), currentHashCode, theAlert);
        }
        {
            OrderResponse theOrderResponse;
            theOrderResponse = this.getOrderResponse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderResponse", theOrderResponse), currentHashCode, theOrderResponse);
        }
        {
            Specimen theSpecimen;
            theSpecimen = this.getSpecimen();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimen", theSpecimen), currentHashCode, theSpecimen);
        }
        {
            RelatedPerson theRelatedPerson;
            theRelatedPerson = this.getRelatedPerson();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedPerson", theRelatedPerson), currentHashCode, theRelatedPerson);
        }
        {
            Immunization theImmunization;
            theImmunization = this.getImmunization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "immunization", theImmunization), currentHashCode, theImmunization);
        }
        {
            DocumentReference theDocumentReference;
            theDocumentReference = this.getDocumentReference();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentReference", theDocumentReference), currentHashCode, theDocumentReference);
        }
        {
            AllergyIntolerance theAllergyIntolerance;
            theAllergyIntolerance = this.getAllergyIntolerance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "allergyIntolerance", theAllergyIntolerance), currentHashCode, theAllergyIntolerance);
        }
        {
            Observation theObservation;
            theObservation = this.getObservation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "observation", theObservation), currentHashCode, theObservation);
        }
        {
            Location theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            Profile theProfile;
            theProfile = this.getProfile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profile", theProfile), currentHashCode, theProfile);
        }
        {
            Other theOther;
            theOther = this.getOther();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "other", theOther), currentHashCode, theOther);
        }
        {
            FamilyHistory theFamilyHistory;
            theFamilyHistory = this.getFamilyHistory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "familyHistory", theFamilyHistory), currentHashCode, theFamilyHistory);
        }
        {
            Media theMedia;
            theMedia = this.getMedia();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "media", theMedia), currentHashCode, theMedia);
        }
        {
            Conformance theConformance;
            theConformance = this.getConformance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conformance", theConformance), currentHashCode, theConformance);
        }
        {
            OperationOutcome theOperationOutcome;
            theOperationOutcome = this.getOperationOutcome();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operationOutcome", theOperationOutcome), currentHashCode, theOperationOutcome);
        }
        {
            DeviceObservationReport theDeviceObservationReport;
            theDeviceObservationReport = this.getDeviceObservationReport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deviceObservationReport", theDeviceObservationReport), currentHashCode, theDeviceObservationReport);
        }
        {
            Composition theComposition;
            theComposition = this.getComposition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "composition", theComposition), currentHashCode, theComposition);
        }
        {
            Questionnaire theQuestionnaire;
            theQuestionnaire = this.getQuestionnaire();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "questionnaire", theQuestionnaire), currentHashCode, theQuestionnaire);
        }
        {
            List theList;
            theList = this.getList();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "list", theList), currentHashCode, theList);
        }
        {
            MedicationStatement theMedicationStatement;
            theMedicationStatement = this.getMedicationStatement();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medicationStatement", theMedicationStatement), currentHashCode, theMedicationStatement);
        }
        {
            SecurityEvent theSecurityEvent;
            theSecurityEvent = this.getSecurityEvent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "securityEvent", theSecurityEvent), currentHashCode, theSecurityEvent);
        }
        {
            Encounter theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            MedicationAdministration theMedicationAdministration;
            theMedicationAdministration = this.getMedicationAdministration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medicationAdministration", theMedicationAdministration), currentHashCode, theMedicationAdministration);
        }
        {
            MedicationPrescription theMedicationPrescription;
            theMedicationPrescription = this.getMedicationPrescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medicationPrescription", theMedicationPrescription), currentHashCode, theMedicationPrescription);
        }
        {
            MedicationDispense theMedicationDispense;
            theMedicationDispense = this.getMedicationDispense();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medicationDispense", theMedicationDispense), currentHashCode, theMedicationDispense);
        }
        {
            DocumentManifest theDocumentManifest;
            theDocumentManifest = this.getDocumentManifest();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentManifest", theDocumentManifest), currentHashCode, theDocumentManifest);
        }
        {
            ImmunizationRecommendation theImmunizationRecommendation;
            theImmunizationRecommendation = this.getImmunizationRecommendation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "immunizationRecommendation", theImmunizationRecommendation), currentHashCode, theImmunizationRecommendation);
        }
        {
            MessageHeader theMessageHeader;
            theMessageHeader = this.getMessageHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messageHeader", theMessageHeader), currentHashCode, theMessageHeader);
        }
        {
            Medication theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            ValueSet theValueSet;
            theValueSet = this.getValueSet();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueSet", theValueSet), currentHashCode, theValueSet);
        }
        {
            Group theGroup;
            theGroup = this.getGroup();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "group", theGroup), currentHashCode, theGroup);
        }
        {
            DiagnosticReport theDiagnosticReport;
            theDiagnosticReport = this.getDiagnosticReport();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticReport", theDiagnosticReport), currentHashCode, theDiagnosticReport);
        }
        {
            Substance theSubstance;
            theSubstance = this.getSubstance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substance", theSubstance), currentHashCode, theSubstance);
        }
        {
            Procedure theProcedure;
            theProcedure = this.getProcedure();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "procedure", theProcedure), currentHashCode, theProcedure);
        }
        {
            Organization theOrganization;
            theOrganization = this.getOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organization", theOrganization), currentHashCode, theOrganization);
        }
        {
            Order theOrder;
            theOrder = this.getOrder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "order", theOrder), currentHashCode, theOrder);
        }
        {
            Query theQuery;
            theQuery = this.getQuery();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "query", theQuery), currentHashCode, theQuery);
        }
        {
            Device theDevice;
            theDevice = this.getDevice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "device", theDevice), currentHashCode, theDevice);
        }
        {
            Supply theSupply;
            theSupply = this.getSupply();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supply", theSupply), currentHashCode, theSupply);
        }
        {
            CarePlan theCarePlan;
            theCarePlan = this.getCarePlan();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "carePlan", theCarePlan), currentHashCode, theCarePlan);
        }
        {
            Condition theCondition;
            theCondition = this.getCondition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "condition", theCondition), currentHashCode, theCondition);
        }
        {
            Provenance theProvenance;
            theProvenance = this.getProvenance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "provenance", theProvenance), currentHashCode, theProvenance);
        }
        {
            Binary theBinary;
            theBinary = this.getBinary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "binary", theBinary), currentHashCode, theBinary);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
