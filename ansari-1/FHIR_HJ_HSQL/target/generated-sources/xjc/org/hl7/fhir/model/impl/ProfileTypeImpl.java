//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.AggregationMode;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ProfileType;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Type", propOrder = {
    "code",
    "profile",
    "aggregations"
})
public class ProfileTypeImpl
    extends BackboneElementImpl
    implements Serializable, ProfileType, Equals, HashCode
{

    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl code;
    @XmlElement(type = UriImpl.class)
    protected UriImpl profile;
    @XmlElement(name = "aggregation", type = AggregationModeImpl.class)
    protected List<AggregationMode> aggregations;

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_PROFILETYPE_HJID")
    public Code getCode() {
        return code;
    }

    public void setCode(Code value) {
        this.code = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROFILE_PROFILETYPE_HJID")
    public Uri getProfile() {
        return profile;
    }

    public void setProfile(Uri value) {
        this.profile = ((UriImpl) value);
    }

    @OneToMany(targetEntity = AggregationMode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AGGREGATIONS_PROFILETYPE_HJID")
    public List<AggregationMode> getAggregations() {
        if (aggregations == null) {
            aggregations = new ArrayList<AggregationMode>();
        }
        return this.aggregations;
    }

    public void setAggregations(List<AggregationMode> aggregations) {
        this.aggregations = aggregations;
    }

    public ProfileTypeImpl withCode(Code value) {
        setCode(value);
        return this;
    }

    public ProfileTypeImpl withProfile(Uri value) {
        setProfile(value);
        return this;
    }

    public ProfileTypeImpl withAggregations(AggregationMode... values) {
        if (values!= null) {
            for (AggregationMode value: values) {
                getAggregations().add(value);
            }
        }
        return this;
    }

    public ProfileTypeImpl withAggregations(Collection<AggregationMode> values) {
        if (values!= null) {
            getAggregations().addAll(values);
        }
        return this;
    }

    public ProfileTypeImpl withAggregations(List<AggregationMode> aggregations) {
        setAggregations(aggregations);
        return this;
    }

    @Override
    public ProfileTypeImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileTypeImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileTypeImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProfileTypeImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileTypeImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileTypeImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProfileTypeImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileTypeImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileTypeImpl that = ((ProfileTypeImpl) object);
        {
            Code lhsCode;
            lhsCode = this.getCode();
            Code rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            Uri lhsProfile;
            lhsProfile = this.getProfile();
            Uri rhsProfile;
            rhsProfile = that.getProfile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profile", lhsProfile), LocatorUtils.property(thatLocator, "profile", rhsProfile), lhsProfile, rhsProfile)) {
                return false;
            }
        }
        {
            List<AggregationMode> lhsAggregations;
            lhsAggregations = (((this.aggregations!= null)&&(!this.aggregations.isEmpty()))?this.getAggregations():null);
            List<AggregationMode> rhsAggregations;
            rhsAggregations = (((that.aggregations!= null)&&(!that.aggregations.isEmpty()))?that.getAggregations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "aggregations", lhsAggregations), LocatorUtils.property(thatLocator, "aggregations", rhsAggregations), lhsAggregations, rhsAggregations)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            Uri theProfile;
            theProfile = this.getProfile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profile", theProfile), currentHashCode, theProfile);
        }
        {
            List<AggregationMode> theAggregations;
            theAggregations = (((this.aggregations!= null)&&(!this.aggregations.isEmpty()))?this.getAggregations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "aggregations", theAggregations), currentHashCode, theAggregations);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
