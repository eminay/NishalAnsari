//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ProfileElement;
import org.hl7.fhir.model.ProfileSearchParam;
import org.hl7.fhir.model.ProfileStructure;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Structure", propOrder = {
    "type",
    "name",
    "publish",
    "purpose",
    "elements",
    "searchParams"
})
public class ProfileStructureImpl
    extends BackboneElementImpl
    implements Serializable, ProfileStructure, Equals, HashCode
{

    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl type;
    @XmlElement(type = StringImpl.class)
    protected StringImpl name;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl publish;
    @XmlElement(type = StringImpl.class)
    protected StringImpl purpose;
    @XmlElement(name = "element", type = ProfileElementImpl.class)
    protected List<ProfileElement> elements;
    @XmlElement(name = "searchParam", type = ProfileSearchParamImpl.class)
    protected List<ProfileSearchParam> searchParams;

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__PROFILESTRUCTURE_HJID")
    public Code getType() {
        return type;
    }

    public void setType(Code value) {
        this.type = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PROFILESTRUCTURE_HJID")
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    public void setName(org.hl7.fhir.model.String value) {
        this.name = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PUBLISH_PROFILESTRUCTURE_HJID")
    public Boolean getPublish() {
        return publish;
    }

    public void setPublish(Boolean value) {
        this.publish = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PURPOSE_PROFILESTRUCTURE_HJID")
    public org.hl7.fhir.model.String getPurpose() {
        return purpose;
    }

    public void setPurpose(org.hl7.fhir.model.String value) {
        this.purpose = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ProfileElement.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ELEMENTS_PROFILESTRUCTURE_HJ_0")
    public List<ProfileElement> getElements() {
        if (elements == null) {
            elements = new ArrayList<ProfileElement>();
        }
        return this.elements;
    }

    public void setElements(List<ProfileElement> elements) {
        this.elements = elements;
    }

    @OneToMany(targetEntity = ProfileSearchParam.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SEARCHPARAMS_PROFILESTRUCTUR_0")
    public List<ProfileSearchParam> getSearchParams() {
        if (searchParams == null) {
            searchParams = new ArrayList<ProfileSearchParam>();
        }
        return this.searchParams;
    }

    public void setSearchParams(List<ProfileSearchParam> searchParams) {
        this.searchParams = searchParams;
    }

    public ProfileStructureImpl withType(Code value) {
        setType(value);
        return this;
    }

    public ProfileStructureImpl withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public ProfileStructureImpl withPublish(Boolean value) {
        setPublish(value);
        return this;
    }

    public ProfileStructureImpl withPurpose(org.hl7.fhir.model.String value) {
        setPurpose(value);
        return this;
    }

    public ProfileStructureImpl withElements(ProfileElement... values) {
        if (values!= null) {
            for (ProfileElement value: values) {
                getElements().add(value);
            }
        }
        return this;
    }

    public ProfileStructureImpl withElements(Collection<ProfileElement> values) {
        if (values!= null) {
            getElements().addAll(values);
        }
        return this;
    }

    public ProfileStructureImpl withElements(List<ProfileElement> elements) {
        setElements(elements);
        return this;
    }

    public ProfileStructureImpl withSearchParams(ProfileSearchParam... values) {
        if (values!= null) {
            for (ProfileSearchParam value: values) {
                getSearchParams().add(value);
            }
        }
        return this;
    }

    public ProfileStructureImpl withSearchParams(Collection<ProfileSearchParam> values) {
        if (values!= null) {
            getSearchParams().addAll(values);
        }
        return this;
    }

    public ProfileStructureImpl withSearchParams(List<ProfileSearchParam> searchParams) {
        setSearchParams(searchParams);
        return this;
    }

    @Override
    public ProfileStructureImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileStructureImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileStructureImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProfileStructureImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileStructureImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileStructureImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProfileStructureImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileStructureImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileStructureImpl that = ((ProfileStructureImpl) object);
        {
            Code lhsType;
            lhsType = this.getType();
            Code rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.model.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Boolean lhsPublish;
            lhsPublish = this.getPublish();
            Boolean rhsPublish;
            rhsPublish = that.getPublish();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "publish", lhsPublish), LocatorUtils.property(thatLocator, "publish", rhsPublish), lhsPublish, rhsPublish)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsPurpose;
            lhsPurpose = this.getPurpose();
            org.hl7.fhir.model.String rhsPurpose;
            rhsPurpose = that.getPurpose();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "purpose", lhsPurpose), LocatorUtils.property(thatLocator, "purpose", rhsPurpose), lhsPurpose, rhsPurpose)) {
                return false;
            }
        }
        {
            List<ProfileElement> lhsElements;
            lhsElements = (((this.elements!= null)&&(!this.elements.isEmpty()))?this.getElements():null);
            List<ProfileElement> rhsElements;
            rhsElements = (((that.elements!= null)&&(!that.elements.isEmpty()))?that.getElements():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "elements", lhsElements), LocatorUtils.property(thatLocator, "elements", rhsElements), lhsElements, rhsElements)) {
                return false;
            }
        }
        {
            List<ProfileSearchParam> lhsSearchParams;
            lhsSearchParams = (((this.searchParams!= null)&&(!this.searchParams.isEmpty()))?this.getSearchParams():null);
            List<ProfileSearchParam> rhsSearchParams;
            rhsSearchParams = (((that.searchParams!= null)&&(!that.searchParams.isEmpty()))?that.getSearchParams():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchParams", lhsSearchParams), LocatorUtils.property(thatLocator, "searchParams", rhsSearchParams), lhsSearchParams, rhsSearchParams)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Boolean thePublish;
            thePublish = this.getPublish();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "publish", thePublish), currentHashCode, thePublish);
        }
        {
            org.hl7.fhir.model.String thePurpose;
            thePurpose = this.getPurpose();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "purpose", thePurpose), currentHashCode, thePurpose);
        }
        {
            List<ProfileElement> theElements;
            theElements = (((this.elements!= null)&&(!this.elements.isEmpty()))?this.getElements():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "elements", theElements), currentHashCode, theElements);
        }
        {
            List<ProfileSearchParam> theSearchParams;
            theSearchParams = (((this.searchParams!= null)&&(!this.searchParams.isEmpty()))?this.getSearchParams():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchParams", theSearchParams), currentHashCode, theSearchParams);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
