//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.ImagingModality;
import org.hl7.fhir.model.ImagingStudy;
import org.hl7.fhir.model.ImagingStudySeries;
import org.hl7.fhir.model.InstanceAvailability;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Oid;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImagingStudy", propOrder = {
    "dateTime",
    "subject",
    "uid",
    "accessionNo",
    "identifiers",
    "orders",
    "modalities",
    "referrer",
    "availability",
    "url",
    "numberOfSeries",
    "numberOfInstances",
    "clinicalInformation",
    "procedures",
    "interpreter",
    "description",
    "series"
})
@XmlRootElement(name = "ImagingStudy")
public class ImagingStudyImpl
    extends ResourceImpl
    implements Serializable, ImagingStudy, Equals, HashCode
{

    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dateTime;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = OidImpl.class)
    protected OidImpl uid;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl accessionNo;
    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(name = "order", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> orders;
    @XmlElement(name = "modality", type = ImagingModalityImpl.class)
    protected List<ImagingModality> modalities;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl referrer;
    @XmlElement(type = InstanceAvailabilityImpl.class)
    protected InstanceAvailabilityImpl availability;
    @XmlElement(type = UriImpl.class)
    protected UriImpl url;
    @XmlElement(required = true, type = IntegerImpl.class)
    protected IntegerImpl numberOfSeries;
    @XmlElement(required = true, type = IntegerImpl.class)
    protected IntegerImpl numberOfInstances;
    @XmlElement(type = StringImpl.class)
    protected StringImpl clinicalInformation;
    @XmlElement(name = "procedure", type = CodingImpl.class)
    protected List<Coding> procedures;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl interpreter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(type = ImagingStudySeriesImpl.class)
    protected List<ImagingStudySeries> series;

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATETIME_IMAGINGSTUDY_HJID")
    public DateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(DateTime value) {
        this.dateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_IMAGINGSTUDY_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Oid.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UID__IMAGINGSTUDY_HJID")
    public Oid getUid() {
        return uid;
    }

    public void setUid(Oid value) {
        this.uid = ((OidImpl) value);
    }

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACCESSIONNO_IMAGINGSTUDY_HJID")
    public Identifier getAccessionNo() {
        return accessionNo;
    }

    public void setAccessionNo(Identifier value) {
        this.accessionNo = ((IdentifierImpl) value);
    }

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_IMAGINGSTUDY_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDERS_IMAGINGSTUDY_HJID")
    public List<ResourceReference> getOrders() {
        if (orders == null) {
            orders = new ArrayList<ResourceReference>();
        }
        return this.orders;
    }

    public void setOrders(List<ResourceReference> orders) {
        this.orders = orders;
    }

    @OneToMany(targetEntity = ImagingModality.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODALITIES_IMAGINGSTUDY_HJID")
    public List<ImagingModality> getModalities() {
        if (modalities == null) {
            modalities = new ArrayList<ImagingModality>();
        }
        return this.modalities;
    }

    public void setModalities(List<ImagingModality> modalities) {
        this.modalities = modalities;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERRER_IMAGINGSTUDY_HJID")
    public ResourceReference getReferrer() {
        return referrer;
    }

    public void setReferrer(ResourceReference value) {
        this.referrer = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = InstanceAvailability.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AVAILABILITY_IMAGINGSTUDY_HJ_0")
    public InstanceAvailability getAvailability() {
        return availability;
    }

    public void setAvailability(InstanceAvailability value) {
        this.availability = ((InstanceAvailabilityImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "URL_IMAGINGSTUDY_HJID")
    public Uri getUrl() {
        return url;
    }

    public void setUrl(Uri value) {
        this.url = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NUMBEROFSERIES_IMAGINGSTUDY__0")
    public Integer getNumberOfSeries() {
        return numberOfSeries;
    }

    public void setNumberOfSeries(Integer value) {
        this.numberOfSeries = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NUMBEROFINSTANCES_IMAGINGSTU_0")
    public Integer getNumberOfInstances() {
        return numberOfInstances;
    }

    public void setNumberOfInstances(Integer value) {
        this.numberOfInstances = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLINICALINFORMATION_IMAGINGS_0")
    public org.hl7.fhir.model.String getClinicalInformation() {
        return clinicalInformation;
    }

    public void setClinicalInformation(org.hl7.fhir.model.String value) {
        this.clinicalInformation = ((StringImpl) value);
    }

    @OneToMany(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROCEDURES_IMAGINGSTUDY_HJID")
    public List<Coding> getProcedures() {
        if (procedures == null) {
            procedures = new ArrayList<Coding>();
        }
        return this.procedures;
    }

    public void setProcedures(List<Coding> procedures) {
        this.procedures = procedures;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INTERPRETER_IMAGINGSTUDY_HJID")
    public ResourceReference getInterpreter() {
        return interpreter;
    }

    public void setInterpreter(ResourceReference value) {
        this.interpreter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_IMAGINGSTUDY_HJID")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ImagingStudySeries.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERIES_IMAGINGSTUDY_HJID")
    public List<ImagingStudySeries> getSeries() {
        if (series == null) {
            series = new ArrayList<ImagingStudySeries>();
        }
        return this.series;
    }

    public void setSeries(List<ImagingStudySeries> series) {
        this.series = series;
    }

    public ImagingStudyImpl withDateTime(DateTime value) {
        setDateTime(value);
        return this;
    }

    public ImagingStudyImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public ImagingStudyImpl withUid(Oid value) {
        setUid(value);
        return this;
    }

    public ImagingStudyImpl withAccessionNo(Identifier value) {
        setAccessionNo(value);
        return this;
    }

    public ImagingStudyImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public ImagingStudyImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public ImagingStudyImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public ImagingStudyImpl withOrders(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getOrders().add(value);
            }
        }
        return this;
    }

    public ImagingStudyImpl withOrders(Collection<ResourceReference> values) {
        if (values!= null) {
            getOrders().addAll(values);
        }
        return this;
    }

    public ImagingStudyImpl withOrders(List<ResourceReference> orders) {
        setOrders(orders);
        return this;
    }

    public ImagingStudyImpl withModalities(ImagingModality... values) {
        if (values!= null) {
            for (ImagingModality value: values) {
                getModalities().add(value);
            }
        }
        return this;
    }

    public ImagingStudyImpl withModalities(Collection<ImagingModality> values) {
        if (values!= null) {
            getModalities().addAll(values);
        }
        return this;
    }

    public ImagingStudyImpl withModalities(List<ImagingModality> modalities) {
        setModalities(modalities);
        return this;
    }

    public ImagingStudyImpl withReferrer(ResourceReference value) {
        setReferrer(value);
        return this;
    }

    public ImagingStudyImpl withAvailability(InstanceAvailability value) {
        setAvailability(value);
        return this;
    }

    public ImagingStudyImpl withUrl(Uri value) {
        setUrl(value);
        return this;
    }

    public ImagingStudyImpl withNumberOfSeries(Integer value) {
        setNumberOfSeries(value);
        return this;
    }

    public ImagingStudyImpl withNumberOfInstances(Integer value) {
        setNumberOfInstances(value);
        return this;
    }

    public ImagingStudyImpl withClinicalInformation(org.hl7.fhir.model.String value) {
        setClinicalInformation(value);
        return this;
    }

    public ImagingStudyImpl withProcedures(Coding... values) {
        if (values!= null) {
            for (Coding value: values) {
                getProcedures().add(value);
            }
        }
        return this;
    }

    public ImagingStudyImpl withProcedures(Collection<Coding> values) {
        if (values!= null) {
            getProcedures().addAll(values);
        }
        return this;
    }

    public ImagingStudyImpl withProcedures(List<Coding> procedures) {
        setProcedures(procedures);
        return this;
    }

    public ImagingStudyImpl withInterpreter(ResourceReference value) {
        setInterpreter(value);
        return this;
    }

    public ImagingStudyImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public ImagingStudyImpl withSeries(ImagingStudySeries... values) {
        if (values!= null) {
            for (ImagingStudySeries value: values) {
                getSeries().add(value);
            }
        }
        return this;
    }

    public ImagingStudyImpl withSeries(Collection<ImagingStudySeries> values) {
        if (values!= null) {
            getSeries().addAll(values);
        }
        return this;
    }

    public ImagingStudyImpl withSeries(List<ImagingStudySeries> series) {
        setSeries(series);
        return this;
    }

    @Override
    public ImagingStudyImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ImagingStudyImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ImagingStudyImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ImagingStudyImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ImagingStudyImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImagingStudyImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ImagingStudyImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImagingStudyImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImagingStudyImpl that = ((ImagingStudyImpl) object);
        {
            DateTime lhsDateTime;
            lhsDateTime = this.getDateTime();
            DateTime rhsDateTime;
            rhsDateTime = that.getDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            Oid lhsUid;
            lhsUid = this.getUid();
            Oid rhsUid;
            rhsUid = that.getUid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid)) {
                return false;
            }
        }
        {
            Identifier lhsAccessionNo;
            lhsAccessionNo = this.getAccessionNo();
            Identifier rhsAccessionNo;
            rhsAccessionNo = that.getAccessionNo();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accessionNo", lhsAccessionNo), LocatorUtils.property(thatLocator, "accessionNo", rhsAccessionNo), lhsAccessionNo, rhsAccessionNo)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsOrders;
            lhsOrders = (((this.orders!= null)&&(!this.orders.isEmpty()))?this.getOrders():null);
            List<ResourceReference> rhsOrders;
            rhsOrders = (((that.orders!= null)&&(!that.orders.isEmpty()))?that.getOrders():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orders", lhsOrders), LocatorUtils.property(thatLocator, "orders", rhsOrders), lhsOrders, rhsOrders)) {
                return false;
            }
        }
        {
            List<ImagingModality> lhsModalities;
            lhsModalities = (((this.modalities!= null)&&(!this.modalities.isEmpty()))?this.getModalities():null);
            List<ImagingModality> rhsModalities;
            rhsModalities = (((that.modalities!= null)&&(!that.modalities.isEmpty()))?that.getModalities():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modalities", lhsModalities), LocatorUtils.property(thatLocator, "modalities", rhsModalities), lhsModalities, rhsModalities)) {
                return false;
            }
        }
        {
            ResourceReference lhsReferrer;
            lhsReferrer = this.getReferrer();
            ResourceReference rhsReferrer;
            rhsReferrer = that.getReferrer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referrer", lhsReferrer), LocatorUtils.property(thatLocator, "referrer", rhsReferrer), lhsReferrer, rhsReferrer)) {
                return false;
            }
        }
        {
            InstanceAvailability lhsAvailability;
            lhsAvailability = this.getAvailability();
            InstanceAvailability rhsAvailability;
            rhsAvailability = that.getAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "availability", lhsAvailability), LocatorUtils.property(thatLocator, "availability", rhsAvailability), lhsAvailability, rhsAvailability)) {
                return false;
            }
        }
        {
            Uri lhsUrl;
            lhsUrl = this.getUrl();
            Uri rhsUrl;
            rhsUrl = that.getUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsUrl), LocatorUtils.property(thatLocator, "url", rhsUrl), lhsUrl, rhsUrl)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfSeries;
            lhsNumberOfSeries = this.getNumberOfSeries();
            Integer rhsNumberOfSeries;
            rhsNumberOfSeries = that.getNumberOfSeries();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfSeries", lhsNumberOfSeries), LocatorUtils.property(thatLocator, "numberOfSeries", rhsNumberOfSeries), lhsNumberOfSeries, rhsNumberOfSeries)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfInstances;
            lhsNumberOfInstances = this.getNumberOfInstances();
            Integer rhsNumberOfInstances;
            rhsNumberOfInstances = that.getNumberOfInstances();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfInstances", lhsNumberOfInstances), LocatorUtils.property(thatLocator, "numberOfInstances", rhsNumberOfInstances), lhsNumberOfInstances, rhsNumberOfInstances)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsClinicalInformation;
            lhsClinicalInformation = this.getClinicalInformation();
            org.hl7.fhir.model.String rhsClinicalInformation;
            rhsClinicalInformation = that.getClinicalInformation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clinicalInformation", lhsClinicalInformation), LocatorUtils.property(thatLocator, "clinicalInformation", rhsClinicalInformation), lhsClinicalInformation, rhsClinicalInformation)) {
                return false;
            }
        }
        {
            List<Coding> lhsProcedures;
            lhsProcedures = (((this.procedures!= null)&&(!this.procedures.isEmpty()))?this.getProcedures():null);
            List<Coding> rhsProcedures;
            rhsProcedures = (((that.procedures!= null)&&(!that.procedures.isEmpty()))?that.getProcedures():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "procedures", lhsProcedures), LocatorUtils.property(thatLocator, "procedures", rhsProcedures), lhsProcedures, rhsProcedures)) {
                return false;
            }
        }
        {
            ResourceReference lhsInterpreter;
            lhsInterpreter = this.getInterpreter();
            ResourceReference rhsInterpreter;
            rhsInterpreter = that.getInterpreter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interpreter", lhsInterpreter), LocatorUtils.property(thatLocator, "interpreter", rhsInterpreter), lhsInterpreter, rhsInterpreter)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<ImagingStudySeries> lhsSeries;
            lhsSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
            List<ImagingStudySeries> rhsSeries;
            rhsSeries = (((that.series!= null)&&(!that.series.isEmpty()))?that.getSeries():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "series", lhsSeries), LocatorUtils.property(thatLocator, "series", rhsSeries), lhsSeries, rhsSeries)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DateTime theDateTime;
            theDateTime = this.getDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            Oid theUid;
            theUid = this.getUid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid);
        }
        {
            Identifier theAccessionNo;
            theAccessionNo = this.getAccessionNo();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accessionNo", theAccessionNo), currentHashCode, theAccessionNo);
        }
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            List<ResourceReference> theOrders;
            theOrders = (((this.orders!= null)&&(!this.orders.isEmpty()))?this.getOrders():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orders", theOrders), currentHashCode, theOrders);
        }
        {
            List<ImagingModality> theModalities;
            theModalities = (((this.modalities!= null)&&(!this.modalities.isEmpty()))?this.getModalities():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modalities", theModalities), currentHashCode, theModalities);
        }
        {
            ResourceReference theReferrer;
            theReferrer = this.getReferrer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referrer", theReferrer), currentHashCode, theReferrer);
        }
        {
            InstanceAvailability theAvailability;
            theAvailability = this.getAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "availability", theAvailability), currentHashCode, theAvailability);
        }
        {
            Uri theUrl;
            theUrl = this.getUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theUrl), currentHashCode, theUrl);
        }
        {
            Integer theNumberOfSeries;
            theNumberOfSeries = this.getNumberOfSeries();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfSeries", theNumberOfSeries), currentHashCode, theNumberOfSeries);
        }
        {
            Integer theNumberOfInstances;
            theNumberOfInstances = this.getNumberOfInstances();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfInstances", theNumberOfInstances), currentHashCode, theNumberOfInstances);
        }
        {
            org.hl7.fhir.model.String theClinicalInformation;
            theClinicalInformation = this.getClinicalInformation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clinicalInformation", theClinicalInformation), currentHashCode, theClinicalInformation);
        }
        {
            List<Coding> theProcedures;
            theProcedures = (((this.procedures!= null)&&(!this.procedures.isEmpty()))?this.getProcedures():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "procedures", theProcedures), currentHashCode, theProcedures);
        }
        {
            ResourceReference theInterpreter;
            theInterpreter = this.getInterpreter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interpreter", theInterpreter), currentHashCode, theInterpreter);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<ImagingStudySeries> theSeries;
            theSeries = (((this.series!= null)&&(!this.series.isEmpty()))?this.getSeries():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "series", theSeries), currentHashCode, theSeries);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
