//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Uri;
import org.hl7.fhir.model.ValueSetFilter;
import org.hl7.fhir.model.ValueSetInclude;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValueSet.Include", propOrder = {
    "system",
    "version",
    "codes",
    "filters"
})
public class ValueSetIncludeImpl
    extends BackboneElementImpl
    implements Serializable, ValueSetInclude, Equals, HashCode
{

    @XmlElement(required = true, type = UriImpl.class)
    protected UriImpl system;
    @XmlElement(type = StringImpl.class)
    protected StringImpl version;
    @XmlElement(name = "code", type = CodeImpl.class)
    protected List<Code> codes;
    @XmlElement(name = "filter", type = ValueSetFilterImpl.class)
    protected List<ValueSetFilter> filters;

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__VALUESETINCLUDE_HJID")
    public Uri getSystem() {
        return system;
    }

    public void setSystem(Uri value) {
        this.system = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__VALUESETINCLUDE_HJID")
    public org.hl7.fhir.model.String getVersion() {
        return version;
    }

    public void setVersion(org.hl7.fhir.model.String value) {
        this.version = ((StringImpl) value);
    }

    @OneToMany(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODES_VALUESETINCLUDE_HJID")
    public List<Code> getCodes() {
        if (codes == null) {
            codes = new ArrayList<Code>();
        }
        return this.codes;
    }

    public void setCodes(List<Code> codes) {
        this.codes = codes;
    }

    @OneToMany(targetEntity = ValueSetFilter.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FILTERS_VALUESETINCLUDE_HJID")
    public List<ValueSetFilter> getFilters() {
        if (filters == null) {
            filters = new ArrayList<ValueSetFilter>();
        }
        return this.filters;
    }

    public void setFilters(List<ValueSetFilter> filters) {
        this.filters = filters;
    }

    public ValueSetIncludeImpl withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ValueSetIncludeImpl withVersion(org.hl7.fhir.model.String value) {
        setVersion(value);
        return this;
    }

    public ValueSetIncludeImpl withCodes(Code... values) {
        if (values!= null) {
            for (Code value: values) {
                getCodes().add(value);
            }
        }
        return this;
    }

    public ValueSetIncludeImpl withCodes(Collection<Code> values) {
        if (values!= null) {
            getCodes().addAll(values);
        }
        return this;
    }

    public ValueSetIncludeImpl withCodes(List<Code> codes) {
        setCodes(codes);
        return this;
    }

    public ValueSetIncludeImpl withFilters(ValueSetFilter... values) {
        if (values!= null) {
            for (ValueSetFilter value: values) {
                getFilters().add(value);
            }
        }
        return this;
    }

    public ValueSetIncludeImpl withFilters(Collection<ValueSetFilter> values) {
        if (values!= null) {
            getFilters().addAll(values);
        }
        return this;
    }

    public ValueSetIncludeImpl withFilters(List<ValueSetFilter> filters) {
        setFilters(filters);
        return this;
    }

    @Override
    public ValueSetIncludeImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetIncludeImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetIncludeImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ValueSetIncludeImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetIncludeImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetIncludeImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ValueSetIncludeImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValueSetIncludeImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ValueSetIncludeImpl that = ((ValueSetIncludeImpl) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.model.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            List<Code> lhsCodes;
            lhsCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            List<Code> rhsCodes;
            rhsCodes = (((that.codes!= null)&&(!that.codes.isEmpty()))?that.getCodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codes", lhsCodes), LocatorUtils.property(thatLocator, "codes", rhsCodes), lhsCodes, rhsCodes)) {
                return false;
            }
        }
        {
            List<ValueSetFilter> lhsFilters;
            lhsFilters = (((this.filters!= null)&&(!this.filters.isEmpty()))?this.getFilters():null);
            List<ValueSetFilter> rhsFilters;
            rhsFilters = (((that.filters!= null)&&(!that.filters.isEmpty()))?that.getFilters():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filters", lhsFilters), LocatorUtils.property(thatLocator, "filters", rhsFilters), lhsFilters, rhsFilters)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            org.hl7.fhir.model.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            List<Code> theCodes;
            theCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codes", theCodes), currentHashCode, theCodes);
        }
        {
            List<ValueSetFilter> theFilters;
            theFilters = (((this.filters!= null)&&(!this.filters.isEmpty()))?this.getFilters():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filters", theFilters), currentHashCode, theFilters);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
