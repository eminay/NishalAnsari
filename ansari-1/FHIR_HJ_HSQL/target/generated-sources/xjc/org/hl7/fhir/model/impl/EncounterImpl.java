//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Encounter;
import org.hl7.fhir.model.EncounterClass;
import org.hl7.fhir.model.EncounterHospitalization;
import org.hl7.fhir.model.EncounterLocation;
import org.hl7.fhir.model.EncounterParticipant;
import org.hl7.fhir.model.EncounterState;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.TimeDuration;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter", propOrder = {
    "identifiers",
    "status",
    "clazz",
    "types",
    "subject",
    "participants",
    "period",
    "length",
    "reason",
    "indication",
    "priority",
    "hospitalization",
    "locations",
    "serviceProvider",
    "partOf"
})
@XmlRootElement(name = "Encounter")
public class EncounterImpl
    extends ResourceImpl
    implements Serializable, Encounter, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = EncounterStateImpl.class)
    protected EncounterStateImpl status;
    @XmlElement(name = "class", required = true, type = EncounterClassImpl.class)
    protected EncounterClassImpl clazz;
    @XmlElement(name = "type", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> types;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(name = "participant", type = EncounterParticipantImpl.class)
    protected List<EncounterParticipant> participants;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(type = TimeDurationImpl.class)
    protected TimeDurationImpl length;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reason;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl indication;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl priority;
    @XmlElement(type = EncounterHospitalizationImpl.class)
    protected EncounterHospitalizationImpl hospitalization;
    @XmlElement(name = "location", type = EncounterLocationImpl.class)
    protected List<EncounterLocation> locations;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl serviceProvider;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl partOf;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_ENCOUNTER_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = EncounterState.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_ENCOUNTER_HJID")
    public EncounterState getStatus() {
        return status;
    }

    public void setStatus(EncounterState value) {
        this.status = ((EncounterStateImpl) value);
    }

    @ManyToOne(targetEntity = EncounterClass.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLAZZ_ENCOUNTER_HJID")
    public EncounterClass getClazz() {
        return clazz;
    }

    public void setClazz(EncounterClass value) {
        this.clazz = ((EncounterClassImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPES_ENCOUNTER_HJID")
    public List<CodeableConcept> getTypes() {
        if (types == null) {
            types = new ArrayList<CodeableConcept>();
        }
        return this.types;
    }

    public void setTypes(List<CodeableConcept> types) {
        this.types = types;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ENCOUNTER_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = EncounterParticipant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTICIPANTS_ENCOUNTER_HJID")
    public List<EncounterParticipant> getParticipants() {
        if (participants == null) {
            participants = new ArrayList<EncounterParticipant>();
        }
        return this.participants;
    }

    public void setParticipants(List<EncounterParticipant> participants) {
        this.participants = participants;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_ENCOUNTER_HJID")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = TimeDuration.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LENGTH__ENCOUNTER_HJID")
    public TimeDuration getLength() {
        return length;
    }

    public void setLength(TimeDuration value) {
        this.length = ((TimeDurationImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_ENCOUNTER_HJID")
    public CodeableConcept getReason() {
        return reason;
    }

    public void setReason(CodeableConcept value) {
        this.reason = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDICATION_ENCOUNTER_HJID")
    public ResourceReference getIndication() {
        return indication;
    }

    public void setIndication(ResourceReference value) {
        this.indication = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIORITY_ENCOUNTER_HJID")
    public CodeableConcept getPriority() {
        return priority;
    }

    public void setPriority(CodeableConcept value) {
        this.priority = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = EncounterHospitalization.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HOSPITALIZATION_ENCOUNTER_HJ_0")
    public EncounterHospitalization getHospitalization() {
        return hospitalization;
    }

    public void setHospitalization(EncounterHospitalization value) {
        this.hospitalization = ((EncounterHospitalizationImpl) value);
    }

    @OneToMany(targetEntity = EncounterLocation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATIONS_ENCOUNTER_HJID")
    public List<EncounterLocation> getLocations() {
        if (locations == null) {
            locations = new ArrayList<EncounterLocation>();
        }
        return this.locations;
    }

    public void setLocations(List<EncounterLocation> locations) {
        this.locations = locations;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICEPROVIDER_ENCOUNTER_HJ_0")
    public ResourceReference getServiceProvider() {
        return serviceProvider;
    }

    public void setServiceProvider(ResourceReference value) {
        this.serviceProvider = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTOF_ENCOUNTER_HJID")
    public ResourceReference getPartOf() {
        return partOf;
    }

    public void setPartOf(ResourceReference value) {
        this.partOf = ((ResourceReferenceImpl) value);
    }

    public EncounterImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public EncounterImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public EncounterImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public EncounterImpl withStatus(EncounterState value) {
        setStatus(value);
        return this;
    }

    public EncounterImpl withClazz(EncounterClass value) {
        setClazz(value);
        return this;
    }

    public EncounterImpl withTypes(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getTypes().add(value);
            }
        }
        return this;
    }

    public EncounterImpl withTypes(Collection<CodeableConcept> values) {
        if (values!= null) {
            getTypes().addAll(values);
        }
        return this;
    }

    public EncounterImpl withTypes(List<CodeableConcept> types) {
        setTypes(types);
        return this;
    }

    public EncounterImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public EncounterImpl withParticipants(EncounterParticipant... values) {
        if (values!= null) {
            for (EncounterParticipant value: values) {
                getParticipants().add(value);
            }
        }
        return this;
    }

    public EncounterImpl withParticipants(Collection<EncounterParticipant> values) {
        if (values!= null) {
            getParticipants().addAll(values);
        }
        return this;
    }

    public EncounterImpl withParticipants(List<EncounterParticipant> participants) {
        setParticipants(participants);
        return this;
    }

    public EncounterImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public EncounterImpl withLength(TimeDuration value) {
        setLength(value);
        return this;
    }

    public EncounterImpl withReason(CodeableConcept value) {
        setReason(value);
        return this;
    }

    public EncounterImpl withIndication(ResourceReference value) {
        setIndication(value);
        return this;
    }

    public EncounterImpl withPriority(CodeableConcept value) {
        setPriority(value);
        return this;
    }

    public EncounterImpl withHospitalization(EncounterHospitalization value) {
        setHospitalization(value);
        return this;
    }

    public EncounterImpl withLocations(EncounterLocation... values) {
        if (values!= null) {
            for (EncounterLocation value: values) {
                getLocations().add(value);
            }
        }
        return this;
    }

    public EncounterImpl withLocations(Collection<EncounterLocation> values) {
        if (values!= null) {
            getLocations().addAll(values);
        }
        return this;
    }

    public EncounterImpl withLocations(List<EncounterLocation> locations) {
        setLocations(locations);
        return this;
    }

    public EncounterImpl withServiceProvider(ResourceReference value) {
        setServiceProvider(value);
        return this;
    }

    public EncounterImpl withPartOf(ResourceReference value) {
        setPartOf(value);
        return this;
    }

    @Override
    public EncounterImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public EncounterImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public EncounterImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public EncounterImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public EncounterImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public EncounterImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof EncounterImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final EncounterImpl that = ((EncounterImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            EncounterState lhsStatus;
            lhsStatus = this.getStatus();
            EncounterState rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            EncounterClass lhsClazz;
            lhsClazz = this.getClazz();
            EncounterClass rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsTypes;
            lhsTypes = (((this.types!= null)&&(!this.types.isEmpty()))?this.getTypes():null);
            List<CodeableConcept> rhsTypes;
            rhsTypes = (((that.types!= null)&&(!that.types.isEmpty()))?that.getTypes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "types", lhsTypes), LocatorUtils.property(thatLocator, "types", rhsTypes), lhsTypes, rhsTypes)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            List<EncounterParticipant> lhsParticipants;
            lhsParticipants = (((this.participants!= null)&&(!this.participants.isEmpty()))?this.getParticipants():null);
            List<EncounterParticipant> rhsParticipants;
            rhsParticipants = (((that.participants!= null)&&(!that.participants.isEmpty()))?that.getParticipants():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "participants", lhsParticipants), LocatorUtils.property(thatLocator, "participants", rhsParticipants), lhsParticipants, rhsParticipants)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            TimeDuration lhsLength;
            lhsLength = this.getLength();
            TimeDuration rhsLength;
            rhsLength = that.getLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "length", lhsLength), LocatorUtils.property(thatLocator, "length", rhsLength), lhsLength, rhsLength)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReason;
            lhsReason = this.getReason();
            CodeableConcept rhsReason;
            rhsReason = that.getReason();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            ResourceReference lhsIndication;
            lhsIndication = this.getIndication();
            ResourceReference rhsIndication;
            rhsIndication = that.getIndication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indication", lhsIndication), LocatorUtils.property(thatLocator, "indication", rhsIndication), lhsIndication, rhsIndication)) {
                return false;
            }
        }
        {
            CodeableConcept lhsPriority;
            lhsPriority = this.getPriority();
            CodeableConcept rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority)) {
                return false;
            }
        }
        {
            EncounterHospitalization lhsHospitalization;
            lhsHospitalization = this.getHospitalization();
            EncounterHospitalization rhsHospitalization;
            rhsHospitalization = that.getHospitalization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hospitalization", lhsHospitalization), LocatorUtils.property(thatLocator, "hospitalization", rhsHospitalization), lhsHospitalization, rhsHospitalization)) {
                return false;
            }
        }
        {
            List<EncounterLocation> lhsLocations;
            lhsLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            List<EncounterLocation> rhsLocations;
            rhsLocations = (((that.locations!= null)&&(!that.locations.isEmpty()))?that.getLocations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locations", lhsLocations), LocatorUtils.property(thatLocator, "locations", rhsLocations), lhsLocations, rhsLocations)) {
                return false;
            }
        }
        {
            ResourceReference lhsServiceProvider;
            lhsServiceProvider = this.getServiceProvider();
            ResourceReference rhsServiceProvider;
            rhsServiceProvider = that.getServiceProvider();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceProvider", lhsServiceProvider), LocatorUtils.property(thatLocator, "serviceProvider", rhsServiceProvider), lhsServiceProvider, rhsServiceProvider)) {
                return false;
            }
        }
        {
            ResourceReference lhsPartOf;
            lhsPartOf = this.getPartOf();
            ResourceReference rhsPartOf;
            rhsPartOf = that.getPartOf();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partOf", lhsPartOf), LocatorUtils.property(thatLocator, "partOf", rhsPartOf), lhsPartOf, rhsPartOf)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            EncounterState theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            EncounterClass theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<CodeableConcept> theTypes;
            theTypes = (((this.types!= null)&&(!this.types.isEmpty()))?this.getTypes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "types", theTypes), currentHashCode, theTypes);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            List<EncounterParticipant> theParticipants;
            theParticipants = (((this.participants!= null)&&(!this.participants.isEmpty()))?this.getParticipants():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "participants", theParticipants), currentHashCode, theParticipants);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            TimeDuration theLength;
            theLength = this.getLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "length", theLength), currentHashCode, theLength);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            ResourceReference theIndication;
            theIndication = this.getIndication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indication", theIndication), currentHashCode, theIndication);
        }
        {
            CodeableConcept thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority);
        }
        {
            EncounterHospitalization theHospitalization;
            theHospitalization = this.getHospitalization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hospitalization", theHospitalization), currentHashCode, theHospitalization);
        }
        {
            List<EncounterLocation> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locations", theLocations), currentHashCode, theLocations);
        }
        {
            ResourceReference theServiceProvider;
            theServiceProvider = this.getServiceProvider();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceProvider", theServiceProvider), currentHashCode, theServiceProvider);
        }
        {
            ResourceReference thePartOf;
            thePartOf = this.getPartOf();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partOf", thePartOf), currentHashCode, thePartOf);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
