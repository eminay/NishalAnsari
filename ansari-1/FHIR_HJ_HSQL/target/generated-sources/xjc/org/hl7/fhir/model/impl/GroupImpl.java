//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Group;
import org.hl7.fhir.model.GroupCharacteristic;
import org.hl7.fhir.model.GroupType;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Group", propOrder = {
    "identifier",
    "type",
    "actual",
    "code",
    "name",
    "quantity",
    "characteristics",
    "members"
})
@XmlRootElement(name = "Group")
public class GroupImpl
    extends ResourceImpl
    implements Serializable, Group, Equals, HashCode
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(required = true, type = GroupTypeImpl.class)
    protected GroupTypeImpl type;
    @XmlElement(required = true, type = BooleanImpl.class)
    protected BooleanImpl actual;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl code;
    @XmlElement(type = StringImpl.class)
    protected StringImpl name;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl quantity;
    @XmlElement(name = "characteristic", type = GroupCharacteristicImpl.class)
    protected List<GroupCharacteristic> characteristics;
    @XmlElement(name = "member", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> members;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_GROUP__HJID")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = GroupType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__GROUP__HJID")
    public GroupType getType() {
        return type;
    }

    public void setType(GroupType value) {
        this.type = ((GroupTypeImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTUAL_GROUP__HJID")
    public Boolean getActual() {
        return actual;
    }

    public void setActual(Boolean value) {
        this.actual = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_GROUP__HJID")
    public CodeableConcept getCode() {
        return code;
    }

    public void setCode(CodeableConcept value) {
        this.code = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__GROUP__HJID")
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    public void setName(org.hl7.fhir.model.String value) {
        this.name = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_GROUP__HJID")
    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer value) {
        this.quantity = ((IntegerImpl) value);
    }

    @OneToMany(targetEntity = GroupCharacteristic.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CHARACTERISTICS__GROUP__HJID")
    public List<GroupCharacteristic> getCharacteristics() {
        if (characteristics == null) {
            characteristics = new ArrayList<GroupCharacteristic>();
        }
        return this.characteristics;
    }

    public void setCharacteristics(List<GroupCharacteristic> characteristics) {
        this.characteristics = characteristics;
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEMBERS_GROUP__HJID")
    public List<ResourceReference> getMembers() {
        if (members == null) {
            members = new ArrayList<ResourceReference>();
        }
        return this.members;
    }

    public void setMembers(List<ResourceReference> members) {
        this.members = members;
    }

    public GroupImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public GroupImpl withType(GroupType value) {
        setType(value);
        return this;
    }

    public GroupImpl withActual(Boolean value) {
        setActual(value);
        return this;
    }

    public GroupImpl withCode(CodeableConcept value) {
        setCode(value);
        return this;
    }

    public GroupImpl withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public GroupImpl withQuantity(Integer value) {
        setQuantity(value);
        return this;
    }

    public GroupImpl withCharacteristics(GroupCharacteristic... values) {
        if (values!= null) {
            for (GroupCharacteristic value: values) {
                getCharacteristics().add(value);
            }
        }
        return this;
    }

    public GroupImpl withCharacteristics(Collection<GroupCharacteristic> values) {
        if (values!= null) {
            getCharacteristics().addAll(values);
        }
        return this;
    }

    public GroupImpl withCharacteristics(List<GroupCharacteristic> characteristics) {
        setCharacteristics(characteristics);
        return this;
    }

    public GroupImpl withMembers(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getMembers().add(value);
            }
        }
        return this;
    }

    public GroupImpl withMembers(Collection<ResourceReference> values) {
        if (values!= null) {
            getMembers().addAll(values);
        }
        return this;
    }

    public GroupImpl withMembers(List<ResourceReference> members) {
        setMembers(members);
        return this;
    }

    @Override
    public GroupImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public GroupImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public GroupImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public GroupImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public GroupImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public GroupImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public GroupImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public GroupImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public GroupImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public GroupImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public GroupImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public GroupImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GroupImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final GroupImpl that = ((GroupImpl) object);
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            GroupType lhsType;
            lhsType = this.getType();
            GroupType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            Boolean lhsActual;
            lhsActual = this.getActual();
            Boolean rhsActual;
            rhsActual = that.getActual();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "actual", lhsActual), LocatorUtils.property(thatLocator, "actual", rhsActual), lhsActual, rhsActual)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCode;
            lhsCode = this.getCode();
            CodeableConcept rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.model.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Integer lhsQuantity;
            lhsQuantity = this.getQuantity();
            Integer rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            List<GroupCharacteristic> lhsCharacteristics;
            lhsCharacteristics = (((this.characteristics!= null)&&(!this.characteristics.isEmpty()))?this.getCharacteristics():null);
            List<GroupCharacteristic> rhsCharacteristics;
            rhsCharacteristics = (((that.characteristics!= null)&&(!that.characteristics.isEmpty()))?that.getCharacteristics():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "characteristics", lhsCharacteristics), LocatorUtils.property(thatLocator, "characteristics", rhsCharacteristics), lhsCharacteristics, rhsCharacteristics)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsMembers;
            lhsMembers = (((this.members!= null)&&(!this.members.isEmpty()))?this.getMembers():null);
            List<ResourceReference> rhsMembers;
            rhsMembers = (((that.members!= null)&&(!that.members.isEmpty()))?that.getMembers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "members", lhsMembers), LocatorUtils.property(thatLocator, "members", rhsMembers), lhsMembers, rhsMembers)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            GroupType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            Boolean theActual;
            theActual = this.getActual();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "actual", theActual), currentHashCode, theActual);
        }
        {
            CodeableConcept theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Integer theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            List<GroupCharacteristic> theCharacteristics;
            theCharacteristics = (((this.characteristics!= null)&&(!this.characteristics.isEmpty()))?this.getCharacteristics():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "characteristics", theCharacteristics), currentHashCode, theCharacteristics);
        }
        {
            List<ResourceReference> theMembers;
            theMembers = (((this.members!= null)&&(!this.members.isEmpty()))?this.getMembers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "members", theMembers), currentHashCode, theMembers);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
