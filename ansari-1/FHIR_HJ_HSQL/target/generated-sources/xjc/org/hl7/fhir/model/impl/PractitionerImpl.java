//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Practitioner;
import org.hl7.fhir.model.PractitionerQualification;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Practitioner", propOrder = {
    "identifiers",
    "name",
    "telecoms",
    "address",
    "gender",
    "birthDate",
    "photos",
    "organization",
    "roles",
    "specialties",
    "period",
    "locations",
    "qualifications",
    "communications"
})
@XmlRootElement(name = "Practitioner")
public class PractitionerImpl
    extends ResourceImpl
    implements Serializable, Practitioner, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl name;
    @XmlElement(name = "telecom", type = ContactImpl.class)
    protected List<Contact> telecoms;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl address;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl gender;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl birthDate;
    @XmlElement(name = "photo", type = AttachmentImpl.class)
    protected List<Attachment> photos;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl organization;
    @XmlElement(name = "role", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> roles;
    @XmlElement(name = "specialty", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialties;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(name = "location", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> locations;
    @XmlElement(name = "qualification", type = PractitionerQualificationImpl.class)
    protected List<PractitionerQualification> qualifications;
    @XmlElement(name = "communication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> communications;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_PRACTITIONER_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PRACTITIONER_HJID")
    public HumanName getName() {
        return name;
    }

    public void setName(HumanName value) {
        this.name = ((HumanNameImpl) value);
    }

    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOMS_PRACTITIONER_HJID")
    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    public void setTelecoms(List<Contact> telecoms) {
        this.telecoms = telecoms;
    }

    @ManyToOne(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_PRACTITIONER_HJID")
    public Address getAddress() {
        return address;
    }

    public void setAddress(Address value) {
        this.address = ((AddressImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GENDER_PRACTITIONER_HJID")
    public CodeableConcept getGender() {
        return gender;
    }

    public void setGender(CodeableConcept value) {
        this.gender = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BIRTHDATE_PRACTITIONER_HJID")
    public DateTime getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(DateTime value) {
        this.birthDate = ((DateTimeImpl) value);
    }

    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PHOTOS_PRACTITIONER_HJID")
    public List<Attachment> getPhotos() {
        if (photos == null) {
            photos = new ArrayList<Attachment>();
        }
        return this.photos;
    }

    public void setPhotos(List<Attachment> photos) {
        this.photos = photos;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORGANIZATION_PRACTITIONER_HJ_0")
    public ResourceReference getOrganization() {
        return organization;
    }

    public void setOrganization(ResourceReference value) {
        this.organization = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROLES_PRACTITIONER_HJID")
    public List<CodeableConcept> getRoles() {
        if (roles == null) {
            roles = new ArrayList<CodeableConcept>();
        }
        return this.roles;
    }

    public void setRoles(List<CodeableConcept> roles) {
        this.roles = roles;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIALTIES_PRACTITIONER_HJID")
    public List<CodeableConcept> getSpecialties() {
        if (specialties == null) {
            specialties = new ArrayList<CodeableConcept>();
        }
        return this.specialties;
    }

    public void setSpecialties(List<CodeableConcept> specialties) {
        this.specialties = specialties;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_PRACTITIONER_HJID")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATIONS_PRACTITIONER_HJID")
    public List<ResourceReference> getLocations() {
        if (locations == null) {
            locations = new ArrayList<ResourceReference>();
        }
        return this.locations;
    }

    public void setLocations(List<ResourceReference> locations) {
        this.locations = locations;
    }

    @OneToMany(targetEntity = PractitionerQualification.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUALIFICATIONS_PRACTITIONER__0")
    public List<PractitionerQualification> getQualifications() {
        if (qualifications == null) {
            qualifications = new ArrayList<PractitionerQualification>();
        }
        return this.qualifications;
    }

    public void setQualifications(List<PractitionerQualification> qualifications) {
        this.qualifications = qualifications;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMUNICATIONS_PRACTITIONER__0")
    public List<CodeableConcept> getCommunications() {
        if (communications == null) {
            communications = new ArrayList<CodeableConcept>();
        }
        return this.communications;
    }

    public void setCommunications(List<CodeableConcept> communications) {
        this.communications = communications;
    }

    public PractitionerImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public PractitionerImpl withName(HumanName value) {
        setName(value);
        return this;
    }

    public PractitionerImpl withTelecoms(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecoms().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withTelecoms(Collection<Contact> values) {
        if (values!= null) {
            getTelecoms().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withTelecoms(List<Contact> telecoms) {
        setTelecoms(telecoms);
        return this;
    }

    public PractitionerImpl withAddress(Address value) {
        setAddress(value);
        return this;
    }

    public PractitionerImpl withGender(CodeableConcept value) {
        setGender(value);
        return this;
    }

    public PractitionerImpl withBirthDate(DateTime value) {
        setBirthDate(value);
        return this;
    }

    public PractitionerImpl withPhotos(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPhotos().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withPhotos(Collection<Attachment> values) {
        if (values!= null) {
            getPhotos().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withPhotos(List<Attachment> photos) {
        setPhotos(photos);
        return this;
    }

    public PractitionerImpl withOrganization(ResourceReference value) {
        setOrganization(value);
        return this;
    }

    public PractitionerImpl withRoles(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getRoles().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withRoles(Collection<CodeableConcept> values) {
        if (values!= null) {
            getRoles().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withRoles(List<CodeableConcept> roles) {
        setRoles(roles);
        return this;
    }

    public PractitionerImpl withSpecialties(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getSpecialties().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withSpecialties(Collection<CodeableConcept> values) {
        if (values!= null) {
            getSpecialties().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withSpecialties(List<CodeableConcept> specialties) {
        setSpecialties(specialties);
        return this;
    }

    public PractitionerImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public PractitionerImpl withLocations(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getLocations().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withLocations(Collection<ResourceReference> values) {
        if (values!= null) {
            getLocations().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withLocations(List<ResourceReference> locations) {
        setLocations(locations);
        return this;
    }

    public PractitionerImpl withQualifications(PractitionerQualification... values) {
        if (values!= null) {
            for (PractitionerQualification value: values) {
                getQualifications().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withQualifications(Collection<PractitionerQualification> values) {
        if (values!= null) {
            getQualifications().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withQualifications(List<PractitionerQualification> qualifications) {
        setQualifications(qualifications);
        return this;
    }

    public PractitionerImpl withCommunications(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCommunications().add(value);
            }
        }
        return this;
    }

    public PractitionerImpl withCommunications(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCommunications().addAll(values);
        }
        return this;
    }

    public PractitionerImpl withCommunications(List<CodeableConcept> communications) {
        setCommunications(communications);
        return this;
    }

    @Override
    public PractitionerImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public PractitionerImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public PractitionerImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public PractitionerImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public PractitionerImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public PractitionerImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public PractitionerImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public PractitionerImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public PractitionerImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public PractitionerImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public PractitionerImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public PractitionerImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PractitionerImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PractitionerImpl that = ((PractitionerImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            HumanName lhsName;
            lhsName = this.getName();
            HumanName rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecoms;
            lhsTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            List<Contact> rhsTelecoms;
            rhsTelecoms = (((that.telecoms!= null)&&(!that.telecoms.isEmpty()))?that.getTelecoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecoms", lhsTelecoms), LocatorUtils.property(thatLocator, "telecoms", rhsTelecoms), lhsTelecoms, rhsTelecoms)) {
                return false;
            }
        }
        {
            Address lhsAddress;
            lhsAddress = this.getAddress();
            Address rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            CodeableConcept lhsGender;
            lhsGender = this.getGender();
            CodeableConcept rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            DateTime lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            DateTime rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPhotos;
            lhsPhotos = (((this.photos!= null)&&(!this.photos.isEmpty()))?this.getPhotos():null);
            List<Attachment> rhsPhotos;
            rhsPhotos = (((that.photos!= null)&&(!that.photos.isEmpty()))?that.getPhotos():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "photos", lhsPhotos), LocatorUtils.property(thatLocator, "photos", rhsPhotos), lhsPhotos, rhsPhotos)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrganization;
            lhsOrganization = this.getOrganization();
            ResourceReference rhsOrganization;
            rhsOrganization = that.getOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organization", lhsOrganization), LocatorUtils.property(thatLocator, "organization", rhsOrganization), lhsOrganization, rhsOrganization)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsRoles;
            lhsRoles = (((this.roles!= null)&&(!this.roles.isEmpty()))?this.getRoles():null);
            List<CodeableConcept> rhsRoles;
            rhsRoles = (((that.roles!= null)&&(!that.roles.isEmpty()))?that.getRoles():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "roles", lhsRoles), LocatorUtils.property(thatLocator, "roles", rhsRoles), lhsRoles, rhsRoles)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsSpecialties;
            lhsSpecialties = (((this.specialties!= null)&&(!this.specialties.isEmpty()))?this.getSpecialties():null);
            List<CodeableConcept> rhsSpecialties;
            rhsSpecialties = (((that.specialties!= null)&&(!that.specialties.isEmpty()))?that.getSpecialties():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialties", lhsSpecialties), LocatorUtils.property(thatLocator, "specialties", rhsSpecialties), lhsSpecialties, rhsSpecialties)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsLocations;
            lhsLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            List<ResourceReference> rhsLocations;
            rhsLocations = (((that.locations!= null)&&(!that.locations.isEmpty()))?that.getLocations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locations", lhsLocations), LocatorUtils.property(thatLocator, "locations", rhsLocations), lhsLocations, rhsLocations)) {
                return false;
            }
        }
        {
            List<PractitionerQualification> lhsQualifications;
            lhsQualifications = (((this.qualifications!= null)&&(!this.qualifications.isEmpty()))?this.getQualifications():null);
            List<PractitionerQualification> rhsQualifications;
            rhsQualifications = (((that.qualifications!= null)&&(!that.qualifications.isEmpty()))?that.getQualifications():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "qualifications", lhsQualifications), LocatorUtils.property(thatLocator, "qualifications", rhsQualifications), lhsQualifications, rhsQualifications)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCommunications;
            lhsCommunications = (((this.communications!= null)&&(!this.communications.isEmpty()))?this.getCommunications():null);
            List<CodeableConcept> rhsCommunications;
            rhsCommunications = (((that.communications!= null)&&(!that.communications.isEmpty()))?that.getCommunications():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "communications", lhsCommunications), LocatorUtils.property(thatLocator, "communications", rhsCommunications), lhsCommunications, rhsCommunications)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            HumanName theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecoms", theTelecoms), currentHashCode, theTelecoms);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            List<Attachment> thePhotos;
            thePhotos = (((this.photos!= null)&&(!this.photos.isEmpty()))?this.getPhotos():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "photos", thePhotos), currentHashCode, thePhotos);
        }
        {
            ResourceReference theOrganization;
            theOrganization = this.getOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organization", theOrganization), currentHashCode, theOrganization);
        }
        {
            List<CodeableConcept> theRoles;
            theRoles = (((this.roles!= null)&&(!this.roles.isEmpty()))?this.getRoles():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "roles", theRoles), currentHashCode, theRoles);
        }
        {
            List<CodeableConcept> theSpecialties;
            theSpecialties = (((this.specialties!= null)&&(!this.specialties.isEmpty()))?this.getSpecialties():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialties", theSpecialties), currentHashCode, theSpecialties);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            List<ResourceReference> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locations", theLocations), currentHashCode, theLocations);
        }
        {
            List<PractitionerQualification> theQualifications;
            theQualifications = (((this.qualifications!= null)&&(!this.qualifications.isEmpty()))?this.getQualifications():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "qualifications", theQualifications), currentHashCode, theQualifications);
        }
        {
            List<CodeableConcept> theCommunications;
            theCommunications = (((this.communications!= null)&&(!this.communications.isEmpty()))?this.getCommunications():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "communications", theCommunications), currentHashCode, theCommunications);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
