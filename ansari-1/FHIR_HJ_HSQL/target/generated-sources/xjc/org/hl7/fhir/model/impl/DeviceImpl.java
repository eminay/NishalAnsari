//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.Date;
import org.hl7.fhir.model.Device;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Device", propOrder = {
    "identifiers",
    "type",
    "manufacturer",
    "model",
    "version",
    "expiry",
    "udi",
    "lotNumber",
    "owner",
    "location",
    "patient",
    "contacts",
    "url"
})
@XmlRootElement(name = "Device")
public class DeviceImpl
    extends ResourceImpl
    implements Serializable, Device, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = StringImpl.class)
    protected StringImpl manufacturer;
    @XmlElement(type = StringImpl.class)
    protected StringImpl model;
    @XmlElement(type = StringImpl.class)
    protected StringImpl version;
    @XmlElement(type = DateImpl.class)
    protected DateImpl expiry;
    @XmlElement(type = StringImpl.class)
    protected StringImpl udi;
    @XmlElement(type = StringImpl.class)
    protected StringImpl lotNumber;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl owner;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl location;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl patient;
    @XmlElement(name = "contact", type = ContactImpl.class)
    protected List<Contact> contacts;
    @XmlElement(type = UriImpl.class)
    protected UriImpl url;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_DEVICE_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__DEVICE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MANUFACTURER_DEVICE_HJID")
    public org.hl7.fhir.model.String getManufacturer() {
        return manufacturer;
    }

    public void setManufacturer(org.hl7.fhir.model.String value) {
        this.manufacturer = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODEL_DEVICE_HJID")
    public org.hl7.fhir.model.String getModel() {
        return model;
    }

    public void setModel(org.hl7.fhir.model.String value) {
        this.model = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__DEVICE_HJID")
    public org.hl7.fhir.model.String getVersion() {
        return version;
    }

    public void setVersion(org.hl7.fhir.model.String value) {
        this.version = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPIRY_DEVICE_HJID")
    public Date getExpiry() {
        return expiry;
    }

    public void setExpiry(Date value) {
        this.expiry = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UDI_DEVICE_HJID")
    public org.hl7.fhir.model.String getUdi() {
        return udi;
    }

    public void setUdi(org.hl7.fhir.model.String value) {
        this.udi = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOTNUMBER_DEVICE_HJID")
    public org.hl7.fhir.model.String getLotNumber() {
        return lotNumber;
    }

    public void setLotNumber(org.hl7.fhir.model.String value) {
        this.lotNumber = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OWNER__DEVICE_HJID")
    public ResourceReference getOwner() {
        return owner;
    }

    public void setOwner(ResourceReference value) {
        this.owner = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__DEVICE_HJID")
    public ResourceReference getLocation() {
        return location;
    }

    public void setLocation(ResourceReference value) {
        this.location = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_DEVICE_HJID")
    public ResourceReference getPatient() {
        return patient;
    }

    public void setPatient(ResourceReference value) {
        this.patient = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTACTS_DEVICE_HJID")
    public List<Contact> getContacts() {
        if (contacts == null) {
            contacts = new ArrayList<Contact>();
        }
        return this.contacts;
    }

    public void setContacts(List<Contact> contacts) {
        this.contacts = contacts;
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "URL_DEVICE_HJID")
    public Uri getUrl() {
        return url;
    }

    public void setUrl(Uri value) {
        this.url = ((UriImpl) value);
    }

    public DeviceImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public DeviceImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public DeviceImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public DeviceImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public DeviceImpl withManufacturer(org.hl7.fhir.model.String value) {
        setManufacturer(value);
        return this;
    }

    public DeviceImpl withModel(org.hl7.fhir.model.String value) {
        setModel(value);
        return this;
    }

    public DeviceImpl withVersion(org.hl7.fhir.model.String value) {
        setVersion(value);
        return this;
    }

    public DeviceImpl withExpiry(Date value) {
        setExpiry(value);
        return this;
    }

    public DeviceImpl withUdi(org.hl7.fhir.model.String value) {
        setUdi(value);
        return this;
    }

    public DeviceImpl withLotNumber(org.hl7.fhir.model.String value) {
        setLotNumber(value);
        return this;
    }

    public DeviceImpl withOwner(ResourceReference value) {
        setOwner(value);
        return this;
    }

    public DeviceImpl withLocation(ResourceReference value) {
        setLocation(value);
        return this;
    }

    public DeviceImpl withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public DeviceImpl withContacts(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getContacts().add(value);
            }
        }
        return this;
    }

    public DeviceImpl withContacts(Collection<Contact> values) {
        if (values!= null) {
            getContacts().addAll(values);
        }
        return this;
    }

    public DeviceImpl withContacts(List<Contact> contacts) {
        setContacts(contacts);
        return this;
    }

    public DeviceImpl withUrl(Uri value) {
        setUrl(value);
        return this;
    }

    @Override
    public DeviceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DeviceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DeviceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DeviceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DeviceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DeviceImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DeviceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DeviceImpl that = ((DeviceImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsManufacturer;
            lhsManufacturer = this.getManufacturer();
            org.hl7.fhir.model.String rhsManufacturer;
            rhsManufacturer = that.getManufacturer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "manufacturer", lhsManufacturer), LocatorUtils.property(thatLocator, "manufacturer", rhsManufacturer), lhsManufacturer, rhsManufacturer)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsModel;
            lhsModel = this.getModel();
            org.hl7.fhir.model.String rhsModel;
            rhsModel = that.getModel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "model", lhsModel), LocatorUtils.property(thatLocator, "model", rhsModel), lhsModel, rhsModel)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.model.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            Date lhsExpiry;
            lhsExpiry = this.getExpiry();
            Date rhsExpiry;
            rhsExpiry = that.getExpiry();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expiry", lhsExpiry), LocatorUtils.property(thatLocator, "expiry", rhsExpiry), lhsExpiry, rhsExpiry)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsUdi;
            lhsUdi = this.getUdi();
            org.hl7.fhir.model.String rhsUdi;
            rhsUdi = that.getUdi();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "udi", lhsUdi), LocatorUtils.property(thatLocator, "udi", rhsUdi), lhsUdi, rhsUdi)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsLotNumber;
            lhsLotNumber = this.getLotNumber();
            org.hl7.fhir.model.String rhsLotNumber;
            rhsLotNumber = that.getLotNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lotNumber", lhsLotNumber), LocatorUtils.property(thatLocator, "lotNumber", rhsLotNumber), lhsLotNumber, rhsLotNumber)) {
                return false;
            }
        }
        {
            ResourceReference lhsOwner;
            lhsOwner = this.getOwner();
            ResourceReference rhsOwner;
            rhsOwner = that.getOwner();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "owner", lhsOwner), LocatorUtils.property(thatLocator, "owner", rhsOwner), lhsOwner, rhsOwner)) {
                return false;
            }
        }
        {
            ResourceReference lhsLocation;
            lhsLocation = this.getLocation();
            ResourceReference rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            List<Contact> lhsContacts;
            lhsContacts = (((this.contacts!= null)&&(!this.contacts.isEmpty()))?this.getContacts():null);
            List<Contact> rhsContacts;
            rhsContacts = (((that.contacts!= null)&&(!that.contacts.isEmpty()))?that.getContacts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contacts", lhsContacts), LocatorUtils.property(thatLocator, "contacts", rhsContacts), lhsContacts, rhsContacts)) {
                return false;
            }
        }
        {
            Uri lhsUrl;
            lhsUrl = this.getUrl();
            Uri rhsUrl;
            rhsUrl = that.getUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsUrl), LocatorUtils.property(thatLocator, "url", rhsUrl), lhsUrl, rhsUrl)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            org.hl7.fhir.model.String theManufacturer;
            theManufacturer = this.getManufacturer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "manufacturer", theManufacturer), currentHashCode, theManufacturer);
        }
        {
            org.hl7.fhir.model.String theModel;
            theModel = this.getModel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "model", theModel), currentHashCode, theModel);
        }
        {
            org.hl7.fhir.model.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            Date theExpiry;
            theExpiry = this.getExpiry();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expiry", theExpiry), currentHashCode, theExpiry);
        }
        {
            org.hl7.fhir.model.String theUdi;
            theUdi = this.getUdi();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "udi", theUdi), currentHashCode, theUdi);
        }
        {
            org.hl7.fhir.model.String theLotNumber;
            theLotNumber = this.getLotNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lotNumber", theLotNumber), currentHashCode, theLotNumber);
        }
        {
            ResourceReference theOwner;
            theOwner = this.getOwner();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "owner", theOwner), currentHashCode, theOwner);
        }
        {
            ResourceReference theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            List<Contact> theContacts;
            theContacts = (((this.contacts!= null)&&(!this.contacts.isEmpty()))?this.getContacts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contacts", theContacts), currentHashCode, theContacts);
        }
        {
            Uri theUrl;
            theUrl = this.getUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theUrl), currentHashCode, theUrl);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
