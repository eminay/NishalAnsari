//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.MessageHeader;
import org.hl7.fhir.model.MessageHeaderDestination;
import org.hl7.fhir.model.MessageHeaderResponse;
import org.hl7.fhir.model.MessageHeaderSource;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MessageHeader", propOrder = {
    "identifier",
    "timestamp",
    "event",
    "response",
    "source",
    "destinations",
    "enterer",
    "author",
    "receiver",
    "responsible",
    "reason",
    "datas"
})
@XmlRootElement(name = "MessageHeader")
public class MessageHeaderImpl
    extends ResourceImpl
    implements Serializable, MessageHeader, Equals, HashCode
{

    @XmlElement(required = true, type = IdImpl.class)
    protected IdImpl identifier;
    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl timestamp;
    @XmlElement(required = true, type = CodingImpl.class)
    protected CodingImpl event;
    @XmlElement(type = MessageHeaderResponseImpl.class)
    protected MessageHeaderResponseImpl response;
    @XmlElement(required = true, type = MessageHeaderSourceImpl.class)
    protected MessageHeaderSourceImpl source;
    @XmlElement(name = "destination", type = MessageHeaderDestinationImpl.class)
    protected List<MessageHeaderDestination> destinations;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl enterer;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl author;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl receiver;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl responsible;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reason;
    @XmlElement(name = "data", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> datas;

    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MESSAGEHEADER_HJID")
    public Id getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Id value) {
        this.identifier = ((IdImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TIMESTAMP__MESSAGEHEADER_HJID")
    public Instant getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Instant value) {
        this.timestamp = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENT_MESSAGEHEADER_HJID")
    public Coding getEvent() {
        return event;
    }

    public void setEvent(Coding value) {
        this.event = ((CodingImpl) value);
    }

    @ManyToOne(targetEntity = MessageHeaderResponse.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESPONSE_MESSAGEHEADER_HJID")
    public MessageHeaderResponse getResponse() {
        return response;
    }

    public void setResponse(MessageHeaderResponse value) {
        this.response = ((MessageHeaderResponseImpl) value);
    }

    @ManyToOne(targetEntity = MessageHeaderSource.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCE__MESSAGEHEADER_HJID")
    public MessageHeaderSource getSource() {
        return source;
    }

    public void setSource(MessageHeaderSource value) {
        this.source = ((MessageHeaderSourceImpl) value);
    }

    @OneToMany(targetEntity = MessageHeaderDestination.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESTINATIONS_MESSAGEHEADER_H_0")
    public List<MessageHeaderDestination> getDestinations() {
        if (destinations == null) {
            destinations = new ArrayList<MessageHeaderDestination>();
        }
        return this.destinations;
    }

    public void setDestinations(List<MessageHeaderDestination> destinations) {
        this.destinations = destinations;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENTERER_MESSAGEHEADER_HJID")
    public ResourceReference getEnterer() {
        return enterer;
    }

    public void setEnterer(ResourceReference value) {
        this.enterer = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHOR_MESSAGEHEADER_HJID")
    public ResourceReference getAuthor() {
        return author;
    }

    public void setAuthor(ResourceReference value) {
        this.author = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECEIVER_MESSAGEHEADER_HJID")
    public ResourceReference getReceiver() {
        return receiver;
    }

    public void setReceiver(ResourceReference value) {
        this.receiver = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESPONSIBLE_MESSAGEHEADER_HJ_0")
    public ResourceReference getResponsible() {
        return responsible;
    }

    public void setResponsible(ResourceReference value) {
        this.responsible = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_MESSAGEHEADER_HJID")
    public CodeableConcept getReason() {
        return reason;
    }

    public void setReason(CodeableConcept value) {
        this.reason = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATAS_MESSAGEHEADER_HJID")
    public List<ResourceReference> getDatas() {
        if (datas == null) {
            datas = new ArrayList<ResourceReference>();
        }
        return this.datas;
    }

    public void setDatas(List<ResourceReference> datas) {
        this.datas = datas;
    }

    public MessageHeaderImpl withIdentifier(Id value) {
        setIdentifier(value);
        return this;
    }

    public MessageHeaderImpl withTimestamp(Instant value) {
        setTimestamp(value);
        return this;
    }

    public MessageHeaderImpl withEvent(Coding value) {
        setEvent(value);
        return this;
    }

    public MessageHeaderImpl withResponse(MessageHeaderResponse value) {
        setResponse(value);
        return this;
    }

    public MessageHeaderImpl withSource(MessageHeaderSource value) {
        setSource(value);
        return this;
    }

    public MessageHeaderImpl withDestinations(MessageHeaderDestination... values) {
        if (values!= null) {
            for (MessageHeaderDestination value: values) {
                getDestinations().add(value);
            }
        }
        return this;
    }

    public MessageHeaderImpl withDestinations(Collection<MessageHeaderDestination> values) {
        if (values!= null) {
            getDestinations().addAll(values);
        }
        return this;
    }

    public MessageHeaderImpl withDestinations(List<MessageHeaderDestination> destinations) {
        setDestinations(destinations);
        return this;
    }

    public MessageHeaderImpl withEnterer(ResourceReference value) {
        setEnterer(value);
        return this;
    }

    public MessageHeaderImpl withAuthor(ResourceReference value) {
        setAuthor(value);
        return this;
    }

    public MessageHeaderImpl withReceiver(ResourceReference value) {
        setReceiver(value);
        return this;
    }

    public MessageHeaderImpl withResponsible(ResourceReference value) {
        setResponsible(value);
        return this;
    }

    public MessageHeaderImpl withReason(CodeableConcept value) {
        setReason(value);
        return this;
    }

    public MessageHeaderImpl withDatas(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getDatas().add(value);
            }
        }
        return this;
    }

    public MessageHeaderImpl withDatas(Collection<ResourceReference> values) {
        if (values!= null) {
            getDatas().addAll(values);
        }
        return this;
    }

    public MessageHeaderImpl withDatas(List<ResourceReference> datas) {
        setDatas(datas);
        return this;
    }

    @Override
    public MessageHeaderImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MessageHeaderImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MessageHeaderImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public MessageHeaderImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MessageHeaderImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MessageHeaderImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MessageHeaderImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MessageHeaderImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MessageHeaderImpl that = ((MessageHeaderImpl) object);
        {
            Id lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Id rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            Instant lhsTimestamp;
            lhsTimestamp = this.getTimestamp();
            Instant rhsTimestamp;
            rhsTimestamp = that.getTimestamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timestamp", lhsTimestamp), LocatorUtils.property(thatLocator, "timestamp", rhsTimestamp), lhsTimestamp, rhsTimestamp)) {
                return false;
            }
        }
        {
            Coding lhsEvent;
            lhsEvent = this.getEvent();
            Coding rhsEvent;
            rhsEvent = that.getEvent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "event", lhsEvent), LocatorUtils.property(thatLocator, "event", rhsEvent), lhsEvent, rhsEvent)) {
                return false;
            }
        }
        {
            MessageHeaderResponse lhsResponse;
            lhsResponse = this.getResponse();
            MessageHeaderResponse rhsResponse;
            rhsResponse = that.getResponse();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "response", lhsResponse), LocatorUtils.property(thatLocator, "response", rhsResponse), lhsResponse, rhsResponse)) {
                return false;
            }
        }
        {
            MessageHeaderSource lhsSource;
            lhsSource = this.getSource();
            MessageHeaderSource rhsSource;
            rhsSource = that.getSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "source", lhsSource), LocatorUtils.property(thatLocator, "source", rhsSource), lhsSource, rhsSource)) {
                return false;
            }
        }
        {
            List<MessageHeaderDestination> lhsDestinations;
            lhsDestinations = (((this.destinations!= null)&&(!this.destinations.isEmpty()))?this.getDestinations():null);
            List<MessageHeaderDestination> rhsDestinations;
            rhsDestinations = (((that.destinations!= null)&&(!that.destinations.isEmpty()))?that.getDestinations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "destinations", lhsDestinations), LocatorUtils.property(thatLocator, "destinations", rhsDestinations), lhsDestinations, rhsDestinations)) {
                return false;
            }
        }
        {
            ResourceReference lhsEnterer;
            lhsEnterer = this.getEnterer();
            ResourceReference rhsEnterer;
            rhsEnterer = that.getEnterer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enterer", lhsEnterer), LocatorUtils.property(thatLocator, "enterer", rhsEnterer), lhsEnterer, rhsEnterer)) {
                return false;
            }
        }
        {
            ResourceReference lhsAuthor;
            lhsAuthor = this.getAuthor();
            ResourceReference rhsAuthor;
            rhsAuthor = that.getAuthor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "author", lhsAuthor), LocatorUtils.property(thatLocator, "author", rhsAuthor), lhsAuthor, rhsAuthor)) {
                return false;
            }
        }
        {
            ResourceReference lhsReceiver;
            lhsReceiver = this.getReceiver();
            ResourceReference rhsReceiver;
            rhsReceiver = that.getReceiver();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receiver", lhsReceiver), LocatorUtils.property(thatLocator, "receiver", rhsReceiver), lhsReceiver, rhsReceiver)) {
                return false;
            }
        }
        {
            ResourceReference lhsResponsible;
            lhsResponsible = this.getResponsible();
            ResourceReference rhsResponsible;
            rhsResponsible = that.getResponsible();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "responsible", lhsResponsible), LocatorUtils.property(thatLocator, "responsible", rhsResponsible), lhsResponsible, rhsResponsible)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReason;
            lhsReason = this.getReason();
            CodeableConcept rhsReason;
            rhsReason = that.getReason();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsDatas;
            lhsDatas = (((this.datas!= null)&&(!this.datas.isEmpty()))?this.getDatas():null);
            List<ResourceReference> rhsDatas;
            rhsDatas = (((that.datas!= null)&&(!that.datas.isEmpty()))?that.getDatas():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "datas", lhsDatas), LocatorUtils.property(thatLocator, "datas", rhsDatas), lhsDatas, rhsDatas)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Id theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            Instant theTimestamp;
            theTimestamp = this.getTimestamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timestamp", theTimestamp), currentHashCode, theTimestamp);
        }
        {
            Coding theEvent;
            theEvent = this.getEvent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "event", theEvent), currentHashCode, theEvent);
        }
        {
            MessageHeaderResponse theResponse;
            theResponse = this.getResponse();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "response", theResponse), currentHashCode, theResponse);
        }
        {
            MessageHeaderSource theSource;
            theSource = this.getSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "source", theSource), currentHashCode, theSource);
        }
        {
            List<MessageHeaderDestination> theDestinations;
            theDestinations = (((this.destinations!= null)&&(!this.destinations.isEmpty()))?this.getDestinations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "destinations", theDestinations), currentHashCode, theDestinations);
        }
        {
            ResourceReference theEnterer;
            theEnterer = this.getEnterer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enterer", theEnterer), currentHashCode, theEnterer);
        }
        {
            ResourceReference theAuthor;
            theAuthor = this.getAuthor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "author", theAuthor), currentHashCode, theAuthor);
        }
        {
            ResourceReference theReceiver;
            theReceiver = this.getReceiver();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receiver", theReceiver), currentHashCode, theReceiver);
        }
        {
            ResourceReference theResponsible;
            theResponsible = this.getResponsible();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "responsible", theResponsible), currentHashCode, theResponsible);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            List<ResourceReference> theDatas;
            theDatas = (((this.datas!= null)&&(!this.datas.isEmpty()))?this.getDatas():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "datas", theDatas), currentHashCode, theDatas);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
