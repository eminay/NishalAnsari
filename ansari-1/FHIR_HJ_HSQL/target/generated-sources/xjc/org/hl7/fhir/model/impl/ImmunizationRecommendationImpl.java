//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.ImmunizationRecommendation;
import org.hl7.fhir.model.ImmunizationRecommendationRecommendation;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImmunizationRecommendation", propOrder = {
    "identifiers",
    "subject",
    "recommendations"
})
@XmlRootElement(name = "ImmunizationRecommendation")
public class ImmunizationRecommendationImpl
    extends ResourceImpl
    implements Serializable, ImmunizationRecommendation, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(name = "recommendation", required = true, type = ImmunizationRecommendationRecommendationImpl.class)
    protected List<ImmunizationRecommendationRecommendation> recommendations;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_IMMUNIZATIONRECO_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_IMMUNIZATIONRECOMMEN_0")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ImmunizationRecommendationRecommendation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECOMMENDATIONS_IMMUNIZATION_0")
    public List<ImmunizationRecommendationRecommendation> getRecommendations() {
        if (recommendations == null) {
            recommendations = new ArrayList<ImmunizationRecommendationRecommendation>();
        }
        return this.recommendations;
    }

    public void setRecommendations(List<ImmunizationRecommendationRecommendation> recommendations) {
        this.recommendations = recommendations;
    }

    public ImmunizationRecommendationImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public ImmunizationRecommendationImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public ImmunizationRecommendationImpl withRecommendations(ImmunizationRecommendationRecommendation... values) {
        if (values!= null) {
            for (ImmunizationRecommendationRecommendation value: values) {
                getRecommendations().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationImpl withRecommendations(Collection<ImmunizationRecommendationRecommendation> values) {
        if (values!= null) {
            getRecommendations().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationImpl withRecommendations(List<ImmunizationRecommendationRecommendation> recommendations) {
        setRecommendations(recommendations);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ImmunizationRecommendationImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImmunizationRecommendationImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImmunizationRecommendationImpl that = ((ImmunizationRecommendationImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            List<ImmunizationRecommendationRecommendation> lhsRecommendations;
            lhsRecommendations = (((this.recommendations!= null)&&(!this.recommendations.isEmpty()))?this.getRecommendations():null);
            List<ImmunizationRecommendationRecommendation> rhsRecommendations;
            rhsRecommendations = (((that.recommendations!= null)&&(!that.recommendations.isEmpty()))?that.getRecommendations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recommendations", lhsRecommendations), LocatorUtils.property(thatLocator, "recommendations", rhsRecommendations), lhsRecommendations, rhsRecommendations)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            List<ImmunizationRecommendationRecommendation> theRecommendations;
            theRecommendations = (((this.recommendations!= null)&&(!this.recommendations.isEmpty()))?this.getRecommendations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recommendations", theRecommendations), currentHashCode, theRecommendations);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
