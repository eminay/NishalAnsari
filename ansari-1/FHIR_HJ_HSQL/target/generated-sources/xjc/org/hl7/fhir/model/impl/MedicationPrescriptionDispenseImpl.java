//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.MedicationPrescriptionDispense;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.TimeDuration;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationPrescription.Dispense", propOrder = {
    "medication",
    "validityPeriod",
    "numberOfRepeatsAllowed",
    "quantity",
    "expectedSupplyDuration"
})
public class MedicationPrescriptionDispenseImpl
    extends BackboneElementImpl
    implements Serializable, MedicationPrescriptionDispense, Equals, HashCode
{

    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl medication;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl validityPeriod;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl numberOfRepeatsAllowed;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl quantity;
    @XmlElement(type = TimeDurationImpl.class)
    protected TimeDurationImpl expectedSupplyDuration;

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONPRESCRI_1")
    public ResourceReference getMedication() {
        return medication;
    }

    public void setMedication(ResourceReference value) {
        this.medication = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALIDITYPERIOD_MEDICATIONPRE_0")
    public Period getValidityPeriod() {
        return validityPeriod;
    }

    public void setValidityPeriod(Period value) {
        this.validityPeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NUMBEROFREPEATSALLOWED_MEDIC_0")
    public Integer getNumberOfRepeatsAllowed() {
        return numberOfRepeatsAllowed;
    }

    public void setNumberOfRepeatsAllowed(Integer value) {
        this.numberOfRepeatsAllowed = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUANTITY_MEDICATIONPRESCRIPT_0")
    public Quantity getQuantity() {
        return quantity;
    }

    public void setQuantity(Quantity value) {
        this.quantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = TimeDuration.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPECTEDSUPPLYDURATION_MEDIC_0")
    public TimeDuration getExpectedSupplyDuration() {
        return expectedSupplyDuration;
    }

    public void setExpectedSupplyDuration(TimeDuration value) {
        this.expectedSupplyDuration = ((TimeDurationImpl) value);
    }

    public MedicationPrescriptionDispenseImpl withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationPrescriptionDispenseImpl withValidityPeriod(Period value) {
        setValidityPeriod(value);
        return this;
    }

    public MedicationPrescriptionDispenseImpl withNumberOfRepeatsAllowed(Integer value) {
        setNumberOfRepeatsAllowed(value);
        return this;
    }

    public MedicationPrescriptionDispenseImpl withQuantity(Quantity value) {
        setQuantity(value);
        return this;
    }

    public MedicationPrescriptionDispenseImpl withExpectedSupplyDuration(TimeDuration value) {
        setExpectedSupplyDuration(value);
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationPrescriptionDispenseImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationPrescriptionDispenseImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationPrescriptionDispenseImpl that = ((MedicationPrescriptionDispenseImpl) object);
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            Period lhsValidityPeriod;
            lhsValidityPeriod = this.getValidityPeriod();
            Period rhsValidityPeriod;
            rhsValidityPeriod = that.getValidityPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "validityPeriod", lhsValidityPeriod), LocatorUtils.property(thatLocator, "validityPeriod", rhsValidityPeriod), lhsValidityPeriod, rhsValidityPeriod)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfRepeatsAllowed;
            lhsNumberOfRepeatsAllowed = this.getNumberOfRepeatsAllowed();
            Integer rhsNumberOfRepeatsAllowed;
            rhsNumberOfRepeatsAllowed = that.getNumberOfRepeatsAllowed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfRepeatsAllowed", lhsNumberOfRepeatsAllowed), LocatorUtils.property(thatLocator, "numberOfRepeatsAllowed", rhsNumberOfRepeatsAllowed), lhsNumberOfRepeatsAllowed, rhsNumberOfRepeatsAllowed)) {
                return false;
            }
        }
        {
            Quantity lhsQuantity;
            lhsQuantity = this.getQuantity();
            Quantity rhsQuantity;
            rhsQuantity = that.getQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
                return false;
            }
        }
        {
            TimeDuration lhsExpectedSupplyDuration;
            lhsExpectedSupplyDuration = this.getExpectedSupplyDuration();
            TimeDuration rhsExpectedSupplyDuration;
            rhsExpectedSupplyDuration = that.getExpectedSupplyDuration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expectedSupplyDuration", lhsExpectedSupplyDuration), LocatorUtils.property(thatLocator, "expectedSupplyDuration", rhsExpectedSupplyDuration), lhsExpectedSupplyDuration, rhsExpectedSupplyDuration)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            Period theValidityPeriod;
            theValidityPeriod = this.getValidityPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "validityPeriod", theValidityPeriod), currentHashCode, theValidityPeriod);
        }
        {
            Integer theNumberOfRepeatsAllowed;
            theNumberOfRepeatsAllowed = this.getNumberOfRepeatsAllowed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfRepeatsAllowed", theNumberOfRepeatsAllowed), currentHashCode, theNumberOfRepeatsAllowed);
        }
        {
            Quantity theQuantity;
            theQuantity = this.getQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
        }
        {
            TimeDuration theExpectedSupplyDuration;
            theExpectedSupplyDuration = this.getExpectedSupplyDuration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expectedSupplyDuration", theExpectedSupplyDuration), currentHashCode, theExpectedSupplyDuration);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
