//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.DeviceObservationReport;
import org.hl7.fhir.model.DeviceObservationReportVirtualDevice;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DeviceObservationReport", propOrder = {
    "instant",
    "identifier",
    "source",
    "subject",
    "virtualDevices"
})
@XmlRootElement(name = "DeviceObservationReport")
public class DeviceObservationReportImpl
    extends ResourceImpl
    implements Serializable, DeviceObservationReport, Equals, HashCode
{

    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl instant;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl source;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(name = "virtualDevice", type = DeviceObservationReportVirtualDeviceImpl.class)
    protected List<DeviceObservationReportVirtualDevice> virtualDevices;

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INSTANT_DEVICEOBSERVATIONREP_0")
    public Instant getInstant() {
        return instant;
    }

    public void setInstant(Instant value) {
        this.instant = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_DEVICEOBSERVATION_0")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCE__DEVICEOBSERVATIONREP_0")
    public ResourceReference getSource() {
        return source;
    }

    public void setSource(ResourceReference value) {
        this.source = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DEVICEOBSERVATIONREP_0")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = DeviceObservationReportVirtualDevice.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VIRTUALDEVICES_DEVICEOBSERVA_0")
    public List<DeviceObservationReportVirtualDevice> getVirtualDevices() {
        if (virtualDevices == null) {
            virtualDevices = new ArrayList<DeviceObservationReportVirtualDevice>();
        }
        return this.virtualDevices;
    }

    public void setVirtualDevices(List<DeviceObservationReportVirtualDevice> virtualDevices) {
        this.virtualDevices = virtualDevices;
    }

    public DeviceObservationReportImpl withInstant(Instant value) {
        setInstant(value);
        return this;
    }

    public DeviceObservationReportImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public DeviceObservationReportImpl withSource(ResourceReference value) {
        setSource(value);
        return this;
    }

    public DeviceObservationReportImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DeviceObservationReportImpl withVirtualDevices(DeviceObservationReportVirtualDevice... values) {
        if (values!= null) {
            for (DeviceObservationReportVirtualDevice value: values) {
                getVirtualDevices().add(value);
            }
        }
        return this;
    }

    public DeviceObservationReportImpl withVirtualDevices(Collection<DeviceObservationReportVirtualDevice> values) {
        if (values!= null) {
            getVirtualDevices().addAll(values);
        }
        return this;
    }

    public DeviceObservationReportImpl withVirtualDevices(List<DeviceObservationReportVirtualDevice> virtualDevices) {
        setVirtualDevices(virtualDevices);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DeviceObservationReportImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DeviceObservationReportImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DeviceObservationReportImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DeviceObservationReportImpl that = ((DeviceObservationReportImpl) object);
        {
            Instant lhsInstant;
            lhsInstant = this.getInstant();
            Instant rhsInstant;
            rhsInstant = that.getInstant();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instant", lhsInstant), LocatorUtils.property(thatLocator, "instant", rhsInstant), lhsInstant, rhsInstant)) {
                return false;
            }
        }
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsSource;
            lhsSource = this.getSource();
            ResourceReference rhsSource;
            rhsSource = that.getSource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "source", lhsSource), LocatorUtils.property(thatLocator, "source", rhsSource), lhsSource, rhsSource)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            List<DeviceObservationReportVirtualDevice> lhsVirtualDevices;
            lhsVirtualDevices = (((this.virtualDevices!= null)&&(!this.virtualDevices.isEmpty()))?this.getVirtualDevices():null);
            List<DeviceObservationReportVirtualDevice> rhsVirtualDevices;
            rhsVirtualDevices = (((that.virtualDevices!= null)&&(!that.virtualDevices.isEmpty()))?that.getVirtualDevices():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "virtualDevices", lhsVirtualDevices), LocatorUtils.property(thatLocator, "virtualDevices", rhsVirtualDevices), lhsVirtualDevices, rhsVirtualDevices)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Instant theInstant;
            theInstant = this.getInstant();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instant", theInstant), currentHashCode, theInstant);
        }
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            ResourceReference theSource;
            theSource = this.getSource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "source", theSource), currentHashCode, theSource);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            List<DeviceObservationReportVirtualDevice> theVirtualDevices;
            theVirtualDevices = (((this.virtualDevices!= null)&&(!this.virtualDevices.isEmpty()))?this.getVirtualDevices():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "virtualDevices", theVirtualDevices), currentHashCode, theVirtualDevices);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
