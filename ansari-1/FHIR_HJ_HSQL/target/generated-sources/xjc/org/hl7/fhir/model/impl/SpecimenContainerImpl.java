//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SpecimenContainer;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Specimen.Container", propOrder = {
    "identifiers",
    "description",
    "type",
    "capacity",
    "specimenQuantity",
    "additive"
})
public class SpecimenContainerImpl
    extends BackboneElementImpl
    implements Serializable, SpecimenContainer, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl capacity;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl specimenQuantity;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl additive;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_SPECIMENCONTAINE_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_SPECIMENCONTAINE_0")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SPECIMENCONTAINER_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CAPACITY_SPECIMENCONTAINER_H_0")
    public Quantity getCapacity() {
        return capacity;
    }

    public void setCapacity(Quantity value) {
        this.capacity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMENQUANTITY_SPECIMENCON_0")
    public Quantity getSpecimenQuantity() {
        return specimenQuantity;
    }

    public void setSpecimenQuantity(Quantity value) {
        this.specimenQuantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDITIVE_SPECIMENCONTAINER_H_0")
    public ResourceReference getAdditive() {
        return additive;
    }

    public void setAdditive(ResourceReference value) {
        this.additive = ((ResourceReferenceImpl) value);
    }

    public SpecimenContainerImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public SpecimenContainerImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public SpecimenContainerImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public SpecimenContainerImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public SpecimenContainerImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public SpecimenContainerImpl withCapacity(Quantity value) {
        setCapacity(value);
        return this;
    }

    public SpecimenContainerImpl withSpecimenQuantity(Quantity value) {
        setSpecimenQuantity(value);
        return this;
    }

    public SpecimenContainerImpl withAdditive(ResourceReference value) {
        setAdditive(value);
        return this;
    }

    @Override
    public SpecimenContainerImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenContainerImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenContainerImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SpecimenContainerImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenContainerImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenContainerImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SpecimenContainerImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecimenContainerImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SpecimenContainerImpl that = ((SpecimenContainerImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            Quantity lhsCapacity;
            lhsCapacity = this.getCapacity();
            Quantity rhsCapacity;
            rhsCapacity = that.getCapacity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "capacity", lhsCapacity), LocatorUtils.property(thatLocator, "capacity", rhsCapacity), lhsCapacity, rhsCapacity)) {
                return false;
            }
        }
        {
            Quantity lhsSpecimenQuantity;
            lhsSpecimenQuantity = this.getSpecimenQuantity();
            Quantity rhsSpecimenQuantity;
            rhsSpecimenQuantity = that.getSpecimenQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimenQuantity", lhsSpecimenQuantity), LocatorUtils.property(thatLocator, "specimenQuantity", rhsSpecimenQuantity), lhsSpecimenQuantity, rhsSpecimenQuantity)) {
                return false;
            }
        }
        {
            ResourceReference lhsAdditive;
            lhsAdditive = this.getAdditive();
            ResourceReference rhsAdditive;
            rhsAdditive = that.getAdditive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "additive", lhsAdditive), LocatorUtils.property(thatLocator, "additive", rhsAdditive), lhsAdditive, rhsAdditive)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            Quantity theCapacity;
            theCapacity = this.getCapacity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "capacity", theCapacity), currentHashCode, theCapacity);
        }
        {
            Quantity theSpecimenQuantity;
            theSpecimenQuantity = this.getSpecimenQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimenQuantity", theSpecimenQuantity), currentHashCode, theSpecimenQuantity);
        }
        {
            ResourceReference theAdditive;
            theAdditive = this.getAdditive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "additive", theAdditive), currentHashCode, theAdditive);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
