//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ImagingStudyInstance;
import org.hl7.fhir.model.ImagingStudySeries;
import org.hl7.fhir.model.InstanceAvailability;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Modality;
import org.hl7.fhir.model.Oid;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImagingStudy.Series", propOrder = {
    "number",
    "modality",
    "uid",
    "description",
    "numberOfInstances",
    "availability",
    "url",
    "bodySite",
    "dateTime",
    "instances"
})
public class ImagingStudySeriesImpl
    extends BackboneElementImpl
    implements Serializable, ImagingStudySeries, Equals, HashCode
{

    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl number;
    @XmlElement(required = true, type = ModalityImpl.class)
    protected ModalityImpl modality;
    @XmlElement(required = true, type = OidImpl.class)
    protected OidImpl uid;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(required = true, type = IntegerImpl.class)
    protected IntegerImpl numberOfInstances;
    @XmlElement(type = InstanceAvailabilityImpl.class)
    protected InstanceAvailabilityImpl availability;
    @XmlElement(type = UriImpl.class)
    protected UriImpl url;
    @XmlElement(type = CodingImpl.class)
    protected CodingImpl bodySite;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dateTime;
    @XmlElement(name = "instance", required = true, type = ImagingStudyInstanceImpl.class)
    protected List<ImagingStudyInstance> instances;

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NUMBER__IMAGINGSTUDYSERIES_H_0")
    public Integer getNumber() {
        return number;
    }

    public void setNumber(Integer value) {
        this.number = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Modality.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODALITY_IMAGINGSTUDYSERIES__0")
    public Modality getModality() {
        return modality;
    }

    public void setModality(Modality value) {
        this.modality = ((ModalityImpl) value);
    }

    @ManyToOne(targetEntity = Oid.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UID__IMAGINGSTUDYSERIES_HJID")
    public Oid getUid() {
        return uid;
    }

    public void setUid(Oid value) {
        this.uid = ((OidImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_IMAGINGSTUDYSERI_0")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NUMBEROFINSTANCES_IMAGINGSTU_1")
    public Integer getNumberOfInstances() {
        return numberOfInstances;
    }

    public void setNumberOfInstances(Integer value) {
        this.numberOfInstances = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = InstanceAvailability.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AVAILABILITY_IMAGINGSTUDYSER_0")
    public InstanceAvailability getAvailability() {
        return availability;
    }

    public void setAvailability(InstanceAvailability value) {
        this.availability = ((InstanceAvailabilityImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "URL_IMAGINGSTUDYSERIES_HJID")
    public Uri getUrl() {
        return url;
    }

    public void setUrl(Uri value) {
        this.url = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BODYSITE_IMAGINGSTUDYSERIES__0")
    public Coding getBodySite() {
        return bodySite;
    }

    public void setBodySite(Coding value) {
        this.bodySite = ((CodingImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATETIME_IMAGINGSTUDYSERIES__0")
    public DateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(DateTime value) {
        this.dateTime = ((DateTimeImpl) value);
    }

    @OneToMany(targetEntity = ImagingStudyInstance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INSTANCES_IMAGINGSTUDYSERIES_0")
    public List<ImagingStudyInstance> getInstances() {
        if (instances == null) {
            instances = new ArrayList<ImagingStudyInstance>();
        }
        return this.instances;
    }

    public void setInstances(List<ImagingStudyInstance> instances) {
        this.instances = instances;
    }

    public ImagingStudySeriesImpl withNumber(Integer value) {
        setNumber(value);
        return this;
    }

    public ImagingStudySeriesImpl withModality(Modality value) {
        setModality(value);
        return this;
    }

    public ImagingStudySeriesImpl withUid(Oid value) {
        setUid(value);
        return this;
    }

    public ImagingStudySeriesImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public ImagingStudySeriesImpl withNumberOfInstances(Integer value) {
        setNumberOfInstances(value);
        return this;
    }

    public ImagingStudySeriesImpl withAvailability(InstanceAvailability value) {
        setAvailability(value);
        return this;
    }

    public ImagingStudySeriesImpl withUrl(Uri value) {
        setUrl(value);
        return this;
    }

    public ImagingStudySeriesImpl withBodySite(Coding value) {
        setBodySite(value);
        return this;
    }

    public ImagingStudySeriesImpl withDateTime(DateTime value) {
        setDateTime(value);
        return this;
    }

    public ImagingStudySeriesImpl withInstances(ImagingStudyInstance... values) {
        if (values!= null) {
            for (ImagingStudyInstance value: values) {
                getInstances().add(value);
            }
        }
        return this;
    }

    public ImagingStudySeriesImpl withInstances(Collection<ImagingStudyInstance> values) {
        if (values!= null) {
            getInstances().addAll(values);
        }
        return this;
    }

    public ImagingStudySeriesImpl withInstances(List<ImagingStudyInstance> instances) {
        setInstances(instances);
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ImagingStudySeriesImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImagingStudySeriesImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImagingStudySeriesImpl that = ((ImagingStudySeriesImpl) object);
        {
            Integer lhsNumber;
            lhsNumber = this.getNumber();
            Integer rhsNumber;
            rhsNumber = that.getNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "number", lhsNumber), LocatorUtils.property(thatLocator, "number", rhsNumber), lhsNumber, rhsNumber)) {
                return false;
            }
        }
        {
            Modality lhsModality;
            lhsModality = this.getModality();
            Modality rhsModality;
            rhsModality = that.getModality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modality", lhsModality), LocatorUtils.property(thatLocator, "modality", rhsModality), lhsModality, rhsModality)) {
                return false;
            }
        }
        {
            Oid lhsUid;
            lhsUid = this.getUid();
            Oid rhsUid;
            rhsUid = that.getUid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uid", lhsUid), LocatorUtils.property(thatLocator, "uid", rhsUid), lhsUid, rhsUid)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            Integer lhsNumberOfInstances;
            lhsNumberOfInstances = this.getNumberOfInstances();
            Integer rhsNumberOfInstances;
            rhsNumberOfInstances = that.getNumberOfInstances();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "numberOfInstances", lhsNumberOfInstances), LocatorUtils.property(thatLocator, "numberOfInstances", rhsNumberOfInstances), lhsNumberOfInstances, rhsNumberOfInstances)) {
                return false;
            }
        }
        {
            InstanceAvailability lhsAvailability;
            lhsAvailability = this.getAvailability();
            InstanceAvailability rhsAvailability;
            rhsAvailability = that.getAvailability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "availability", lhsAvailability), LocatorUtils.property(thatLocator, "availability", rhsAvailability), lhsAvailability, rhsAvailability)) {
                return false;
            }
        }
        {
            Uri lhsUrl;
            lhsUrl = this.getUrl();
            Uri rhsUrl;
            rhsUrl = that.getUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "url", lhsUrl), LocatorUtils.property(thatLocator, "url", rhsUrl), lhsUrl, rhsUrl)) {
                return false;
            }
        }
        {
            Coding lhsBodySite;
            lhsBodySite = this.getBodySite();
            Coding rhsBodySite;
            rhsBodySite = that.getBodySite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bodySite", lhsBodySite), LocatorUtils.property(thatLocator, "bodySite", rhsBodySite), lhsBodySite, rhsBodySite)) {
                return false;
            }
        }
        {
            DateTime lhsDateTime;
            lhsDateTime = this.getDateTime();
            DateTime rhsDateTime;
            rhsDateTime = that.getDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                return false;
            }
        }
        {
            List<ImagingStudyInstance> lhsInstances;
            lhsInstances = (((this.instances!= null)&&(!this.instances.isEmpty()))?this.getInstances():null);
            List<ImagingStudyInstance> rhsInstances;
            rhsInstances = (((that.instances!= null)&&(!that.instances.isEmpty()))?that.getInstances():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instances", lhsInstances), LocatorUtils.property(thatLocator, "instances", rhsInstances), lhsInstances, rhsInstances)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Integer theNumber;
            theNumber = this.getNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "number", theNumber), currentHashCode, theNumber);
        }
        {
            Modality theModality;
            theModality = this.getModality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modality", theModality), currentHashCode, theModality);
        }
        {
            Oid theUid;
            theUid = this.getUid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uid", theUid), currentHashCode, theUid);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            Integer theNumberOfInstances;
            theNumberOfInstances = this.getNumberOfInstances();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "numberOfInstances", theNumberOfInstances), currentHashCode, theNumberOfInstances);
        }
        {
            InstanceAvailability theAvailability;
            theAvailability = this.getAvailability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "availability", theAvailability), currentHashCode, theAvailability);
        }
        {
            Uri theUrl;
            theUrl = this.getUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "url", theUrl), currentHashCode, theUrl);
        }
        {
            Coding theBodySite;
            theBodySite = this.getBodySite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bodySite", theBodySite), currentHashCode, theBodySite);
        }
        {
            DateTime theDateTime;
            theDateTime = this.getDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
        }
        {
            List<ImagingStudyInstance> theInstances;
            theInstances = (((this.instances!= null)&&(!this.instances.isEmpty()))?this.getInstances():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instances", theInstances), currentHashCode, theInstances);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
