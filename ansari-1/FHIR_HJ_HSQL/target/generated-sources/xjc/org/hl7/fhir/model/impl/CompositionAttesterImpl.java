//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CompositionAttestationMode;
import org.hl7.fhir.model.CompositionAttester;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Composition.Attester", propOrder = {
    "modes",
    "time",
    "party"
})
public class CompositionAttesterImpl
    extends BackboneElementImpl
    implements Serializable, CompositionAttester, Equals, HashCode
{

    @XmlElement(name = "mode", required = true, type = CompositionAttestationModeImpl.class)
    protected List<CompositionAttestationMode> modes;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl time;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl party;

    @OneToMany(targetEntity = CompositionAttestationMode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODES_COMPOSITIONATTESTER_HJ_0")
    public List<CompositionAttestationMode> getModes() {
        if (modes == null) {
            modes = new ArrayList<CompositionAttestationMode>();
        }
        return this.modes;
    }

    public void setModes(List<CompositionAttestationMode> modes) {
        this.modes = modes;
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TIME__COMPOSITIONATTESTER_HJ_0")
    public DateTime getTime() {
        return time;
    }

    public void setTime(DateTime value) {
        this.time = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTY_COMPOSITIONATTESTER_HJ_0")
    public ResourceReference getParty() {
        return party;
    }

    public void setParty(ResourceReference value) {
        this.party = ((ResourceReferenceImpl) value);
    }

    public CompositionAttesterImpl withModes(CompositionAttestationMode... values) {
        if (values!= null) {
            for (CompositionAttestationMode value: values) {
                getModes().add(value);
            }
        }
        return this;
    }

    public CompositionAttesterImpl withModes(Collection<CompositionAttestationMode> values) {
        if (values!= null) {
            getModes().addAll(values);
        }
        return this;
    }

    public CompositionAttesterImpl withModes(List<CompositionAttestationMode> modes) {
        setModes(modes);
        return this;
    }

    public CompositionAttesterImpl withTime(DateTime value) {
        setTime(value);
        return this;
    }

    public CompositionAttesterImpl withParty(ResourceReference value) {
        setParty(value);
        return this;
    }

    @Override
    public CompositionAttesterImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CompositionAttesterImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CompositionAttesterImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public CompositionAttesterImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CompositionAttesterImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CompositionAttesterImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public CompositionAttesterImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CompositionAttesterImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CompositionAttesterImpl that = ((CompositionAttesterImpl) object);
        {
            List<CompositionAttestationMode> lhsModes;
            lhsModes = (((this.modes!= null)&&(!this.modes.isEmpty()))?this.getModes():null);
            List<CompositionAttestationMode> rhsModes;
            rhsModes = (((that.modes!= null)&&(!that.modes.isEmpty()))?that.getModes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modes", lhsModes), LocatorUtils.property(thatLocator, "modes", rhsModes), lhsModes, rhsModes)) {
                return false;
            }
        }
        {
            DateTime lhsTime;
            lhsTime = this.getTime();
            DateTime rhsTime;
            rhsTime = that.getTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "time", lhsTime), LocatorUtils.property(thatLocator, "time", rhsTime), lhsTime, rhsTime)) {
                return false;
            }
        }
        {
            ResourceReference lhsParty;
            lhsParty = this.getParty();
            ResourceReference rhsParty;
            rhsParty = that.getParty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "party", lhsParty), LocatorUtils.property(thatLocator, "party", rhsParty), lhsParty, rhsParty)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CompositionAttestationMode> theModes;
            theModes = (((this.modes!= null)&&(!this.modes.isEmpty()))?this.getModes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modes", theModes), currentHashCode, theModes);
        }
        {
            DateTime theTime;
            theTime = this.getTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "time", theTime), currentHashCode, theTime);
        }
        {
            ResourceReference theParty;
            theParty = this.getParty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "party", theParty), currentHashCode, theParty);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
