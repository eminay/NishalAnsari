//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Procedure;
import org.hl7.fhir.model.ProcedurePerformer;
import org.hl7.fhir.model.ProcedureRelatedItem;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Procedure", propOrder = {
    "identifiers",
    "subject",
    "type",
    "bodySites",
    "indications",
    "performers",
    "date",
    "encounter",
    "outcome",
    "reports",
    "complications",
    "followUp",
    "relatedItems",
    "notes"
})
@XmlRootElement(name = "Procedure")
public class ProcedureImpl
    extends ResourceImpl
    implements Serializable, Procedure, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "bodySite", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> bodySites;
    @XmlElement(name = "indication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> indications;
    @XmlElement(name = "performer", type = ProcedurePerformerImpl.class)
    protected List<ProcedurePerformer> performers;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl date;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl outcome;
    @XmlElement(name = "report", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> reports;
    @XmlElement(name = "complication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> complications;
    @XmlElement(type = StringImpl.class)
    protected StringImpl followUp;
    @XmlElement(name = "relatedItem", type = ProcedureRelatedItemImpl.class)
    protected List<ProcedureRelatedItem> relatedItems;
    @XmlElement(type = StringImpl.class)
    protected StringImpl notes;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_PROCEDURE__HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_PROCEDURE__HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__PROCEDURE__HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BODYSITES_PROCEDURE__HJID")
    public List<CodeableConcept> getBodySites() {
        if (bodySites == null) {
            bodySites = new ArrayList<CodeableConcept>();
        }
        return this.bodySites;
    }

    public void setBodySites(List<CodeableConcept> bodySites) {
        this.bodySites = bodySites;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDICATIONS_PROCEDURE__HJID")
    public List<CodeableConcept> getIndications() {
        if (indications == null) {
            indications = new ArrayList<CodeableConcept>();
        }
        return this.indications;
    }

    public void setIndications(List<CodeableConcept> indications) {
        this.indications = indications;
    }

    @OneToMany(targetEntity = ProcedurePerformer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERFORMERS_PROCEDURE__HJID")
    public List<ProcedurePerformer> getPerformers() {
        if (performers == null) {
            performers = new ArrayList<ProcedurePerformer>();
        }
        return this.performers;
    }

    public void setPerformers(List<ProcedurePerformer> performers) {
        this.performers = performers;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__PROCEDURE__HJID")
    public Period getDate() {
        return date;
    }

    public void setDate(Period value) {
        this.date = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_PROCEDURE__HJID")
    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OUTCOME_PROCEDURE__HJID")
    public org.hl7.fhir.model.String getOutcome() {
        return outcome;
    }

    public void setOutcome(org.hl7.fhir.model.String value) {
        this.outcome = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REPORTS_PROCEDURE__HJID")
    public List<ResourceReference> getReports() {
        if (reports == null) {
            reports = new ArrayList<ResourceReference>();
        }
        return this.reports;
    }

    public void setReports(List<ResourceReference> reports) {
        this.reports = reports;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMPLICATIONS_PROCEDURE__HJID")
    public List<CodeableConcept> getComplications() {
        if (complications == null) {
            complications = new ArrayList<CodeableConcept>();
        }
        return this.complications;
    }

    public void setComplications(List<CodeableConcept> complications) {
        this.complications = complications;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FOLLOWUP_PROCEDURE__HJID")
    public org.hl7.fhir.model.String getFollowUp() {
        return followUp;
    }

    public void setFollowUp(org.hl7.fhir.model.String value) {
        this.followUp = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ProcedureRelatedItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATEDITEMS_PROCEDURE__HJID")
    public List<ProcedureRelatedItem> getRelatedItems() {
        if (relatedItems == null) {
            relatedItems = new ArrayList<ProcedureRelatedItem>();
        }
        return this.relatedItems;
    }

    public void setRelatedItems(List<ProcedureRelatedItem> relatedItems) {
        this.relatedItems = relatedItems;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NOTES_PROCEDURE__HJID")
    public org.hl7.fhir.model.String getNotes() {
        return notes;
    }

    public void setNotes(org.hl7.fhir.model.String value) {
        this.notes = ((StringImpl) value);
    }

    public ProcedureImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public ProcedureImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public ProcedureImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public ProcedureImpl withBodySites(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getBodySites().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withBodySites(Collection<CodeableConcept> values) {
        if (values!= null) {
            getBodySites().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withBodySites(List<CodeableConcept> bodySites) {
        setBodySites(bodySites);
        return this;
    }

    public ProcedureImpl withIndications(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getIndications().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withIndications(Collection<CodeableConcept> values) {
        if (values!= null) {
            getIndications().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withIndications(List<CodeableConcept> indications) {
        setIndications(indications);
        return this;
    }

    public ProcedureImpl withPerformers(ProcedurePerformer... values) {
        if (values!= null) {
            for (ProcedurePerformer value: values) {
                getPerformers().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withPerformers(Collection<ProcedurePerformer> values) {
        if (values!= null) {
            getPerformers().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withPerformers(List<ProcedurePerformer> performers) {
        setPerformers(performers);
        return this;
    }

    public ProcedureImpl withDate(Period value) {
        setDate(value);
        return this;
    }

    public ProcedureImpl withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public ProcedureImpl withOutcome(org.hl7.fhir.model.String value) {
        setOutcome(value);
        return this;
    }

    public ProcedureImpl withReports(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getReports().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withReports(Collection<ResourceReference> values) {
        if (values!= null) {
            getReports().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withReports(List<ResourceReference> reports) {
        setReports(reports);
        return this;
    }

    public ProcedureImpl withComplications(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getComplications().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withComplications(Collection<CodeableConcept> values) {
        if (values!= null) {
            getComplications().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withComplications(List<CodeableConcept> complications) {
        setComplications(complications);
        return this;
    }

    public ProcedureImpl withFollowUp(org.hl7.fhir.model.String value) {
        setFollowUp(value);
        return this;
    }

    public ProcedureImpl withRelatedItems(ProcedureRelatedItem... values) {
        if (values!= null) {
            for (ProcedureRelatedItem value: values) {
                getRelatedItems().add(value);
            }
        }
        return this;
    }

    public ProcedureImpl withRelatedItems(Collection<ProcedureRelatedItem> values) {
        if (values!= null) {
            getRelatedItems().addAll(values);
        }
        return this;
    }

    public ProcedureImpl withRelatedItems(List<ProcedureRelatedItem> relatedItems) {
        setRelatedItems(relatedItems);
        return this;
    }

    public ProcedureImpl withNotes(org.hl7.fhir.model.String value) {
        setNotes(value);
        return this;
    }

    @Override
    public ProcedureImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ProcedureImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ProcedureImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ProcedureImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ProcedureImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ProcedureImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProcedureImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProcedureImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProcedureImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProcedureImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProcedureImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProcedureImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProcedureImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProcedureImpl that = ((ProcedureImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsBodySites;
            lhsBodySites = (((this.bodySites!= null)&&(!this.bodySites.isEmpty()))?this.getBodySites():null);
            List<CodeableConcept> rhsBodySites;
            rhsBodySites = (((that.bodySites!= null)&&(!that.bodySites.isEmpty()))?that.getBodySites():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bodySites", lhsBodySites), LocatorUtils.property(thatLocator, "bodySites", rhsBodySites), lhsBodySites, rhsBodySites)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsIndications;
            lhsIndications = (((this.indications!= null)&&(!this.indications.isEmpty()))?this.getIndications():null);
            List<CodeableConcept> rhsIndications;
            rhsIndications = (((that.indications!= null)&&(!that.indications.isEmpty()))?that.getIndications():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indications", lhsIndications), LocatorUtils.property(thatLocator, "indications", rhsIndications), lhsIndications, rhsIndications)) {
                return false;
            }
        }
        {
            List<ProcedurePerformer> lhsPerformers;
            lhsPerformers = (((this.performers!= null)&&(!this.performers.isEmpty()))?this.getPerformers():null);
            List<ProcedurePerformer> rhsPerformers;
            rhsPerformers = (((that.performers!= null)&&(!that.performers.isEmpty()))?that.getPerformers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "performers", lhsPerformers), LocatorUtils.property(thatLocator, "performers", rhsPerformers), lhsPerformers, rhsPerformers)) {
                return false;
            }
        }
        {
            Period lhsDate;
            lhsDate = this.getDate();
            Period rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsOutcome;
            lhsOutcome = this.getOutcome();
            org.hl7.fhir.model.String rhsOutcome;
            rhsOutcome = that.getOutcome();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outcome", lhsOutcome), LocatorUtils.property(thatLocator, "outcome", rhsOutcome), lhsOutcome, rhsOutcome)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsReports;
            lhsReports = (((this.reports!= null)&&(!this.reports.isEmpty()))?this.getReports():null);
            List<ResourceReference> rhsReports;
            rhsReports = (((that.reports!= null)&&(!that.reports.isEmpty()))?that.getReports():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reports", lhsReports), LocatorUtils.property(thatLocator, "reports", rhsReports), lhsReports, rhsReports)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsComplications;
            lhsComplications = (((this.complications!= null)&&(!this.complications.isEmpty()))?this.getComplications():null);
            List<CodeableConcept> rhsComplications;
            rhsComplications = (((that.complications!= null)&&(!that.complications.isEmpty()))?that.getComplications():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "complications", lhsComplications), LocatorUtils.property(thatLocator, "complications", rhsComplications), lhsComplications, rhsComplications)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsFollowUp;
            lhsFollowUp = this.getFollowUp();
            org.hl7.fhir.model.String rhsFollowUp;
            rhsFollowUp = that.getFollowUp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "followUp", lhsFollowUp), LocatorUtils.property(thatLocator, "followUp", rhsFollowUp), lhsFollowUp, rhsFollowUp)) {
                return false;
            }
        }
        {
            List<ProcedureRelatedItem> lhsRelatedItems;
            lhsRelatedItems = (((this.relatedItems!= null)&&(!this.relatedItems.isEmpty()))?this.getRelatedItems():null);
            List<ProcedureRelatedItem> rhsRelatedItems;
            rhsRelatedItems = (((that.relatedItems!= null)&&(!that.relatedItems.isEmpty()))?that.getRelatedItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedItems", lhsRelatedItems), LocatorUtils.property(thatLocator, "relatedItems", rhsRelatedItems), lhsRelatedItems, rhsRelatedItems)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsNotes;
            lhsNotes = this.getNotes();
            org.hl7.fhir.model.String rhsNotes;
            rhsNotes = that.getNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            List<CodeableConcept> theBodySites;
            theBodySites = (((this.bodySites!= null)&&(!this.bodySites.isEmpty()))?this.getBodySites():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bodySites", theBodySites), currentHashCode, theBodySites);
        }
        {
            List<CodeableConcept> theIndications;
            theIndications = (((this.indications!= null)&&(!this.indications.isEmpty()))?this.getIndications():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indications", theIndications), currentHashCode, theIndications);
        }
        {
            List<ProcedurePerformer> thePerformers;
            thePerformers = (((this.performers!= null)&&(!this.performers.isEmpty()))?this.getPerformers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "performers", thePerformers), currentHashCode, thePerformers);
        }
        {
            Period theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            org.hl7.fhir.model.String theOutcome;
            theOutcome = this.getOutcome();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outcome", theOutcome), currentHashCode, theOutcome);
        }
        {
            List<ResourceReference> theReports;
            theReports = (((this.reports!= null)&&(!this.reports.isEmpty()))?this.getReports():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reports", theReports), currentHashCode, theReports);
        }
        {
            List<CodeableConcept> theComplications;
            theComplications = (((this.complications!= null)&&(!this.complications.isEmpty()))?this.getComplications():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "complications", theComplications), currentHashCode, theComplications);
        }
        {
            org.hl7.fhir.model.String theFollowUp;
            theFollowUp = this.getFollowUp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "followUp", theFollowUp), currentHashCode, theFollowUp);
        }
        {
            List<ProcedureRelatedItem> theRelatedItems;
            theRelatedItems = (((this.relatedItems!= null)&&(!this.relatedItems.isEmpty()))?this.getRelatedItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedItems", theRelatedItems), currentHashCode, theRelatedItems);
        }
        {
            org.hl7.fhir.model.String theNotes;
            theNotes = this.getNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
