//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Uri;
import org.hl7.fhir.model.ValueSetConcept;
import org.hl7.fhir.model.ValueSetDefine;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValueSet.Define", propOrder = {
    "system",
    "version",
    "caseSensitive",
    "concepts"
})
public class ValueSetDefineImpl
    extends BackboneElementImpl
    implements Serializable, ValueSetDefine, Equals, HashCode
{

    @XmlElement(required = true, type = UriImpl.class)
    protected UriImpl system;
    @XmlElement(type = StringImpl.class)
    protected StringImpl version;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl caseSensitive;
    @XmlElement(name = "concept", type = ValueSetConceptImpl.class)
    protected List<ValueSetConcept> concepts;

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__VALUESETDEFINE_HJID")
    public Uri getSystem() {
        return system;
    }

    public void setSystem(Uri value) {
        this.system = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__VALUESETDEFINE_HJID")
    public org.hl7.fhir.model.String getVersion() {
        return version;
    }

    public void setVersion(org.hl7.fhir.model.String value) {
        this.version = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CASESENSITIVE_VALUESETDEFINE_0")
    public Boolean getCaseSensitive() {
        return caseSensitive;
    }

    public void setCaseSensitive(Boolean value) {
        this.caseSensitive = ((BooleanImpl) value);
    }

    @OneToMany(targetEntity = ValueSetConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCEPTS_VALUESETDEFINE_HJID")
    public List<ValueSetConcept> getConcepts() {
        if (concepts == null) {
            concepts = new ArrayList<ValueSetConcept>();
        }
        return this.concepts;
    }

    public void setConcepts(List<ValueSetConcept> concepts) {
        this.concepts = concepts;
    }

    public ValueSetDefineImpl withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ValueSetDefineImpl withVersion(org.hl7.fhir.model.String value) {
        setVersion(value);
        return this;
    }

    public ValueSetDefineImpl withCaseSensitive(Boolean value) {
        setCaseSensitive(value);
        return this;
    }

    public ValueSetDefineImpl withConcepts(ValueSetConcept... values) {
        if (values!= null) {
            for (ValueSetConcept value: values) {
                getConcepts().add(value);
            }
        }
        return this;
    }

    public ValueSetDefineImpl withConcepts(Collection<ValueSetConcept> values) {
        if (values!= null) {
            getConcepts().addAll(values);
        }
        return this;
    }

    public ValueSetDefineImpl withConcepts(List<ValueSetConcept> concepts) {
        setConcepts(concepts);
        return this;
    }

    @Override
    public ValueSetDefineImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetDefineImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetDefineImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ValueSetDefineImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetDefineImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetDefineImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ValueSetDefineImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValueSetDefineImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ValueSetDefineImpl that = ((ValueSetDefineImpl) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.model.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            Boolean lhsCaseSensitive;
            lhsCaseSensitive = this.getCaseSensitive();
            Boolean rhsCaseSensitive;
            rhsCaseSensitive = that.getCaseSensitive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "caseSensitive", lhsCaseSensitive), LocatorUtils.property(thatLocator, "caseSensitive", rhsCaseSensitive), lhsCaseSensitive, rhsCaseSensitive)) {
                return false;
            }
        }
        {
            List<ValueSetConcept> lhsConcepts;
            lhsConcepts = (((this.concepts!= null)&&(!this.concepts.isEmpty()))?this.getConcepts():null);
            List<ValueSetConcept> rhsConcepts;
            rhsConcepts = (((that.concepts!= null)&&(!that.concepts.isEmpty()))?that.getConcepts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concepts", lhsConcepts), LocatorUtils.property(thatLocator, "concepts", rhsConcepts), lhsConcepts, rhsConcepts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            org.hl7.fhir.model.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            Boolean theCaseSensitive;
            theCaseSensitive = this.getCaseSensitive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "caseSensitive", theCaseSensitive), currentHashCode, theCaseSensitive);
        }
        {
            List<ValueSetConcept> theConcepts;
            theConcepts = (((this.concepts!= null)&&(!this.concepts.isEmpty()))?this.getConcepts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concepts", theConcepts), currentHashCode, theConcepts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
