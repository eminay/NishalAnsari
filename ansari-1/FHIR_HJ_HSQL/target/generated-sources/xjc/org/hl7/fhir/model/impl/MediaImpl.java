//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Media;
import org.hl7.fhir.model.MediaType;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Media", propOrder = {
    "type",
    "subtype",
    "identifiers",
    "dateTime",
    "subject",
    "operator",
    "view",
    "deviceName",
    "height",
    "width",
    "frames",
    "length",
    "content"
})
@XmlRootElement(name = "Media")
public class MediaImpl
    extends ResourceImpl
    implements Serializable, Media, Equals, HashCode
{

    @XmlElement(required = true, type = MediaTypeImpl.class)
    protected MediaTypeImpl type;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl subtype;
    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dateTime;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl operator;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl view;
    @XmlElement(type = StringImpl.class)
    protected StringImpl deviceName;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl height;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl width;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl frames;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl length;
    @XmlElement(required = true, type = AttachmentImpl.class)
    protected AttachmentImpl content;

    @ManyToOne(targetEntity = MediaType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__MEDIA_HJID")
    public MediaType getType() {
        return type;
    }

    public void setType(MediaType value) {
        this.type = ((MediaTypeImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBTYPE_MEDIA_HJID")
    public CodeableConcept getSubtype() {
        return subtype;
    }

    public void setSubtype(CodeableConcept value) {
        this.subtype = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_MEDIA_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATETIME_MEDIA_HJID")
    public DateTime getDateTime() {
        return dateTime;
    }

    public void setDateTime(DateTime value) {
        this.dateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_MEDIA_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPERATOR__MEDIA_HJID")
    public ResourceReference getOperator() {
        return operator;
    }

    public void setOperator(ResourceReference value) {
        this.operator = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VIEW__MEDIA_HJID")
    public CodeableConcept getView() {
        return view;
    }

    public void setView(CodeableConcept value) {
        this.view = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEVICENAME_MEDIA_HJID")
    public org.hl7.fhir.model.String getDeviceName() {
        return deviceName;
    }

    public void setDeviceName(org.hl7.fhir.model.String value) {
        this.deviceName = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HEIGHT_MEDIA_HJID")
    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer value) {
        this.height = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WIDTH_MEDIA_HJID")
    public Integer getWidth() {
        return width;
    }

    public void setWidth(Integer value) {
        this.width = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FRAMES_MEDIA_HJID")
    public Integer getFrames() {
        return frames;
    }

    public void setFrames(Integer value) {
        this.frames = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LENGTH__MEDIA_HJID")
    public Integer getLength() {
        return length;
    }

    public void setLength(Integer value) {
        this.length = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTENT_MEDIA_HJID")
    public Attachment getContent() {
        return content;
    }

    public void setContent(Attachment value) {
        this.content = ((AttachmentImpl) value);
    }

    public MediaImpl withType(MediaType value) {
        setType(value);
        return this;
    }

    public MediaImpl withSubtype(CodeableConcept value) {
        setSubtype(value);
        return this;
    }

    public MediaImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public MediaImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public MediaImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public MediaImpl withDateTime(DateTime value) {
        setDateTime(value);
        return this;
    }

    public MediaImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public MediaImpl withOperator(ResourceReference value) {
        setOperator(value);
        return this;
    }

    public MediaImpl withView(CodeableConcept value) {
        setView(value);
        return this;
    }

    public MediaImpl withDeviceName(org.hl7.fhir.model.String value) {
        setDeviceName(value);
        return this;
    }

    public MediaImpl withHeight(Integer value) {
        setHeight(value);
        return this;
    }

    public MediaImpl withWidth(Integer value) {
        setWidth(value);
        return this;
    }

    public MediaImpl withFrames(Integer value) {
        setFrames(value);
        return this;
    }

    public MediaImpl withLength(Integer value) {
        setLength(value);
        return this;
    }

    public MediaImpl withContent(Attachment value) {
        setContent(value);
        return this;
    }

    @Override
    public MediaImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MediaImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MediaImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public MediaImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public MediaImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public MediaImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MediaImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MediaImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MediaImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MediaImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MediaImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MediaImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MediaImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MediaImpl that = ((MediaImpl) object);
        {
            MediaType lhsType;
            lhsType = this.getType();
            MediaType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            CodeableConcept lhsSubtype;
            lhsSubtype = this.getSubtype();
            CodeableConcept rhsSubtype;
            rhsSubtype = that.getSubtype();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subtype", lhsSubtype), LocatorUtils.property(thatLocator, "subtype", rhsSubtype), lhsSubtype, rhsSubtype)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            DateTime lhsDateTime;
            lhsDateTime = this.getDateTime();
            DateTime rhsDateTime;
            rhsDateTime = that.getDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsOperator;
            lhsOperator = this.getOperator();
            ResourceReference rhsOperator;
            rhsOperator = that.getOperator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operator", lhsOperator), LocatorUtils.property(thatLocator, "operator", rhsOperator), lhsOperator, rhsOperator)) {
                return false;
            }
        }
        {
            CodeableConcept lhsView;
            lhsView = this.getView();
            CodeableConcept rhsView;
            rhsView = that.getView();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "view", lhsView), LocatorUtils.property(thatLocator, "view", rhsView), lhsView, rhsView)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDeviceName;
            lhsDeviceName = this.getDeviceName();
            org.hl7.fhir.model.String rhsDeviceName;
            rhsDeviceName = that.getDeviceName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deviceName", lhsDeviceName), LocatorUtils.property(thatLocator, "deviceName", rhsDeviceName), lhsDeviceName, rhsDeviceName)) {
                return false;
            }
        }
        {
            Integer lhsHeight;
            lhsHeight = this.getHeight();
            Integer rhsHeight;
            rhsHeight = that.getHeight();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "height", lhsHeight), LocatorUtils.property(thatLocator, "height", rhsHeight), lhsHeight, rhsHeight)) {
                return false;
            }
        }
        {
            Integer lhsWidth;
            lhsWidth = this.getWidth();
            Integer rhsWidth;
            rhsWidth = that.getWidth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "width", lhsWidth), LocatorUtils.property(thatLocator, "width", rhsWidth), lhsWidth, rhsWidth)) {
                return false;
            }
        }
        {
            Integer lhsFrames;
            lhsFrames = this.getFrames();
            Integer rhsFrames;
            rhsFrames = that.getFrames();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "frames", lhsFrames), LocatorUtils.property(thatLocator, "frames", rhsFrames), lhsFrames, rhsFrames)) {
                return false;
            }
        }
        {
            Integer lhsLength;
            lhsLength = this.getLength();
            Integer rhsLength;
            rhsLength = that.getLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "length", lhsLength), LocatorUtils.property(thatLocator, "length", rhsLength), lhsLength, rhsLength)) {
                return false;
            }
        }
        {
            Attachment lhsContent;
            lhsContent = this.getContent();
            Attachment rhsContent;
            rhsContent = that.getContent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "content", lhsContent), LocatorUtils.property(thatLocator, "content", rhsContent), lhsContent, rhsContent)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MediaType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            CodeableConcept theSubtype;
            theSubtype = this.getSubtype();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subtype", theSubtype), currentHashCode, theSubtype);
        }
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            DateTime theDateTime;
            theDateTime = this.getDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theOperator;
            theOperator = this.getOperator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operator", theOperator), currentHashCode, theOperator);
        }
        {
            CodeableConcept theView;
            theView = this.getView();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "view", theView), currentHashCode, theView);
        }
        {
            org.hl7.fhir.model.String theDeviceName;
            theDeviceName = this.getDeviceName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deviceName", theDeviceName), currentHashCode, theDeviceName);
        }
        {
            Integer theHeight;
            theHeight = this.getHeight();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "height", theHeight), currentHashCode, theHeight);
        }
        {
            Integer theWidth;
            theWidth = this.getWidth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "width", theWidth), currentHashCode, theWidth);
        }
        {
            Integer theFrames;
            theFrames = this.getFrames();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "frames", theFrames), currentHashCode, theFrames);
        }
        {
            Integer theLength;
            theLength = this.getLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "length", theLength), currentHashCode, theLength);
        }
        {
            Attachment theContent;
            theContent = this.getContent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "content", theContent), currentHashCode, theContent);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
