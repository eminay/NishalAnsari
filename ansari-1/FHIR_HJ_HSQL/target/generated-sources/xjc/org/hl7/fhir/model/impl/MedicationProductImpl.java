//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.MedicationIngredient;
import org.hl7.fhir.model.MedicationProduct;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Medication.Product", propOrder = {
    "form",
    "ingredients"
})
public class MedicationProductImpl
    extends BackboneElementImpl
    implements Serializable, MedicationProduct, Equals, HashCode
{

    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl form;
    @XmlElement(name = "ingredient", type = MedicationIngredientImpl.class)
    protected List<MedicationIngredient> ingredients;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORM_MEDICATIONPRODUCT_HJID")
    public CodeableConcept getForm() {
        return form;
    }

    public void setForm(CodeableConcept value) {
        this.form = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = MedicationIngredient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INGREDIENTS_MEDICATIONPRODUC_0")
    public List<MedicationIngredient> getIngredients() {
        if (ingredients == null) {
            ingredients = new ArrayList<MedicationIngredient>();
        }
        return this.ingredients;
    }

    public void setIngredients(List<MedicationIngredient> ingredients) {
        this.ingredients = ingredients;
    }

    public MedicationProductImpl withForm(CodeableConcept value) {
        setForm(value);
        return this;
    }

    public MedicationProductImpl withIngredients(MedicationIngredient... values) {
        if (values!= null) {
            for (MedicationIngredient value: values) {
                getIngredients().add(value);
            }
        }
        return this;
    }

    public MedicationProductImpl withIngredients(Collection<MedicationIngredient> values) {
        if (values!= null) {
            getIngredients().addAll(values);
        }
        return this;
    }

    public MedicationProductImpl withIngredients(List<MedicationIngredient> ingredients) {
        setIngredients(ingredients);
        return this;
    }

    @Override
    public MedicationProductImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationProductImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationProductImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationProductImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationProductImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationProductImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationProductImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationProductImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationProductImpl that = ((MedicationProductImpl) object);
        {
            CodeableConcept lhsForm;
            lhsForm = this.getForm();
            CodeableConcept rhsForm;
            rhsForm = that.getForm();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "form", lhsForm), LocatorUtils.property(thatLocator, "form", rhsForm), lhsForm, rhsForm)) {
                return false;
            }
        }
        {
            List<MedicationIngredient> lhsIngredients;
            lhsIngredients = (((this.ingredients!= null)&&(!this.ingredients.isEmpty()))?this.getIngredients():null);
            List<MedicationIngredient> rhsIngredients;
            rhsIngredients = (((that.ingredients!= null)&&(!that.ingredients.isEmpty()))?that.getIngredients():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ingredients", lhsIngredients), LocatorUtils.property(thatLocator, "ingredients", rhsIngredients), lhsIngredients, rhsIngredients)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theForm;
            theForm = this.getForm();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "form", theForm), currentHashCode, theForm);
        }
        {
            List<MedicationIngredient> theIngredients;
            theIngredients = (((this.ingredients!= null)&&(!this.ingredients.isEmpty()))?this.getIngredients():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ingredients", theIngredients), currentHashCode, theIngredients);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
