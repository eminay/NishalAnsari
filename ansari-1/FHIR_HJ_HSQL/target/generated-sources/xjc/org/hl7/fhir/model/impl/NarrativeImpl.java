//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.NarrativeStatus;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;
import w3._1999.xhtml.Div;
import w3._1999.xhtml.impl.DivImpl;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Narrative", propOrder = {
    "status",
    "div"
})
public class NarrativeImpl
    extends ElementImpl
    implements Serializable, Narrative, Equals, HashCode
{

    @XmlElement(required = true, type = NarrativeStatusImpl.class)
    protected NarrativeStatusImpl status;
    @XmlElement(namespace = "http://www.w3.org/1999/xhtml", required = true, type = DivImpl.class)
    protected DivImpl div;

    @ManyToOne(targetEntity = NarrativeStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_NARRATIVE_HJID")
    public NarrativeStatus getStatus() {
        return status;
    }

    public void setStatus(NarrativeStatus value) {
        this.status = ((NarrativeStatusImpl) value);
    }

    @Transient
    public Div getDiv() {
        return div;
    }

    public void setDiv(Div value) {
        this.div = ((DivImpl) value);
    }

    public NarrativeImpl withStatus(NarrativeStatus value) {
        setStatus(value);
        return this;
    }

    public NarrativeImpl withDiv(Div value) {
        setDiv(value);
        return this;
    }

    @Override
    public NarrativeImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public NarrativeImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public NarrativeImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public NarrativeImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof NarrativeImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final NarrativeImpl that = ((NarrativeImpl) object);
        {
            NarrativeStatus lhsStatus;
            lhsStatus = this.getStatus();
            NarrativeStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Div lhsDiv;
            lhsDiv = this.getDiv();
            Div rhsDiv;
            rhsDiv = that.getDiv();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "div", lhsDiv), LocatorUtils.property(thatLocator, "div", rhsDiv), lhsDiv, rhsDiv)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            NarrativeStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Div theDiv;
            theDiv = this.getDiv();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "div", theDiv), currentHashCode, theDiv);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
