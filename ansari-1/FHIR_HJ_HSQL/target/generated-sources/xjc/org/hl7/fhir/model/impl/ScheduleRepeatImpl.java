//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Decimal;
import org.hl7.fhir.model.EventTiming;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.ScheduleRepeat;
import org.hl7.fhir.model.UnitsOfTime;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Schedule.Repeat", propOrder = {
    "frequency",
    "when",
    "duration",
    "units",
    "count",
    "end"
})
public class ScheduleRepeatImpl
    extends ElementImpl
    implements Serializable, ScheduleRepeat, Equals, HashCode
{

    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl frequency;
    @XmlElement(type = EventTimingImpl.class)
    protected EventTimingImpl when;
    @XmlElement(required = true, type = DecimalImpl.class)
    protected DecimalImpl duration;
    @XmlElement(required = true, type = UnitsOfTimeImpl.class)
    protected UnitsOfTimeImpl units;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl count;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl end;

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FREQUENCY_SCHEDULEREPEAT_HJID")
    public Integer getFrequency() {
        return frequency;
    }

    public void setFrequency(Integer value) {
        this.frequency = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = EventTiming.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHEN__SCHEDULEREPEAT_HJID")
    public EventTiming getWhen() {
        return when;
    }

    public void setWhen(EventTiming value) {
        this.when = ((EventTimingImpl) value);
    }

    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DURATION_SCHEDULEREPEAT_HJID")
    public Decimal getDuration() {
        return duration;
    }

    public void setDuration(Decimal value) {
        this.duration = ((DecimalImpl) value);
    }

    @ManyToOne(targetEntity = UnitsOfTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UNITS_SCHEDULEREPEAT_HJID")
    public UnitsOfTime getUnits() {
        return units;
    }

    public void setUnits(UnitsOfTime value) {
        this.units = ((UnitsOfTimeImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COUNT__SCHEDULEREPEAT_HJID")
    public Integer getCount() {
        return count;
    }

    public void setCount(Integer value) {
        this.count = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "END__SCHEDULEREPEAT_HJID")
    public DateTime getEnd() {
        return end;
    }

    public void setEnd(DateTime value) {
        this.end = ((DateTimeImpl) value);
    }

    public ScheduleRepeatImpl withFrequency(Integer value) {
        setFrequency(value);
        return this;
    }

    public ScheduleRepeatImpl withWhen(EventTiming value) {
        setWhen(value);
        return this;
    }

    public ScheduleRepeatImpl withDuration(Decimal value) {
        setDuration(value);
        return this;
    }

    public ScheduleRepeatImpl withUnits(UnitsOfTime value) {
        setUnits(value);
        return this;
    }

    public ScheduleRepeatImpl withCount(Integer value) {
        setCount(value);
        return this;
    }

    public ScheduleRepeatImpl withEnd(DateTime value) {
        setEnd(value);
        return this;
    }

    @Override
    public ScheduleRepeatImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ScheduleRepeatImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ScheduleRepeatImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ScheduleRepeatImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ScheduleRepeatImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ScheduleRepeatImpl that = ((ScheduleRepeatImpl) object);
        {
            Integer lhsFrequency;
            lhsFrequency = this.getFrequency();
            Integer rhsFrequency;
            rhsFrequency = that.getFrequency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "frequency", lhsFrequency), LocatorUtils.property(thatLocator, "frequency", rhsFrequency), lhsFrequency, rhsFrequency)) {
                return false;
            }
        }
        {
            EventTiming lhsWhen;
            lhsWhen = this.getWhen();
            EventTiming rhsWhen;
            rhsWhen = that.getWhen();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "when", lhsWhen), LocatorUtils.property(thatLocator, "when", rhsWhen), lhsWhen, rhsWhen)) {
                return false;
            }
        }
        {
            Decimal lhsDuration;
            lhsDuration = this.getDuration();
            Decimal rhsDuration;
            rhsDuration = that.getDuration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "duration", lhsDuration), LocatorUtils.property(thatLocator, "duration", rhsDuration), lhsDuration, rhsDuration)) {
                return false;
            }
        }
        {
            UnitsOfTime lhsUnits;
            lhsUnits = this.getUnits();
            UnitsOfTime rhsUnits;
            rhsUnits = that.getUnits();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "units", lhsUnits), LocatorUtils.property(thatLocator, "units", rhsUnits), lhsUnits, rhsUnits)) {
                return false;
            }
        }
        {
            Integer lhsCount;
            lhsCount = this.getCount();
            Integer rhsCount;
            rhsCount = that.getCount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "count", lhsCount), LocatorUtils.property(thatLocator, "count", rhsCount), lhsCount, rhsCount)) {
                return false;
            }
        }
        {
            DateTime lhsEnd;
            lhsEnd = this.getEnd();
            DateTime rhsEnd;
            rhsEnd = that.getEnd();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "end", lhsEnd), LocatorUtils.property(thatLocator, "end", rhsEnd), lhsEnd, rhsEnd)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Integer theFrequency;
            theFrequency = this.getFrequency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "frequency", theFrequency), currentHashCode, theFrequency);
        }
        {
            EventTiming theWhen;
            theWhen = this.getWhen();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "when", theWhen), currentHashCode, theWhen);
        }
        {
            Decimal theDuration;
            theDuration = this.getDuration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "duration", theDuration), currentHashCode, theDuration);
        }
        {
            UnitsOfTime theUnits;
            theUnits = this.getUnits();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "units", theUnits), currentHashCode, theUnits);
        }
        {
            Integer theCount;
            theCount = this.getCount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "count", theCount), currentHashCode, theCount);
        }
        {
            DateTime theEnd;
            theEnd = this.getEnd();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "end", theEnd), currentHashCode, theEnd);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
