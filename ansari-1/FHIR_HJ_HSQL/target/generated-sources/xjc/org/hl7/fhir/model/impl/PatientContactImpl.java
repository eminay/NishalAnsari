//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.PatientContact;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Patient.Contact", propOrder = {
    "relationships",
    "name",
    "telecoms",
    "address",
    "gender",
    "organization"
})
public class PatientContactImpl
    extends BackboneElementImpl
    implements Serializable, PatientContact, Equals, HashCode
{

    @XmlElement(name = "relationship", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> relationships;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl name;
    @XmlElement(name = "telecom", type = ContactImpl.class)
    protected List<Contact> telecoms;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl address;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl gender;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl organization;

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATIONSHIPS_PATIENTCONTACT_0")
    public List<CodeableConcept> getRelationships() {
        if (relationships == null) {
            relationships = new ArrayList<CodeableConcept>();
        }
        return this.relationships;
    }

    public void setRelationships(List<CodeableConcept> relationships) {
        this.relationships = relationships;
    }

    @ManyToOne(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PATIENTCONTACT_HJID")
    public HumanName getName() {
        return name;
    }

    public void setName(HumanName value) {
        this.name = ((HumanNameImpl) value);
    }

    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOMS_PATIENTCONTACT_HJID")
    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    public void setTelecoms(List<Contact> telecoms) {
        this.telecoms = telecoms;
    }

    @ManyToOne(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_PATIENTCONTACT_HJID")
    public Address getAddress() {
        return address;
    }

    public void setAddress(Address value) {
        this.address = ((AddressImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GENDER_PATIENTCONTACT_HJID")
    public CodeableConcept getGender() {
        return gender;
    }

    public void setGender(CodeableConcept value) {
        this.gender = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORGANIZATION_PATIENTCONTACT__0")
    public ResourceReference getOrganization() {
        return organization;
    }

    public void setOrganization(ResourceReference value) {
        this.organization = ((ResourceReferenceImpl) value);
    }

    public PatientContactImpl withRelationships(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getRelationships().add(value);
            }
        }
        return this;
    }

    public PatientContactImpl withRelationships(Collection<CodeableConcept> values) {
        if (values!= null) {
            getRelationships().addAll(values);
        }
        return this;
    }

    public PatientContactImpl withRelationships(List<CodeableConcept> relationships) {
        setRelationships(relationships);
        return this;
    }

    public PatientContactImpl withName(HumanName value) {
        setName(value);
        return this;
    }

    public PatientContactImpl withTelecoms(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecoms().add(value);
            }
        }
        return this;
    }

    public PatientContactImpl withTelecoms(Collection<Contact> values) {
        if (values!= null) {
            getTelecoms().addAll(values);
        }
        return this;
    }

    public PatientContactImpl withTelecoms(List<Contact> telecoms) {
        setTelecoms(telecoms);
        return this;
    }

    public PatientContactImpl withAddress(Address value) {
        setAddress(value);
        return this;
    }

    public PatientContactImpl withGender(CodeableConcept value) {
        setGender(value);
        return this;
    }

    public PatientContactImpl withOrganization(ResourceReference value) {
        setOrganization(value);
        return this;
    }

    @Override
    public PatientContactImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public PatientContactImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public PatientContactImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public PatientContactImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public PatientContactImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public PatientContactImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public PatientContactImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PatientContactImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final PatientContactImpl that = ((PatientContactImpl) object);
        {
            List<CodeableConcept> lhsRelationships;
            lhsRelationships = (((this.relationships!= null)&&(!this.relationships.isEmpty()))?this.getRelationships():null);
            List<CodeableConcept> rhsRelationships;
            rhsRelationships = (((that.relationships!= null)&&(!that.relationships.isEmpty()))?that.getRelationships():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relationships", lhsRelationships), LocatorUtils.property(thatLocator, "relationships", rhsRelationships), lhsRelationships, rhsRelationships)) {
                return false;
            }
        }
        {
            HumanName lhsName;
            lhsName = this.getName();
            HumanName rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecoms;
            lhsTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            List<Contact> rhsTelecoms;
            rhsTelecoms = (((that.telecoms!= null)&&(!that.telecoms.isEmpty()))?that.getTelecoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecoms", lhsTelecoms), LocatorUtils.property(thatLocator, "telecoms", rhsTelecoms), lhsTelecoms, rhsTelecoms)) {
                return false;
            }
        }
        {
            Address lhsAddress;
            lhsAddress = this.getAddress();
            Address rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            CodeableConcept lhsGender;
            lhsGender = this.getGender();
            CodeableConcept rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrganization;
            lhsOrganization = this.getOrganization();
            ResourceReference rhsOrganization;
            rhsOrganization = that.getOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organization", lhsOrganization), LocatorUtils.property(thatLocator, "organization", rhsOrganization), lhsOrganization, rhsOrganization)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theRelationships;
            theRelationships = (((this.relationships!= null)&&(!this.relationships.isEmpty()))?this.getRelationships():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relationships", theRelationships), currentHashCode, theRelationships);
        }
        {
            HumanName theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecoms", theTelecoms), currentHashCode, theTelecoms);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            ResourceReference theOrganization;
            theOrganization = this.getOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organization", theOrganization), currentHashCode, theOrganization);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
