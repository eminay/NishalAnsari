//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Age;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Condition;
import org.hl7.fhir.model.ConditionEvidence;
import org.hl7.fhir.model.ConditionLocation;
import org.hl7.fhir.model.ConditionRelatedItem;
import org.hl7.fhir.model.ConditionStage;
import org.hl7.fhir.model.ConditionStatus;
import org.hl7.fhir.model.Date;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Condition", propOrder = {
    "identifiers",
    "subject",
    "encounter",
    "asserter",
    "dateAsserted",
    "code",
    "category",
    "status",
    "certainty",
    "severity",
    "onsetAge",
    "onsetDate",
    "abatementBoolean",
    "abatementAge",
    "abatementDate",
    "stage",
    "evidences",
    "locations",
    "relatedItems",
    "notes"
})
@XmlRootElement(name = "Condition")
public class ConditionImpl
    extends ResourceImpl
    implements Serializable, Condition, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl asserter;
    @XmlElement(type = DateImpl.class)
    protected DateImpl dateAsserted;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl code;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl category;
    @XmlElement(required = true, type = ConditionStatusImpl.class)
    protected ConditionStatusImpl status;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl certainty;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl severity;
    @XmlElement(type = AgeImpl.class)
    protected AgeImpl onsetAge;
    @XmlElement(type = DateImpl.class)
    protected DateImpl onsetDate;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl abatementBoolean;
    @XmlElement(type = AgeImpl.class)
    protected AgeImpl abatementAge;
    @XmlElement(type = DateImpl.class)
    protected DateImpl abatementDate;
    @XmlElement(type = ConditionStageImpl.class)
    protected ConditionStageImpl stage;
    @XmlElement(name = "evidence", type = ConditionEvidenceImpl.class)
    protected List<ConditionEvidence> evidences;
    @XmlElement(name = "location", type = ConditionLocationImpl.class)
    protected List<ConditionLocation> locations;
    @XmlElement(name = "relatedItem", type = ConditionRelatedItemImpl.class)
    protected List<ConditionRelatedItem> relatedItems;
    @XmlElement(type = StringImpl.class)
    protected StringImpl notes;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_CONDITION_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_CONDITION_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_CONDITION_HJID")
    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASSERTER_CONDITION_HJID")
    public ResourceReference getAsserter() {
        return asserter;
    }

    public void setAsserter(ResourceReference value) {
        this.asserter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATEASSERTED_CONDITION_HJID")
    public Date getDateAsserted() {
        return dateAsserted;
    }

    public void setDateAsserted(Date value) {
        this.dateAsserted = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONDITION_HJID")
    public CodeableConcept getCode() {
        return code;
    }

    public void setCode(CodeableConcept value) {
        this.code = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CATEGORY_CONDITION_HJID")
    public CodeableConcept getCategory() {
        return category;
    }

    public void setCategory(CodeableConcept value) {
        this.category = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ConditionStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CONDITION_HJID")
    public ConditionStatus getStatus() {
        return status;
    }

    public void setStatus(ConditionStatus value) {
        this.status = ((ConditionStatusImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CERTAINTY_CONDITION_HJID")
    public CodeableConcept getCertainty() {
        return certainty;
    }

    public void setCertainty(CodeableConcept value) {
        this.certainty = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SEVERITY_CONDITION_HJID")
    public CodeableConcept getSeverity() {
        return severity;
    }

    public void setSeverity(CodeableConcept value) {
        this.severity = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Age.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ONSETAGE_CONDITION_HJID")
    public Age getOnsetAge() {
        return onsetAge;
    }

    public void setOnsetAge(Age value) {
        this.onsetAge = ((AgeImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ONSETDATE_CONDITION_HJID")
    public Date getOnsetDate() {
        return onsetDate;
    }

    public void setOnsetDate(Date value) {
        this.onsetDate = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTBOOLEAN_CONDITION_H_0")
    public Boolean getAbatementBoolean() {
        return abatementBoolean;
    }

    public void setAbatementBoolean(Boolean value) {
        this.abatementBoolean = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = Age.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTAGE_CONDITION_HJID")
    public Age getAbatementAge() {
        return abatementAge;
    }

    public void setAbatementAge(Age value) {
        this.abatementAge = ((AgeImpl) value);
    }

    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTDATE_CONDITION_HJID")
    public Date getAbatementDate() {
        return abatementDate;
    }

    public void setAbatementDate(Date value) {
        this.abatementDate = ((DateImpl) value);
    }

    @ManyToOne(targetEntity = ConditionStage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STAGE_CONDITION_HJID")
    public ConditionStage getStage() {
        return stage;
    }

    public void setStage(ConditionStage value) {
        this.stage = ((ConditionStageImpl) value);
    }

    @OneToMany(targetEntity = ConditionEvidence.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVIDENCES_CONDITION_HJID")
    public List<ConditionEvidence> getEvidences() {
        if (evidences == null) {
            evidences = new ArrayList<ConditionEvidence>();
        }
        return this.evidences;
    }

    public void setEvidences(List<ConditionEvidence> evidences) {
        this.evidences = evidences;
    }

    @OneToMany(targetEntity = ConditionLocation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATIONS_CONDITION_HJID")
    public List<ConditionLocation> getLocations() {
        if (locations == null) {
            locations = new ArrayList<ConditionLocation>();
        }
        return this.locations;
    }

    public void setLocations(List<ConditionLocation> locations) {
        this.locations = locations;
    }

    @OneToMany(targetEntity = ConditionRelatedItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATEDITEMS_CONDITION_HJID")
    public List<ConditionRelatedItem> getRelatedItems() {
        if (relatedItems == null) {
            relatedItems = new ArrayList<ConditionRelatedItem>();
        }
        return this.relatedItems;
    }

    public void setRelatedItems(List<ConditionRelatedItem> relatedItems) {
        this.relatedItems = relatedItems;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NOTES_CONDITION_HJID")
    public org.hl7.fhir.model.String getNotes() {
        return notes;
    }

    public void setNotes(org.hl7.fhir.model.String value) {
        this.notes = ((StringImpl) value);
    }

    public ConditionImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public ConditionImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public ConditionImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public ConditionImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public ConditionImpl withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public ConditionImpl withAsserter(ResourceReference value) {
        setAsserter(value);
        return this;
    }

    public ConditionImpl withDateAsserted(Date value) {
        setDateAsserted(value);
        return this;
    }

    public ConditionImpl withCode(CodeableConcept value) {
        setCode(value);
        return this;
    }

    public ConditionImpl withCategory(CodeableConcept value) {
        setCategory(value);
        return this;
    }

    public ConditionImpl withStatus(ConditionStatus value) {
        setStatus(value);
        return this;
    }

    public ConditionImpl withCertainty(CodeableConcept value) {
        setCertainty(value);
        return this;
    }

    public ConditionImpl withSeverity(CodeableConcept value) {
        setSeverity(value);
        return this;
    }

    public ConditionImpl withOnsetAge(Age value) {
        setOnsetAge(value);
        return this;
    }

    public ConditionImpl withOnsetDate(Date value) {
        setOnsetDate(value);
        return this;
    }

    public ConditionImpl withAbatementBoolean(Boolean value) {
        setAbatementBoolean(value);
        return this;
    }

    public ConditionImpl withAbatementAge(Age value) {
        setAbatementAge(value);
        return this;
    }

    public ConditionImpl withAbatementDate(Date value) {
        setAbatementDate(value);
        return this;
    }

    public ConditionImpl withStage(ConditionStage value) {
        setStage(value);
        return this;
    }

    public ConditionImpl withEvidences(ConditionEvidence... values) {
        if (values!= null) {
            for (ConditionEvidence value: values) {
                getEvidences().add(value);
            }
        }
        return this;
    }

    public ConditionImpl withEvidences(Collection<ConditionEvidence> values) {
        if (values!= null) {
            getEvidences().addAll(values);
        }
        return this;
    }

    public ConditionImpl withEvidences(List<ConditionEvidence> evidences) {
        setEvidences(evidences);
        return this;
    }

    public ConditionImpl withLocations(ConditionLocation... values) {
        if (values!= null) {
            for (ConditionLocation value: values) {
                getLocations().add(value);
            }
        }
        return this;
    }

    public ConditionImpl withLocations(Collection<ConditionLocation> values) {
        if (values!= null) {
            getLocations().addAll(values);
        }
        return this;
    }

    public ConditionImpl withLocations(List<ConditionLocation> locations) {
        setLocations(locations);
        return this;
    }

    public ConditionImpl withRelatedItems(ConditionRelatedItem... values) {
        if (values!= null) {
            for (ConditionRelatedItem value: values) {
                getRelatedItems().add(value);
            }
        }
        return this;
    }

    public ConditionImpl withRelatedItems(Collection<ConditionRelatedItem> values) {
        if (values!= null) {
            getRelatedItems().addAll(values);
        }
        return this;
    }

    public ConditionImpl withRelatedItems(List<ConditionRelatedItem> relatedItems) {
        setRelatedItems(relatedItems);
        return this;
    }

    public ConditionImpl withNotes(org.hl7.fhir.model.String value) {
        setNotes(value);
        return this;
    }

    @Override
    public ConditionImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ConditionImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ConditionImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ConditionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConditionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConditionImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConditionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConditionImpl that = ((ConditionImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            ResourceReference lhsAsserter;
            lhsAsserter = this.getAsserter();
            ResourceReference rhsAsserter;
            rhsAsserter = that.getAsserter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asserter", lhsAsserter), LocatorUtils.property(thatLocator, "asserter", rhsAsserter), lhsAsserter, rhsAsserter)) {
                return false;
            }
        }
        {
            Date lhsDateAsserted;
            lhsDateAsserted = this.getDateAsserted();
            Date rhsDateAsserted;
            rhsDateAsserted = that.getDateAsserted();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateAsserted", lhsDateAsserted), LocatorUtils.property(thatLocator, "dateAsserted", rhsDateAsserted), lhsDateAsserted, rhsDateAsserted)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCode;
            lhsCode = this.getCode();
            CodeableConcept rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCategory;
            lhsCategory = this.getCategory();
            CodeableConcept rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            ConditionStatus lhsStatus;
            lhsStatus = this.getStatus();
            ConditionStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCertainty;
            lhsCertainty = this.getCertainty();
            CodeableConcept rhsCertainty;
            rhsCertainty = that.getCertainty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "certainty", lhsCertainty), LocatorUtils.property(thatLocator, "certainty", rhsCertainty), lhsCertainty, rhsCertainty)) {
                return false;
            }
        }
        {
            CodeableConcept lhsSeverity;
            lhsSeverity = this.getSeverity();
            CodeableConcept rhsSeverity;
            rhsSeverity = that.getSeverity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "severity", lhsSeverity), LocatorUtils.property(thatLocator, "severity", rhsSeverity), lhsSeverity, rhsSeverity)) {
                return false;
            }
        }
        {
            Age lhsOnsetAge;
            lhsOnsetAge = this.getOnsetAge();
            Age rhsOnsetAge;
            rhsOnsetAge = that.getOnsetAge();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onsetAge", lhsOnsetAge), LocatorUtils.property(thatLocator, "onsetAge", rhsOnsetAge), lhsOnsetAge, rhsOnsetAge)) {
                return false;
            }
        }
        {
            Date lhsOnsetDate;
            lhsOnsetDate = this.getOnsetDate();
            Date rhsOnsetDate;
            rhsOnsetDate = that.getOnsetDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onsetDate", lhsOnsetDate), LocatorUtils.property(thatLocator, "onsetDate", rhsOnsetDate), lhsOnsetDate, rhsOnsetDate)) {
                return false;
            }
        }
        {
            Boolean lhsAbatementBoolean;
            lhsAbatementBoolean = this.getAbatementBoolean();
            Boolean rhsAbatementBoolean;
            rhsAbatementBoolean = that.getAbatementBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementBoolean", lhsAbatementBoolean), LocatorUtils.property(thatLocator, "abatementBoolean", rhsAbatementBoolean), lhsAbatementBoolean, rhsAbatementBoolean)) {
                return false;
            }
        }
        {
            Age lhsAbatementAge;
            lhsAbatementAge = this.getAbatementAge();
            Age rhsAbatementAge;
            rhsAbatementAge = that.getAbatementAge();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementAge", lhsAbatementAge), LocatorUtils.property(thatLocator, "abatementAge", rhsAbatementAge), lhsAbatementAge, rhsAbatementAge)) {
                return false;
            }
        }
        {
            Date lhsAbatementDate;
            lhsAbatementDate = this.getAbatementDate();
            Date rhsAbatementDate;
            rhsAbatementDate = that.getAbatementDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementDate", lhsAbatementDate), LocatorUtils.property(thatLocator, "abatementDate", rhsAbatementDate), lhsAbatementDate, rhsAbatementDate)) {
                return false;
            }
        }
        {
            ConditionStage lhsStage;
            lhsStage = this.getStage();
            ConditionStage rhsStage;
            rhsStage = that.getStage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stage", lhsStage), LocatorUtils.property(thatLocator, "stage", rhsStage), lhsStage, rhsStage)) {
                return false;
            }
        }
        {
            List<ConditionEvidence> lhsEvidences;
            lhsEvidences = (((this.evidences!= null)&&(!this.evidences.isEmpty()))?this.getEvidences():null);
            List<ConditionEvidence> rhsEvidences;
            rhsEvidences = (((that.evidences!= null)&&(!that.evidences.isEmpty()))?that.getEvidences():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "evidences", lhsEvidences), LocatorUtils.property(thatLocator, "evidences", rhsEvidences), lhsEvidences, rhsEvidences)) {
                return false;
            }
        }
        {
            List<ConditionLocation> lhsLocations;
            lhsLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            List<ConditionLocation> rhsLocations;
            rhsLocations = (((that.locations!= null)&&(!that.locations.isEmpty()))?that.getLocations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locations", lhsLocations), LocatorUtils.property(thatLocator, "locations", rhsLocations), lhsLocations, rhsLocations)) {
                return false;
            }
        }
        {
            List<ConditionRelatedItem> lhsRelatedItems;
            lhsRelatedItems = (((this.relatedItems!= null)&&(!this.relatedItems.isEmpty()))?this.getRelatedItems():null);
            List<ConditionRelatedItem> rhsRelatedItems;
            rhsRelatedItems = (((that.relatedItems!= null)&&(!that.relatedItems.isEmpty()))?that.getRelatedItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedItems", lhsRelatedItems), LocatorUtils.property(thatLocator, "relatedItems", rhsRelatedItems), lhsRelatedItems, rhsRelatedItems)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsNotes;
            lhsNotes = this.getNotes();
            org.hl7.fhir.model.String rhsNotes;
            rhsNotes = that.getNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            ResourceReference theAsserter;
            theAsserter = this.getAsserter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asserter", theAsserter), currentHashCode, theAsserter);
        }
        {
            Date theDateAsserted;
            theDateAsserted = this.getDateAsserted();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateAsserted", theDateAsserted), currentHashCode, theDateAsserted);
        }
        {
            CodeableConcept theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            CodeableConcept theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            ConditionStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theCertainty;
            theCertainty = this.getCertainty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certainty", theCertainty), currentHashCode, theCertainty);
        }
        {
            CodeableConcept theSeverity;
            theSeverity = this.getSeverity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "severity", theSeverity), currentHashCode, theSeverity);
        }
        {
            Age theOnsetAge;
            theOnsetAge = this.getOnsetAge();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onsetAge", theOnsetAge), currentHashCode, theOnsetAge);
        }
        {
            Date theOnsetDate;
            theOnsetDate = this.getOnsetDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onsetDate", theOnsetDate), currentHashCode, theOnsetDate);
        }
        {
            Boolean theAbatementBoolean;
            theAbatementBoolean = this.getAbatementBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementBoolean", theAbatementBoolean), currentHashCode, theAbatementBoolean);
        }
        {
            Age theAbatementAge;
            theAbatementAge = this.getAbatementAge();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementAge", theAbatementAge), currentHashCode, theAbatementAge);
        }
        {
            Date theAbatementDate;
            theAbatementDate = this.getAbatementDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementDate", theAbatementDate), currentHashCode, theAbatementDate);
        }
        {
            ConditionStage theStage;
            theStage = this.getStage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stage", theStage), currentHashCode, theStage);
        }
        {
            List<ConditionEvidence> theEvidences;
            theEvidences = (((this.evidences!= null)&&(!this.evidences.isEmpty()))?this.getEvidences():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "evidences", theEvidences), currentHashCode, theEvidences);
        }
        {
            List<ConditionLocation> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locations", theLocations), currentHashCode, theLocations);
        }
        {
            List<ConditionRelatedItem> theRelatedItems;
            theRelatedItems = (((this.relatedItems!= null)&&(!this.relatedItems.isEmpty()))?this.getRelatedItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedItems", theRelatedItems), currentHashCode, theRelatedItems);
        }
        {
            org.hl7.fhir.model.String theNotes;
            theNotes = this.getNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
