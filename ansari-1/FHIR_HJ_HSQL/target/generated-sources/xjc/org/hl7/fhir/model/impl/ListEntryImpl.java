//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ListEntry;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "List.Entry", propOrder = {
    "flags",
    "deleted",
    "date",
    "item"
})
public class ListEntryImpl
    extends BackboneElementImpl
    implements Serializable, ListEntry, Equals, HashCode
{

    @XmlElement(name = "flag", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> flags;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl deleted;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl item;

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FLAGS_LISTENTRY_HJID")
    public List<CodeableConcept> getFlags() {
        if (flags == null) {
            flags = new ArrayList<CodeableConcept>();
        }
        return this.flags;
    }

    public void setFlags(List<CodeableConcept> flags) {
        this.flags = flags;
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DELETED_LISTENTRY_HJID")
    public Boolean getDeleted() {
        return deleted;
    }

    public void setDeleted(Boolean value) {
        this.deleted = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__LISTENTRY_HJID")
    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ITEM_LISTENTRY_HJID")
    public ResourceReference getItem() {
        return item;
    }

    public void setItem(ResourceReference value) {
        this.item = ((ResourceReferenceImpl) value);
    }

    public ListEntryImpl withFlags(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getFlags().add(value);
            }
        }
        return this;
    }

    public ListEntryImpl withFlags(Collection<CodeableConcept> values) {
        if (values!= null) {
            getFlags().addAll(values);
        }
        return this;
    }

    public ListEntryImpl withFlags(List<CodeableConcept> flags) {
        setFlags(flags);
        return this;
    }

    public ListEntryImpl withDeleted(Boolean value) {
        setDeleted(value);
        return this;
    }

    public ListEntryImpl withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public ListEntryImpl withItem(ResourceReference value) {
        setItem(value);
        return this;
    }

    @Override
    public ListEntryImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ListEntryImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ListEntryImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ListEntryImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ListEntryImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ListEntryImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ListEntryImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ListEntryImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ListEntryImpl that = ((ListEntryImpl) object);
        {
            List<CodeableConcept> lhsFlags;
            lhsFlags = (((this.flags!= null)&&(!this.flags.isEmpty()))?this.getFlags():null);
            List<CodeableConcept> rhsFlags;
            rhsFlags = (((that.flags!= null)&&(!that.flags.isEmpty()))?that.getFlags():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flags", lhsFlags), LocatorUtils.property(thatLocator, "flags", rhsFlags), lhsFlags, rhsFlags)) {
                return false;
            }
        }
        {
            Boolean lhsDeleted;
            lhsDeleted = this.getDeleted();
            Boolean rhsDeleted;
            rhsDeleted = that.getDeleted();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deleted", lhsDeleted), LocatorUtils.property(thatLocator, "deleted", rhsDeleted), lhsDeleted, rhsDeleted)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ResourceReference lhsItem;
            lhsItem = this.getItem();
            ResourceReference rhsItem;
            rhsItem = that.getItem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "item", lhsItem), LocatorUtils.property(thatLocator, "item", rhsItem), lhsItem, rhsItem)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theFlags;
            theFlags = (((this.flags!= null)&&(!this.flags.isEmpty()))?this.getFlags():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flags", theFlags), currentHashCode, theFlags);
        }
        {
            Boolean theDeleted;
            theDeleted = this.getDeleted();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deleted", theDeleted), currentHashCode, theDeleted);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ResourceReference theItem;
            theItem = this.getItem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "item", theItem), currentHashCode, theItem);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
