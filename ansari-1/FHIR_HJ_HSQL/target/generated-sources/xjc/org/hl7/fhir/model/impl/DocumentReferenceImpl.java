//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.DocumentReference;
import org.hl7.fhir.model.DocumentReferenceContext;
import org.hl7.fhir.model.DocumentReferenceRelatesTo;
import org.hl7.fhir.model.DocumentReferenceService;
import org.hl7.fhir.model.DocumentReferenceStatus;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DocumentReference", propOrder = {
    "masterIdentifier",
    "identifiers",
    "subject",
    "type",
    "clazz",
    "authors",
    "custodian",
    "policyManager",
    "authenticator",
    "created",
    "indexed",
    "status",
    "docStatus",
    "relatesTos",
    "description",
    "confidentialities",
    "primaryLanguage",
    "mimeType",
    "formats",
    "size",
    "hash",
    "location",
    "service",
    "context"
})
@XmlRootElement(name = "DocumentReference")
public class DocumentReferenceImpl
    extends ResourceImpl
    implements Serializable, DocumentReference, Equals, HashCode
{

    @XmlElement(required = true, type = IdentifierImpl.class)
    protected IdentifierImpl masterIdentifier;
    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "class", type = CodeableConceptImpl.class)
    protected CodeableConceptImpl clazz;
    @XmlElement(name = "author", required = true, type = ResourceReferenceImpl.class)
    protected List<ResourceReference> authors;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl custodian;
    @XmlElement(type = UriImpl.class)
    protected UriImpl policyManager;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl authenticator;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl created;
    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl indexed;
    @XmlElement(required = true, type = DocumentReferenceStatusImpl.class)
    protected DocumentReferenceStatusImpl status;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl docStatus;
    @XmlElement(name = "relatesTo", type = DocumentReferenceRelatesToImpl.class)
    protected List<DocumentReferenceRelatesTo> relatesTos;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(name = "confidentiality", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> confidentialities;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl primaryLanguage;
    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl mimeType;
    @XmlElement(name = "format", type = UriImpl.class)
    protected List<Uri> formats;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl size;
    @XmlElement(type = StringImpl.class)
    protected StringImpl hash;
    @XmlElement(type = UriImpl.class)
    protected UriImpl location;
    @XmlElement(type = DocumentReferenceServiceImpl.class)
    protected DocumentReferenceServiceImpl service;
    @XmlElement(type = DocumentReferenceContextImpl.class)
    protected DocumentReferenceContextImpl context;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MASTERIDENTIFIER_DOCUMENTREF_0")
    public Identifier getMasterIdentifier() {
        return masterIdentifier;
    }

    public void setMasterIdentifier(Identifier value) {
        this.masterIdentifier = ((IdentifierImpl) value);
    }

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_DOCUMENTREFERENC_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DOCUMENTREFERENCE_HJ_0")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__DOCUMENTREFERENCE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLAZZ_DOCUMENTREFERENCE_HJID")
    public CodeableConcept getClazz() {
        return clazz;
    }

    public void setClazz(CodeableConcept value) {
        this.clazz = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHORS_DOCUMENTREFERENCE_HJ_0")
    public List<ResourceReference> getAuthors() {
        if (authors == null) {
            authors = new ArrayList<ResourceReference>();
        }
        return this.authors;
    }

    public void setAuthors(List<ResourceReference> authors) {
        this.authors = authors;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CUSTODIAN_DOCUMENTREFERENCE__0")
    public ResourceReference getCustodian() {
        return custodian;
    }

    public void setCustodian(ResourceReference value) {
        this.custodian = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POLICYMANAGER_DOCUMENTREFERE_0")
    public Uri getPolicyManager() {
        return policyManager;
    }

    public void setPolicyManager(Uri value) {
        this.policyManager = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHENTICATOR_DOCUMENTREFERE_0")
    public ResourceReference getAuthenticator() {
        return authenticator;
    }

    public void setAuthenticator(ResourceReference value) {
        this.authenticator = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CREATED_DOCUMENTREFERENCE_HJ_0")
    public DateTime getCreated() {
        return created;
    }

    public void setCreated(DateTime value) {
        this.created = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDEXED_DOCUMENTREFERENCE_HJ_0")
    public Instant getIndexed() {
        return indexed;
    }

    public void setIndexed(Instant value) {
        this.indexed = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = DocumentReferenceStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DOCUMENTREFERENCE_HJID")
    public DocumentReferenceStatus getStatus() {
        return status;
    }

    public void setStatus(DocumentReferenceStatus value) {
        this.status = ((DocumentReferenceStatusImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCSTATUS_DOCUMENTREFERENCE__0")
    public CodeableConcept getDocStatus() {
        return docStatus;
    }

    public void setDocStatus(CodeableConcept value) {
        this.docStatus = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = DocumentReferenceRelatesTo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATESTOS_DOCUMENTREFERENCE_0")
    public List<DocumentReferenceRelatesTo> getRelatesTos() {
        if (relatesTos == null) {
            relatesTos = new ArrayList<DocumentReferenceRelatesTo>();
        }
        return this.relatesTos;
    }

    public void setRelatesTos(List<DocumentReferenceRelatesTo> relatesTos) {
        this.relatesTos = relatesTos;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_DOCUMENTREFERENC_0")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONFIDENTIALITIES_DOCUMENTRE_0")
    public List<CodeableConcept> getConfidentialities() {
        if (confidentialities == null) {
            confidentialities = new ArrayList<CodeableConcept>();
        }
        return this.confidentialities;
    }

    public void setConfidentialities(List<CodeableConcept> confidentialities) {
        this.confidentialities = confidentialities;
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIMARYLANGUAGE_DOCUMENTREFE_0")
    public Code getPrimaryLanguage() {
        return primaryLanguage;
    }

    public void setPrimaryLanguage(Code value) {
        this.primaryLanguage = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MIMETYPE_DOCUMENTREFERENCE_H_0")
    public Code getMimeType() {
        return mimeType;
    }

    public void setMimeType(Code value) {
        this.mimeType = ((CodeImpl) value);
    }

    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORMATS_DOCUMENTREFERENCE_HJ_0")
    public List<Uri> getFormats() {
        if (formats == null) {
            formats = new ArrayList<Uri>();
        }
        return this.formats;
    }

    public void setFormats(List<Uri> formats) {
        this.formats = formats;
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SIZE__DOCUMENTREFERENCE_HJID")
    public Integer getSize() {
        return size;
    }

    public void setSize(Integer value) {
        this.size = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HASH_DOCUMENTREFERENCE_HJID")
    public org.hl7.fhir.model.String getHash() {
        return hash;
    }

    public void setHash(org.hl7.fhir.model.String value) {
        this.hash = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__DOCUMENTREFERENCE__0")
    public Uri getLocation() {
        return location;
    }

    public void setLocation(Uri value) {
        this.location = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = DocumentReferenceService.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICE_DOCUMENTREFERENCE_HJ_0")
    public DocumentReferenceService getService() {
        return service;
    }

    public void setService(DocumentReferenceService value) {
        this.service = ((DocumentReferenceServiceImpl) value);
    }

    @ManyToOne(targetEntity = DocumentReferenceContext.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTEXT_DOCUMENTREFERENCE_HJ_0")
    public DocumentReferenceContext getContext() {
        return context;
    }

    public void setContext(DocumentReferenceContext value) {
        this.context = ((DocumentReferenceContextImpl) value);
    }

    public DocumentReferenceImpl withMasterIdentifier(Identifier value) {
        setMasterIdentifier(value);
        return this;
    }

    public DocumentReferenceImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public DocumentReferenceImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public DocumentReferenceImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public DocumentReferenceImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DocumentReferenceImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public DocumentReferenceImpl withClazz(CodeableConcept value) {
        setClazz(value);
        return this;
    }

    public DocumentReferenceImpl withAuthors(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAuthors().add(value);
            }
        }
        return this;
    }

    public DocumentReferenceImpl withAuthors(Collection<ResourceReference> values) {
        if (values!= null) {
            getAuthors().addAll(values);
        }
        return this;
    }

    public DocumentReferenceImpl withAuthors(List<ResourceReference> authors) {
        setAuthors(authors);
        return this;
    }

    public DocumentReferenceImpl withCustodian(ResourceReference value) {
        setCustodian(value);
        return this;
    }

    public DocumentReferenceImpl withPolicyManager(Uri value) {
        setPolicyManager(value);
        return this;
    }

    public DocumentReferenceImpl withAuthenticator(ResourceReference value) {
        setAuthenticator(value);
        return this;
    }

    public DocumentReferenceImpl withCreated(DateTime value) {
        setCreated(value);
        return this;
    }

    public DocumentReferenceImpl withIndexed(Instant value) {
        setIndexed(value);
        return this;
    }

    public DocumentReferenceImpl withStatus(DocumentReferenceStatus value) {
        setStatus(value);
        return this;
    }

    public DocumentReferenceImpl withDocStatus(CodeableConcept value) {
        setDocStatus(value);
        return this;
    }

    public DocumentReferenceImpl withRelatesTos(DocumentReferenceRelatesTo... values) {
        if (values!= null) {
            for (DocumentReferenceRelatesTo value: values) {
                getRelatesTos().add(value);
            }
        }
        return this;
    }

    public DocumentReferenceImpl withRelatesTos(Collection<DocumentReferenceRelatesTo> values) {
        if (values!= null) {
            getRelatesTos().addAll(values);
        }
        return this;
    }

    public DocumentReferenceImpl withRelatesTos(List<DocumentReferenceRelatesTo> relatesTos) {
        setRelatesTos(relatesTos);
        return this;
    }

    public DocumentReferenceImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public DocumentReferenceImpl withConfidentialities(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getConfidentialities().add(value);
            }
        }
        return this;
    }

    public DocumentReferenceImpl withConfidentialities(Collection<CodeableConcept> values) {
        if (values!= null) {
            getConfidentialities().addAll(values);
        }
        return this;
    }

    public DocumentReferenceImpl withConfidentialities(List<CodeableConcept> confidentialities) {
        setConfidentialities(confidentialities);
        return this;
    }

    public DocumentReferenceImpl withPrimaryLanguage(Code value) {
        setPrimaryLanguage(value);
        return this;
    }

    public DocumentReferenceImpl withMimeType(Code value) {
        setMimeType(value);
        return this;
    }

    public DocumentReferenceImpl withFormats(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getFormats().add(value);
            }
        }
        return this;
    }

    public DocumentReferenceImpl withFormats(Collection<Uri> values) {
        if (values!= null) {
            getFormats().addAll(values);
        }
        return this;
    }

    public DocumentReferenceImpl withFormats(List<Uri> formats) {
        setFormats(formats);
        return this;
    }

    public DocumentReferenceImpl withSize(Integer value) {
        setSize(value);
        return this;
    }

    public DocumentReferenceImpl withHash(org.hl7.fhir.model.String value) {
        setHash(value);
        return this;
    }

    public DocumentReferenceImpl withLocation(Uri value) {
        setLocation(value);
        return this;
    }

    public DocumentReferenceImpl withService(DocumentReferenceService value) {
        setService(value);
        return this;
    }

    public DocumentReferenceImpl withContext(DocumentReferenceContext value) {
        setContext(value);
        return this;
    }

    @Override
    public DocumentReferenceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DocumentReferenceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DocumentReferenceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DocumentReferenceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DocumentReferenceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReferenceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DocumentReferenceImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DocumentReferenceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DocumentReferenceImpl that = ((DocumentReferenceImpl) object);
        {
            Identifier lhsMasterIdentifier;
            lhsMasterIdentifier = this.getMasterIdentifier();
            Identifier rhsMasterIdentifier;
            rhsMasterIdentifier = that.getMasterIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "masterIdentifier", lhsMasterIdentifier), LocatorUtils.property(thatLocator, "masterIdentifier", rhsMasterIdentifier), lhsMasterIdentifier, rhsMasterIdentifier)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            CodeableConcept lhsClazz;
            lhsClazz = this.getClazz();
            CodeableConcept rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAuthors;
            lhsAuthors = (((this.authors!= null)&&(!this.authors.isEmpty()))?this.getAuthors():null);
            List<ResourceReference> rhsAuthors;
            rhsAuthors = (((that.authors!= null)&&(!that.authors.isEmpty()))?that.getAuthors():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authors", lhsAuthors), LocatorUtils.property(thatLocator, "authors", rhsAuthors), lhsAuthors, rhsAuthors)) {
                return false;
            }
        }
        {
            ResourceReference lhsCustodian;
            lhsCustodian = this.getCustodian();
            ResourceReference rhsCustodian;
            rhsCustodian = that.getCustodian();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "custodian", lhsCustodian), LocatorUtils.property(thatLocator, "custodian", rhsCustodian), lhsCustodian, rhsCustodian)) {
                return false;
            }
        }
        {
            Uri lhsPolicyManager;
            lhsPolicyManager = this.getPolicyManager();
            Uri rhsPolicyManager;
            rhsPolicyManager = that.getPolicyManager();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "policyManager", lhsPolicyManager), LocatorUtils.property(thatLocator, "policyManager", rhsPolicyManager), lhsPolicyManager, rhsPolicyManager)) {
                return false;
            }
        }
        {
            ResourceReference lhsAuthenticator;
            lhsAuthenticator = this.getAuthenticator();
            ResourceReference rhsAuthenticator;
            rhsAuthenticator = that.getAuthenticator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authenticator", lhsAuthenticator), LocatorUtils.property(thatLocator, "authenticator", rhsAuthenticator), lhsAuthenticator, rhsAuthenticator)) {
                return false;
            }
        }
        {
            DateTime lhsCreated;
            lhsCreated = this.getCreated();
            DateTime rhsCreated;
            rhsCreated = that.getCreated();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                return false;
            }
        }
        {
            Instant lhsIndexed;
            lhsIndexed = this.getIndexed();
            Instant rhsIndexed;
            rhsIndexed = that.getIndexed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexed", lhsIndexed), LocatorUtils.property(thatLocator, "indexed", rhsIndexed), lhsIndexed, rhsIndexed)) {
                return false;
            }
        }
        {
            DocumentReferenceStatus lhsStatus;
            lhsStatus = this.getStatus();
            DocumentReferenceStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsDocStatus;
            lhsDocStatus = this.getDocStatus();
            CodeableConcept rhsDocStatus;
            rhsDocStatus = that.getDocStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "docStatus", lhsDocStatus), LocatorUtils.property(thatLocator, "docStatus", rhsDocStatus), lhsDocStatus, rhsDocStatus)) {
                return false;
            }
        }
        {
            List<DocumentReferenceRelatesTo> lhsRelatesTos;
            lhsRelatesTos = (((this.relatesTos!= null)&&(!this.relatesTos.isEmpty()))?this.getRelatesTos():null);
            List<DocumentReferenceRelatesTo> rhsRelatesTos;
            rhsRelatesTos = (((that.relatesTos!= null)&&(!that.relatesTos.isEmpty()))?that.getRelatesTos():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatesTos", lhsRelatesTos), LocatorUtils.property(thatLocator, "relatesTos", rhsRelatesTos), lhsRelatesTos, rhsRelatesTos)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsConfidentialities;
            lhsConfidentialities = (((this.confidentialities!= null)&&(!this.confidentialities.isEmpty()))?this.getConfidentialities():null);
            List<CodeableConcept> rhsConfidentialities;
            rhsConfidentialities = (((that.confidentialities!= null)&&(!that.confidentialities.isEmpty()))?that.getConfidentialities():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confidentialities", lhsConfidentialities), LocatorUtils.property(thatLocator, "confidentialities", rhsConfidentialities), lhsConfidentialities, rhsConfidentialities)) {
                return false;
            }
        }
        {
            Code lhsPrimaryLanguage;
            lhsPrimaryLanguage = this.getPrimaryLanguage();
            Code rhsPrimaryLanguage;
            rhsPrimaryLanguage = that.getPrimaryLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "primaryLanguage", lhsPrimaryLanguage), LocatorUtils.property(thatLocator, "primaryLanguage", rhsPrimaryLanguage), lhsPrimaryLanguage, rhsPrimaryLanguage)) {
                return false;
            }
        }
        {
            Code lhsMimeType;
            lhsMimeType = this.getMimeType();
            Code rhsMimeType;
            rhsMimeType = that.getMimeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mimeType", lhsMimeType), LocatorUtils.property(thatLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType)) {
                return false;
            }
        }
        {
            List<Uri> lhsFormats;
            lhsFormats = (((this.formats!= null)&&(!this.formats.isEmpty()))?this.getFormats():null);
            List<Uri> rhsFormats;
            rhsFormats = (((that.formats!= null)&&(!that.formats.isEmpty()))?that.getFormats():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "formats", lhsFormats), LocatorUtils.property(thatLocator, "formats", rhsFormats), lhsFormats, rhsFormats)) {
                return false;
            }
        }
        {
            Integer lhsSize;
            lhsSize = this.getSize();
            Integer rhsSize;
            rhsSize = that.getSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "size", lhsSize), LocatorUtils.property(thatLocator, "size", rhsSize), lhsSize, rhsSize)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsHash;
            lhsHash = this.getHash();
            org.hl7.fhir.model.String rhsHash;
            rhsHash = that.getHash();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hash", lhsHash), LocatorUtils.property(thatLocator, "hash", rhsHash), lhsHash, rhsHash)) {
                return false;
            }
        }
        {
            Uri lhsLocation;
            lhsLocation = this.getLocation();
            Uri rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            DocumentReferenceService lhsService;
            lhsService = this.getService();
            DocumentReferenceService rhsService;
            rhsService = that.getService();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "service", lhsService), LocatorUtils.property(thatLocator, "service", rhsService), lhsService, rhsService)) {
                return false;
            }
        }
        {
            DocumentReferenceContext lhsContext;
            lhsContext = this.getContext();
            DocumentReferenceContext rhsContext;
            rhsContext = that.getContext();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "context", lhsContext), LocatorUtils.property(thatLocator, "context", rhsContext), lhsContext, rhsContext)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theMasterIdentifier;
            theMasterIdentifier = this.getMasterIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "masterIdentifier", theMasterIdentifier), currentHashCode, theMasterIdentifier);
        }
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            CodeableConcept theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<ResourceReference> theAuthors;
            theAuthors = (((this.authors!= null)&&(!this.authors.isEmpty()))?this.getAuthors():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authors", theAuthors), currentHashCode, theAuthors);
        }
        {
            ResourceReference theCustodian;
            theCustodian = this.getCustodian();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "custodian", theCustodian), currentHashCode, theCustodian);
        }
        {
            Uri thePolicyManager;
            thePolicyManager = this.getPolicyManager();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "policyManager", thePolicyManager), currentHashCode, thePolicyManager);
        }
        {
            ResourceReference theAuthenticator;
            theAuthenticator = this.getAuthenticator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authenticator", theAuthenticator), currentHashCode, theAuthenticator);
        }
        {
            DateTime theCreated;
            theCreated = this.getCreated();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
        }
        {
            Instant theIndexed;
            theIndexed = this.getIndexed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexed", theIndexed), currentHashCode, theIndexed);
        }
        {
            DocumentReferenceStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theDocStatus;
            theDocStatus = this.getDocStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "docStatus", theDocStatus), currentHashCode, theDocStatus);
        }
        {
            List<DocumentReferenceRelatesTo> theRelatesTos;
            theRelatesTos = (((this.relatesTos!= null)&&(!this.relatesTos.isEmpty()))?this.getRelatesTos():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatesTos", theRelatesTos), currentHashCode, theRelatesTos);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<CodeableConcept> theConfidentialities;
            theConfidentialities = (((this.confidentialities!= null)&&(!this.confidentialities.isEmpty()))?this.getConfidentialities():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confidentialities", theConfidentialities), currentHashCode, theConfidentialities);
        }
        {
            Code thePrimaryLanguage;
            thePrimaryLanguage = this.getPrimaryLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primaryLanguage", thePrimaryLanguage), currentHashCode, thePrimaryLanguage);
        }
        {
            Code theMimeType;
            theMimeType = this.getMimeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mimeType", theMimeType), currentHashCode, theMimeType);
        }
        {
            List<Uri> theFormats;
            theFormats = (((this.formats!= null)&&(!this.formats.isEmpty()))?this.getFormats():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "formats", theFormats), currentHashCode, theFormats);
        }
        {
            Integer theSize;
            theSize = this.getSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "size", theSize), currentHashCode, theSize);
        }
        {
            org.hl7.fhir.model.String theHash;
            theHash = this.getHash();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hash", theHash), currentHashCode, theHash);
        }
        {
            Uri theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            DocumentReferenceService theService;
            theService = this.getService();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "service", theService), currentHashCode, theService);
        }
        {
            DocumentReferenceContext theContext;
            theContext = this.getContext();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "context", theContext), currentHashCode, theContext);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
