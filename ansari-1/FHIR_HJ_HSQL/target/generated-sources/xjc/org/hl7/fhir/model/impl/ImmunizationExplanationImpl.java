//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ImmunizationExplanation;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Immunization.Explanation", propOrder = {
    "reasons",
    "refusalReasons"
})
public class ImmunizationExplanationImpl
    extends BackboneElementImpl
    implements Serializable, ImmunizationExplanation, Equals, HashCode
{

    @XmlElement(name = "reason", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> reasons;
    @XmlElement(name = "refusalReason", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> refusalReasons;

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONS_IMMUNIZATIONEXPLANAT_0")
    public List<CodeableConcept> getReasons() {
        if (reasons == null) {
            reasons = new ArrayList<CodeableConcept>();
        }
        return this.reasons;
    }

    public void setReasons(List<CodeableConcept> reasons) {
        this.reasons = reasons;
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFUSALREASONS_IMMUNIZATIONE_0")
    public List<CodeableConcept> getRefusalReasons() {
        if (refusalReasons == null) {
            refusalReasons = new ArrayList<CodeableConcept>();
        }
        return this.refusalReasons;
    }

    public void setRefusalReasons(List<CodeableConcept> refusalReasons) {
        this.refusalReasons = refusalReasons;
    }

    public ImmunizationExplanationImpl withReasons(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getReasons().add(value);
            }
        }
        return this;
    }

    public ImmunizationExplanationImpl withReasons(Collection<CodeableConcept> values) {
        if (values!= null) {
            getReasons().addAll(values);
        }
        return this;
    }

    public ImmunizationExplanationImpl withReasons(List<CodeableConcept> reasons) {
        setReasons(reasons);
        return this;
    }

    public ImmunizationExplanationImpl withRefusalReasons(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getRefusalReasons().add(value);
            }
        }
        return this;
    }

    public ImmunizationExplanationImpl withRefusalReasons(Collection<CodeableConcept> values) {
        if (values!= null) {
            getRefusalReasons().addAll(values);
        }
        return this;
    }

    public ImmunizationExplanationImpl withRefusalReasons(List<CodeableConcept> refusalReasons) {
        setRefusalReasons(refusalReasons);
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ImmunizationExplanationImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImmunizationExplanationImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImmunizationExplanationImpl that = ((ImmunizationExplanationImpl) object);
        {
            List<CodeableConcept> lhsReasons;
            lhsReasons = (((this.reasons!= null)&&(!this.reasons.isEmpty()))?this.getReasons():null);
            List<CodeableConcept> rhsReasons;
            rhsReasons = (((that.reasons!= null)&&(!that.reasons.isEmpty()))?that.getReasons():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasons", lhsReasons), LocatorUtils.property(thatLocator, "reasons", rhsReasons), lhsReasons, rhsReasons)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsRefusalReasons;
            lhsRefusalReasons = (((this.refusalReasons!= null)&&(!this.refusalReasons.isEmpty()))?this.getRefusalReasons():null);
            List<CodeableConcept> rhsRefusalReasons;
            rhsRefusalReasons = (((that.refusalReasons!= null)&&(!that.refusalReasons.isEmpty()))?that.getRefusalReasons():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refusalReasons", lhsRefusalReasons), LocatorUtils.property(thatLocator, "refusalReasons", rhsRefusalReasons), lhsRefusalReasons, rhsRefusalReasons)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theReasons;
            theReasons = (((this.reasons!= null)&&(!this.reasons.isEmpty()))?this.getReasons():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasons", theReasons), currentHashCode, theReasons);
        }
        {
            List<CodeableConcept> theRefusalReasons;
            theRefusalReasons = (((this.refusalReasons!= null)&&(!this.refusalReasons.isEmpty()))?this.getRefusalReasons():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refusalReasons", theRefusalReasons), currentHashCode, theRefusalReasons);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
