//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.OperationOutcome;
import org.hl7.fhir.model.OperationOutcomeIssue;
import org.hl7.fhir.model.ResourceInline;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "OperationOutcome", propOrder = {
    "issues"
})
@XmlRootElement(name = "OperationOutcome")
public class OperationOutcomeImpl
    extends ResourceImpl
    implements Serializable, OperationOutcome, Equals, HashCode
{

    @XmlElement(name = "issue", required = true, type = OperationOutcomeIssueImpl.class)
    protected List<OperationOutcomeIssue> issues;

    @OneToMany(targetEntity = OperationOutcomeIssue.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ISSUES_OPERATIONOUTCOME_HJID")
    public List<OperationOutcomeIssue> getIssues() {
        if (issues == null) {
            issues = new ArrayList<OperationOutcomeIssue>();
        }
        return this.issues;
    }

    public void setIssues(List<OperationOutcomeIssue> issues) {
        this.issues = issues;
    }

    public OperationOutcomeImpl withIssues(OperationOutcomeIssue... values) {
        if (values!= null) {
            for (OperationOutcomeIssue value: values) {
                getIssues().add(value);
            }
        }
        return this;
    }

    public OperationOutcomeImpl withIssues(Collection<OperationOutcomeIssue> values) {
        if (values!= null) {
            getIssues().addAll(values);
        }
        return this;
    }

    public OperationOutcomeImpl withIssues(List<OperationOutcomeIssue> issues) {
        setIssues(issues);
        return this;
    }

    @Override
    public OperationOutcomeImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public OperationOutcomeImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public OperationOutcomeImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public OperationOutcomeImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public OperationOutcomeImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public OperationOutcomeImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public OperationOutcomeImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof OperationOutcomeImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final OperationOutcomeImpl that = ((OperationOutcomeImpl) object);
        {
            List<OperationOutcomeIssue> lhsIssues;
            lhsIssues = (((this.issues!= null)&&(!this.issues.isEmpty()))?this.getIssues():null);
            List<OperationOutcomeIssue> rhsIssues;
            rhsIssues = (((that.issues!= null)&&(!that.issues.isEmpty()))?that.getIssues():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issues", lhsIssues), LocatorUtils.property(thatLocator, "issues", rhsIssues), lhsIssues, rhsIssues)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<OperationOutcomeIssue> theIssues;
            theIssues = (((this.issues!= null)&&(!this.issues.isEmpty()))?this.getIssues():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issues", theIssues), currentHashCode, theIssues);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
