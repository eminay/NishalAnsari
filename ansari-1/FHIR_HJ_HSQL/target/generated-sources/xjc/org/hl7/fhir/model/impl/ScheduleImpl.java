//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Schedule;
import org.hl7.fhir.model.ScheduleRepeat;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Schedule", propOrder = {
    "events",
    "repeat"
})
public class ScheduleImpl
    extends ElementImpl
    implements Serializable, Schedule, Equals, HashCode
{

    @XmlElement(name = "event", type = PeriodImpl.class)
    protected List<Period> events;
    @XmlElement(type = ScheduleRepeatImpl.class)
    protected ScheduleRepeatImpl repeat;

    @OneToMany(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_SCHEDULE_HJID")
    public List<Period> getEvents() {
        if (events == null) {
            events = new ArrayList<Period>();
        }
        return this.events;
    }

    public void setEvents(List<Period> events) {
        this.events = events;
    }

    @ManyToOne(targetEntity = ScheduleRepeat.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REPEAT_SCHEDULE_HJID")
    public ScheduleRepeat getRepeat() {
        return repeat;
    }

    public void setRepeat(ScheduleRepeat value) {
        this.repeat = ((ScheduleRepeatImpl) value);
    }

    public ScheduleImpl withEvents(Period... values) {
        if (values!= null) {
            for (Period value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public ScheduleImpl withEvents(Collection<Period> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public ScheduleImpl withEvents(List<Period> events) {
        setEvents(events);
        return this;
    }

    public ScheduleImpl withRepeat(ScheduleRepeat value) {
        setRepeat(value);
        return this;
    }

    @Override
    public ScheduleImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ScheduleImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ScheduleImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ScheduleImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ScheduleImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ScheduleImpl that = ((ScheduleImpl) object);
        {
            List<Period> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<Period> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        {
            ScheduleRepeat lhsRepeat;
            lhsRepeat = this.getRepeat();
            ScheduleRepeat rhsRepeat;
            rhsRepeat = that.getRepeat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "repeat", lhsRepeat), LocatorUtils.property(thatLocator, "repeat", rhsRepeat), lhsRepeat, rhsRepeat)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Period> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        {
            ScheduleRepeat theRepeat;
            theRepeat = this.getRepeat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "repeat", theRepeat), currentHashCode, theRepeat);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
