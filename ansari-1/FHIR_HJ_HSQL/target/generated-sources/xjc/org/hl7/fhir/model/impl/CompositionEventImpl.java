//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.CompositionEvent;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Composition.Event", propOrder = {
    "codes",
    "period",
    "details"
})
public class CompositionEventImpl
    extends BackboneElementImpl
    implements Serializable, CompositionEvent, Equals, HashCode
{

    @XmlElement(name = "code", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> codes;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(name = "detail", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> details;

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODES_COMPOSITIONEVENT_HJID")
    public List<CodeableConcept> getCodes() {
        if (codes == null) {
            codes = new ArrayList<CodeableConcept>();
        }
        return this.codes;
    }

    public void setCodes(List<CodeableConcept> codes) {
        this.codes = codes;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_COMPOSITIONEVENT_HJID")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DETAILS_COMPOSITIONEVENT_HJID")
    public List<ResourceReference> getDetails() {
        if (details == null) {
            details = new ArrayList<ResourceReference>();
        }
        return this.details;
    }

    public void setDetails(List<ResourceReference> details) {
        this.details = details;
    }

    public CompositionEventImpl withCodes(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCodes().add(value);
            }
        }
        return this;
    }

    public CompositionEventImpl withCodes(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCodes().addAll(values);
        }
        return this;
    }

    public CompositionEventImpl withCodes(List<CodeableConcept> codes) {
        setCodes(codes);
        return this;
    }

    public CompositionEventImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public CompositionEventImpl withDetails(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getDetails().add(value);
            }
        }
        return this;
    }

    public CompositionEventImpl withDetails(Collection<ResourceReference> values) {
        if (values!= null) {
            getDetails().addAll(values);
        }
        return this;
    }

    public CompositionEventImpl withDetails(List<ResourceReference> details) {
        setDetails(details);
        return this;
    }

    @Override
    public CompositionEventImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CompositionEventImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CompositionEventImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public CompositionEventImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CompositionEventImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CompositionEventImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public CompositionEventImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CompositionEventImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CompositionEventImpl that = ((CompositionEventImpl) object);
        {
            List<CodeableConcept> lhsCodes;
            lhsCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            List<CodeableConcept> rhsCodes;
            rhsCodes = (((that.codes!= null)&&(!that.codes.isEmpty()))?that.getCodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codes", lhsCodes), LocatorUtils.property(thatLocator, "codes", rhsCodes), lhsCodes, rhsCodes)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsDetails;
            lhsDetails = (((this.details!= null)&&(!this.details.isEmpty()))?this.getDetails():null);
            List<ResourceReference> rhsDetails;
            rhsDetails = (((that.details!= null)&&(!that.details.isEmpty()))?that.getDetails():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "details", lhsDetails), LocatorUtils.property(thatLocator, "details", rhsDetails), lhsDetails, rhsDetails)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theCodes;
            theCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codes", theCodes), currentHashCode, theCodes);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            List<ResourceReference> theDetails;
            theDetails = (((this.details!= null)&&(!this.details.isEmpty()))?this.getDetails():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "details", theDetails), currentHashCode, theDetails);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
