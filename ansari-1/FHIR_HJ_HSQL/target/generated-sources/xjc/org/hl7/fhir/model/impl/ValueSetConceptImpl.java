//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ValueSetConcept;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValueSet.Concept", propOrder = {
    "code",
    "_abstract",
    "display",
    "definition",
    "concepts"
})
public class ValueSetConceptImpl
    extends BackboneElementImpl
    implements Serializable, ValueSetConcept, Equals, HashCode
{

    @XmlElement(required = true, type = CodeImpl.class)
    protected CodeImpl code;
    @XmlElement(name = "abstract", type = BooleanImpl.class)
    protected BooleanImpl _abstract;
    @XmlElement(type = StringImpl.class)
    protected StringImpl display;
    @XmlElement(type = StringImpl.class)
    protected StringImpl definition;
    @XmlElement(name = "concept", type = ValueSetConceptImpl.class)
    protected List<ValueSetConcept> concepts;

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_VALUESETCONCEPT_HJID")
    public Code getCode() {
        return code;
    }

    public void setCode(Code value) {
        this.code = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABSTRACT_VALUESETCONCEPT_HJID")
    public Boolean getAbstract() {
        return _abstract;
    }

    public void setAbstract(Boolean value) {
        this._abstract = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPLAY_VALUESETCONCEPT_HJID")
    public org.hl7.fhir.model.String getDisplay() {
        return display;
    }

    public void setDisplay(org.hl7.fhir.model.String value) {
        this.display = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEFINITION_VALUESETCONCEPT_H_0")
    public org.hl7.fhir.model.String getDefinition() {
        return definition;
    }

    public void setDefinition(org.hl7.fhir.model.String value) {
        this.definition = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ValueSetConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCEPTS_VALUESETCONCEPT_HJID")
    public List<ValueSetConcept> getConcepts() {
        if (concepts == null) {
            concepts = new ArrayList<ValueSetConcept>();
        }
        return this.concepts;
    }

    public void setConcepts(List<ValueSetConcept> concepts) {
        this.concepts = concepts;
    }

    public ValueSetConceptImpl withCode(Code value) {
        setCode(value);
        return this;
    }

    public ValueSetConceptImpl withAbstract(Boolean value) {
        setAbstract(value);
        return this;
    }

    public ValueSetConceptImpl withDisplay(org.hl7.fhir.model.String value) {
        setDisplay(value);
        return this;
    }

    public ValueSetConceptImpl withDefinition(org.hl7.fhir.model.String value) {
        setDefinition(value);
        return this;
    }

    public ValueSetConceptImpl withConcepts(ValueSetConcept... values) {
        if (values!= null) {
            for (ValueSetConcept value: values) {
                getConcepts().add(value);
            }
        }
        return this;
    }

    public ValueSetConceptImpl withConcepts(Collection<ValueSetConcept> values) {
        if (values!= null) {
            getConcepts().addAll(values);
        }
        return this;
    }

    public ValueSetConceptImpl withConcepts(List<ValueSetConcept> concepts) {
        setConcepts(concepts);
        return this;
    }

    @Override
    public ValueSetConceptImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetConceptImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetConceptImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ValueSetConceptImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetConceptImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetConceptImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ValueSetConceptImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValueSetConceptImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ValueSetConceptImpl that = ((ValueSetConceptImpl) object);
        {
            Code lhsCode;
            lhsCode = this.getCode();
            Code rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            Boolean lhsAbstract;
            lhsAbstract = this.getAbstract();
            Boolean rhsAbstract;
            rhsAbstract = that.getAbstract();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "_abstract", lhsAbstract), LocatorUtils.property(thatLocator, "_abstract", rhsAbstract), lhsAbstract, rhsAbstract)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDisplay;
            lhsDisplay = this.getDisplay();
            org.hl7.fhir.model.String rhsDisplay;
            rhsDisplay = that.getDisplay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "display", lhsDisplay), LocatorUtils.property(thatLocator, "display", rhsDisplay), lhsDisplay, rhsDisplay)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDefinition;
            lhsDefinition = this.getDefinition();
            org.hl7.fhir.model.String rhsDefinition;
            rhsDefinition = that.getDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "definition", lhsDefinition), LocatorUtils.property(thatLocator, "definition", rhsDefinition), lhsDefinition, rhsDefinition)) {
                return false;
            }
        }
        {
            List<ValueSetConcept> lhsConcepts;
            lhsConcepts = (((this.concepts!= null)&&(!this.concepts.isEmpty()))?this.getConcepts():null);
            List<ValueSetConcept> rhsConcepts;
            rhsConcepts = (((that.concepts!= null)&&(!that.concepts.isEmpty()))?that.getConcepts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concepts", lhsConcepts), LocatorUtils.property(thatLocator, "concepts", rhsConcepts), lhsConcepts, rhsConcepts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            Boolean theAbstract;
            theAbstract = this.getAbstract();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "_abstract", theAbstract), currentHashCode, theAbstract);
        }
        {
            org.hl7.fhir.model.String theDisplay;
            theDisplay = this.getDisplay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "display", theDisplay), currentHashCode, theDisplay);
        }
        {
            org.hl7.fhir.model.String theDefinition;
            theDefinition = this.getDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "definition", theDefinition), currentHashCode, theDefinition);
        }
        {
            List<ValueSetConcept> theConcepts;
            theConcepts = (((this.concepts!= null)&&(!this.concepts.isEmpty()))?this.getConcepts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concepts", theConcepts), currentHashCode, theConcepts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
