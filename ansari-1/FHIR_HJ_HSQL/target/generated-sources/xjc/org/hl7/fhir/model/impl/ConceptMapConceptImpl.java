//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.ConceptMapConcept;
import org.hl7.fhir.model.ConceptMapDependsOn;
import org.hl7.fhir.model.ConceptMapMap;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConceptMap.Concept", propOrder = {
    "system",
    "code",
    "dependsOns",
    "maps"
})
public class ConceptMapConceptImpl
    extends BackboneElementImpl
    implements Serializable, ConceptMapConcept, Equals, HashCode
{

    @XmlElement(required = true, type = UriImpl.class)
    protected UriImpl system;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl code;
    @XmlElement(name = "dependsOn", type = ConceptMapDependsOnImpl.class)
    protected List<ConceptMapDependsOn> dependsOns;
    @XmlElement(name = "map", type = ConceptMapMapImpl.class)
    protected List<ConceptMapMap> maps;

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__CONCEPTMAPCONCEPT_HJ_0")
    public Uri getSystem() {
        return system;
    }

    public void setSystem(Uri value) {
        this.system = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONCEPTMAPCONCEPT_HJID")
    public Code getCode() {
        return code;
    }

    public void setCode(Code value) {
        this.code = ((CodeImpl) value);
    }

    @OneToMany(targetEntity = ConceptMapDependsOn.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEPENDSONS_CONCEPTMAPCONCEPT_0")
    public List<ConceptMapDependsOn> getDependsOns() {
        if (dependsOns == null) {
            dependsOns = new ArrayList<ConceptMapDependsOn>();
        }
        return this.dependsOns;
    }

    public void setDependsOns(List<ConceptMapDependsOn> dependsOns) {
        this.dependsOns = dependsOns;
    }

    @OneToMany(targetEntity = ConceptMapMap.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MAPS_CONCEPTMAPCONCEPT_HJID")
    public List<ConceptMapMap> getMaps() {
        if (maps == null) {
            maps = new ArrayList<ConceptMapMap>();
        }
        return this.maps;
    }

    public void setMaps(List<ConceptMapMap> maps) {
        this.maps = maps;
    }

    public ConceptMapConceptImpl withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ConceptMapConceptImpl withCode(Code value) {
        setCode(value);
        return this;
    }

    public ConceptMapConceptImpl withDependsOns(ConceptMapDependsOn... values) {
        if (values!= null) {
            for (ConceptMapDependsOn value: values) {
                getDependsOns().add(value);
            }
        }
        return this;
    }

    public ConceptMapConceptImpl withDependsOns(Collection<ConceptMapDependsOn> values) {
        if (values!= null) {
            getDependsOns().addAll(values);
        }
        return this;
    }

    public ConceptMapConceptImpl withDependsOns(List<ConceptMapDependsOn> dependsOns) {
        setDependsOns(dependsOns);
        return this;
    }

    public ConceptMapConceptImpl withMaps(ConceptMapMap... values) {
        if (values!= null) {
            for (ConceptMapMap value: values) {
                getMaps().add(value);
            }
        }
        return this;
    }

    public ConceptMapConceptImpl withMaps(Collection<ConceptMapMap> values) {
        if (values!= null) {
            getMaps().addAll(values);
        }
        return this;
    }

    public ConceptMapConceptImpl withMaps(List<ConceptMapMap> maps) {
        setMaps(maps);
        return this;
    }

    @Override
    public ConceptMapConceptImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapConceptImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapConceptImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConceptMapConceptImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapConceptImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapConceptImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConceptMapConceptImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConceptMapConceptImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConceptMapConceptImpl that = ((ConceptMapConceptImpl) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            Code lhsCode;
            lhsCode = this.getCode();
            Code rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            List<ConceptMapDependsOn> lhsDependsOns;
            lhsDependsOns = (((this.dependsOns!= null)&&(!this.dependsOns.isEmpty()))?this.getDependsOns():null);
            List<ConceptMapDependsOn> rhsDependsOns;
            rhsDependsOns = (((that.dependsOns!= null)&&(!that.dependsOns.isEmpty()))?that.getDependsOns():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dependsOns", lhsDependsOns), LocatorUtils.property(thatLocator, "dependsOns", rhsDependsOns), lhsDependsOns, rhsDependsOns)) {
                return false;
            }
        }
        {
            List<ConceptMapMap> lhsMaps;
            lhsMaps = (((this.maps!= null)&&(!this.maps.isEmpty()))?this.getMaps():null);
            List<ConceptMapMap> rhsMaps;
            rhsMaps = (((that.maps!= null)&&(!that.maps.isEmpty()))?that.getMaps():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maps", lhsMaps), LocatorUtils.property(thatLocator, "maps", rhsMaps), lhsMaps, rhsMaps)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            Code theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            List<ConceptMapDependsOn> theDependsOns;
            theDependsOns = (((this.dependsOns!= null)&&(!this.dependsOns.isEmpty()))?this.getDependsOns():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dependsOns", theDependsOns), currentHashCode, theDependsOns);
        }
        {
            List<ConceptMapMap> theMaps;
            theMaps = (((this.maps!= null)&&(!this.maps.isEmpty()))?this.getMaps():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maps", theMaps), currentHashCode, theMaps);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
