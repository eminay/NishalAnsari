//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Profile;
import org.hl7.fhir.model.ProfileExtensionDefn;
import org.hl7.fhir.model.ProfileMapping;
import org.hl7.fhir.model.ProfileQuery;
import org.hl7.fhir.model.ProfileStructure;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceProfileStatus;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile", propOrder = {
    "identifier",
    "version",
    "name",
    "publisher",
    "telecoms",
    "description",
    "codes",
    "status",
    "experimental",
    "date",
    "requirements",
    "fhirVersion",
    "mappings",
    "structures",
    "extensionDefns",
    "queries"
})
@XmlRootElement(name = "Profile")
public class ProfileImpl
    extends ResourceImpl
    implements Serializable, Profile, Equals, HashCode
{

    @XmlElement(type = StringImpl.class)
    protected StringImpl identifier;
    @XmlElement(type = StringImpl.class)
    protected StringImpl version;
    @XmlElement(required = true, type = StringImpl.class)
    protected StringImpl name;
    @XmlElement(type = StringImpl.class)
    protected StringImpl publisher;
    @XmlElement(name = "telecom", type = ContactImpl.class)
    protected List<Contact> telecoms;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(name = "code", type = CodingImpl.class)
    protected List<Coding> codes;
    @XmlElement(required = true, type = ResourceProfileStatusImpl.class)
    protected ResourceProfileStatusImpl status;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl experimental;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(type = StringImpl.class)
    protected StringImpl requirements;
    @XmlElement(type = IdImpl.class)
    protected IdImpl fhirVersion;
    @XmlElement(name = "mapping", type = ProfileMappingImpl.class)
    protected List<ProfileMapping> mappings;
    @XmlElement(name = "structure", type = ProfileStructureImpl.class)
    protected List<ProfileStructure> structures;
    @XmlElement(name = "extensionDefn", type = ProfileExtensionDefnImpl.class)
    protected List<ProfileExtensionDefn> extensionDefns;
    @XmlElement(name = "query", type = ProfileQueryImpl.class)
    protected List<ProfileQuery> queries;

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_PROFILE_HJID")
    public org.hl7.fhir.model.String getIdentifier() {
        return identifier;
    }

    public void setIdentifier(org.hl7.fhir.model.String value) {
        this.identifier = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__PROFILE_HJID")
    public org.hl7.fhir.model.String getVersion() {
        return version;
    }

    public void setVersion(org.hl7.fhir.model.String value) {
        this.version = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PROFILE_HJID")
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    public void setName(org.hl7.fhir.model.String value) {
        this.name = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PUBLISHER_PROFILE_HJID")
    public org.hl7.fhir.model.String getPublisher() {
        return publisher;
    }

    public void setPublisher(org.hl7.fhir.model.String value) {
        this.publisher = ((StringImpl) value);
    }

    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOMS_PROFILE_HJID")
    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    public void setTelecoms(List<Contact> telecoms) {
        this.telecoms = telecoms;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_PROFILE_HJID")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @OneToMany(targetEntity = Coding.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODES_PROFILE_HJID")
    public List<Coding> getCodes() {
        if (codes == null) {
            codes = new ArrayList<Coding>();
        }
        return this.codes;
    }

    public void setCodes(List<Coding> codes) {
        this.codes = codes;
    }

    @ManyToOne(targetEntity = ResourceProfileStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_PROFILE_HJID")
    public ResourceProfileStatus getStatus() {
        return status;
    }

    public void setStatus(ResourceProfileStatus value) {
        this.status = ((ResourceProfileStatusImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPERIMENTAL_PROFILE_HJID")
    public Boolean getExperimental() {
        return experimental;
    }

    public void setExperimental(Boolean value) {
        this.experimental = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__PROFILE_HJID")
    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REQUIREMENTS_PROFILE_HJID")
    public org.hl7.fhir.model.String getRequirements() {
        return requirements;
    }

    public void setRequirements(org.hl7.fhir.model.String value) {
        this.requirements = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FHIRVERSION_PROFILE_HJID")
    public Id getFhirVersion() {
        return fhirVersion;
    }

    public void setFhirVersion(Id value) {
        this.fhirVersion = ((IdImpl) value);
    }

    @OneToMany(targetEntity = ProfileMapping.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MAPPINGS_PROFILE_HJID")
    public List<ProfileMapping> getMappings() {
        if (mappings == null) {
            mappings = new ArrayList<ProfileMapping>();
        }
        return this.mappings;
    }

    public void setMappings(List<ProfileMapping> mappings) {
        this.mappings = mappings;
    }

    @OneToMany(targetEntity = ProfileStructure.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STRUCTURES_PROFILE_HJID")
    public List<ProfileStructure> getStructures() {
        if (structures == null) {
            structures = new ArrayList<ProfileStructure>();
        }
        return this.structures;
    }

    public void setStructures(List<ProfileStructure> structures) {
        this.structures = structures;
    }

    @OneToMany(targetEntity = ProfileExtensionDefn.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXTENSIONDEFNS_PROFILE_HJID")
    public List<ProfileExtensionDefn> getExtensionDefns() {
        if (extensionDefns == null) {
            extensionDefns = new ArrayList<ProfileExtensionDefn>();
        }
        return this.extensionDefns;
    }

    public void setExtensionDefns(List<ProfileExtensionDefn> extensionDefns) {
        this.extensionDefns = extensionDefns;
    }

    @OneToMany(targetEntity = ProfileQuery.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUERIES_PROFILE_HJID")
    public List<ProfileQuery> getQueries() {
        if (queries == null) {
            queries = new ArrayList<ProfileQuery>();
        }
        return this.queries;
    }

    public void setQueries(List<ProfileQuery> queries) {
        this.queries = queries;
    }

    public ProfileImpl withIdentifier(org.hl7.fhir.model.String value) {
        setIdentifier(value);
        return this;
    }

    public ProfileImpl withVersion(org.hl7.fhir.model.String value) {
        setVersion(value);
        return this;
    }

    public ProfileImpl withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public ProfileImpl withPublisher(org.hl7.fhir.model.String value) {
        setPublisher(value);
        return this;
    }

    public ProfileImpl withTelecoms(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecoms().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withTelecoms(Collection<Contact> values) {
        if (values!= null) {
            getTelecoms().addAll(values);
        }
        return this;
    }

    public ProfileImpl withTelecoms(List<Contact> telecoms) {
        setTelecoms(telecoms);
        return this;
    }

    public ProfileImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public ProfileImpl withCodes(Coding... values) {
        if (values!= null) {
            for (Coding value: values) {
                getCodes().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withCodes(Collection<Coding> values) {
        if (values!= null) {
            getCodes().addAll(values);
        }
        return this;
    }

    public ProfileImpl withCodes(List<Coding> codes) {
        setCodes(codes);
        return this;
    }

    public ProfileImpl withStatus(ResourceProfileStatus value) {
        setStatus(value);
        return this;
    }

    public ProfileImpl withExperimental(Boolean value) {
        setExperimental(value);
        return this;
    }

    public ProfileImpl withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public ProfileImpl withRequirements(org.hl7.fhir.model.String value) {
        setRequirements(value);
        return this;
    }

    public ProfileImpl withFhirVersion(Id value) {
        setFhirVersion(value);
        return this;
    }

    public ProfileImpl withMappings(ProfileMapping... values) {
        if (values!= null) {
            for (ProfileMapping value: values) {
                getMappings().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withMappings(Collection<ProfileMapping> values) {
        if (values!= null) {
            getMappings().addAll(values);
        }
        return this;
    }

    public ProfileImpl withMappings(List<ProfileMapping> mappings) {
        setMappings(mappings);
        return this;
    }

    public ProfileImpl withStructures(ProfileStructure... values) {
        if (values!= null) {
            for (ProfileStructure value: values) {
                getStructures().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withStructures(Collection<ProfileStructure> values) {
        if (values!= null) {
            getStructures().addAll(values);
        }
        return this;
    }

    public ProfileImpl withStructures(List<ProfileStructure> structures) {
        setStructures(structures);
        return this;
    }

    public ProfileImpl withExtensionDefns(ProfileExtensionDefn... values) {
        if (values!= null) {
            for (ProfileExtensionDefn value: values) {
                getExtensionDefns().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withExtensionDefns(Collection<ProfileExtensionDefn> values) {
        if (values!= null) {
            getExtensionDefns().addAll(values);
        }
        return this;
    }

    public ProfileImpl withExtensionDefns(List<ProfileExtensionDefn> extensionDefns) {
        setExtensionDefns(extensionDefns);
        return this;
    }

    public ProfileImpl withQueries(ProfileQuery... values) {
        if (values!= null) {
            for (ProfileQuery value: values) {
                getQueries().add(value);
            }
        }
        return this;
    }

    public ProfileImpl withQueries(Collection<ProfileQuery> values) {
        if (values!= null) {
            getQueries().addAll(values);
        }
        return this;
    }

    public ProfileImpl withQueries(List<ProfileQuery> queries) {
        setQueries(queries);
        return this;
    }

    @Override
    public ProfileImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ProfileImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ProfileImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ProfileImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProfileImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProfileImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileImpl that = ((ProfileImpl) object);
        {
            org.hl7.fhir.model.String lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            org.hl7.fhir.model.String rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.model.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.model.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsPublisher;
            lhsPublisher = this.getPublisher();
            org.hl7.fhir.model.String rhsPublisher;
            rhsPublisher = that.getPublisher();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "publisher", lhsPublisher), LocatorUtils.property(thatLocator, "publisher", rhsPublisher), lhsPublisher, rhsPublisher)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecoms;
            lhsTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            List<Contact> rhsTelecoms;
            rhsTelecoms = (((that.telecoms!= null)&&(!that.telecoms.isEmpty()))?that.getTelecoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecoms", lhsTelecoms), LocatorUtils.property(thatLocator, "telecoms", rhsTelecoms), lhsTelecoms, rhsTelecoms)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<Coding> lhsCodes;
            lhsCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            List<Coding> rhsCodes;
            rhsCodes = (((that.codes!= null)&&(!that.codes.isEmpty()))?that.getCodes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codes", lhsCodes), LocatorUtils.property(thatLocator, "codes", rhsCodes), lhsCodes, rhsCodes)) {
                return false;
            }
        }
        {
            ResourceProfileStatus lhsStatus;
            lhsStatus = this.getStatus();
            ResourceProfileStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Boolean lhsExperimental;
            lhsExperimental = this.getExperimental();
            Boolean rhsExperimental;
            rhsExperimental = that.getExperimental();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experimental", lhsExperimental), LocatorUtils.property(thatLocator, "experimental", rhsExperimental), lhsExperimental, rhsExperimental)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsRequirements;
            lhsRequirements = this.getRequirements();
            org.hl7.fhir.model.String rhsRequirements;
            rhsRequirements = that.getRequirements();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requirements", lhsRequirements), LocatorUtils.property(thatLocator, "requirements", rhsRequirements), lhsRequirements, rhsRequirements)) {
                return false;
            }
        }
        {
            Id lhsFhirVersion;
            lhsFhirVersion = this.getFhirVersion();
            Id rhsFhirVersion;
            rhsFhirVersion = that.getFhirVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fhirVersion", lhsFhirVersion), LocatorUtils.property(thatLocator, "fhirVersion", rhsFhirVersion), lhsFhirVersion, rhsFhirVersion)) {
                return false;
            }
        }
        {
            List<ProfileMapping> lhsMappings;
            lhsMappings = (((this.mappings!= null)&&(!this.mappings.isEmpty()))?this.getMappings():null);
            List<ProfileMapping> rhsMappings;
            rhsMappings = (((that.mappings!= null)&&(!that.mappings.isEmpty()))?that.getMappings():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mappings", lhsMappings), LocatorUtils.property(thatLocator, "mappings", rhsMappings), lhsMappings, rhsMappings)) {
                return false;
            }
        }
        {
            List<ProfileStructure> lhsStructures;
            lhsStructures = (((this.structures!= null)&&(!this.structures.isEmpty()))?this.getStructures():null);
            List<ProfileStructure> rhsStructures;
            rhsStructures = (((that.structures!= null)&&(!that.structures.isEmpty()))?that.getStructures():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "structures", lhsStructures), LocatorUtils.property(thatLocator, "structures", rhsStructures), lhsStructures, rhsStructures)) {
                return false;
            }
        }
        {
            List<ProfileExtensionDefn> lhsExtensionDefns;
            lhsExtensionDefns = (((this.extensionDefns!= null)&&(!this.extensionDefns.isEmpty()))?this.getExtensionDefns():null);
            List<ProfileExtensionDefn> rhsExtensionDefns;
            rhsExtensionDefns = (((that.extensionDefns!= null)&&(!that.extensionDefns.isEmpty()))?that.getExtensionDefns():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extensionDefns", lhsExtensionDefns), LocatorUtils.property(thatLocator, "extensionDefns", rhsExtensionDefns), lhsExtensionDefns, rhsExtensionDefns)) {
                return false;
            }
        }
        {
            List<ProfileQuery> lhsQueries;
            lhsQueries = (((this.queries!= null)&&(!this.queries.isEmpty()))?this.getQueries():null);
            List<ProfileQuery> rhsQueries;
            rhsQueries = (((that.queries!= null)&&(!that.queries.isEmpty()))?that.getQueries():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "queries", lhsQueries), LocatorUtils.property(thatLocator, "queries", rhsQueries), lhsQueries, rhsQueries)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.model.String theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            org.hl7.fhir.model.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.model.String thePublisher;
            thePublisher = this.getPublisher();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "publisher", thePublisher), currentHashCode, thePublisher);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecoms", theTelecoms), currentHashCode, theTelecoms);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<Coding> theCodes;
            theCodes = (((this.codes!= null)&&(!this.codes.isEmpty()))?this.getCodes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codes", theCodes), currentHashCode, theCodes);
        }
        {
            ResourceProfileStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Boolean theExperimental;
            theExperimental = this.getExperimental();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experimental", theExperimental), currentHashCode, theExperimental);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            org.hl7.fhir.model.String theRequirements;
            theRequirements = this.getRequirements();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requirements", theRequirements), currentHashCode, theRequirements);
        }
        {
            Id theFhirVersion;
            theFhirVersion = this.getFhirVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fhirVersion", theFhirVersion), currentHashCode, theFhirVersion);
        }
        {
            List<ProfileMapping> theMappings;
            theMappings = (((this.mappings!= null)&&(!this.mappings.isEmpty()))?this.getMappings():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mappings", theMappings), currentHashCode, theMappings);
        }
        {
            List<ProfileStructure> theStructures;
            theStructures = (((this.structures!= null)&&(!this.structures.isEmpty()))?this.getStructures():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "structures", theStructures), currentHashCode, theStructures);
        }
        {
            List<ProfileExtensionDefn> theExtensionDefns;
            theExtensionDefns = (((this.extensionDefns!= null)&&(!this.extensionDefns.isEmpty()))?this.getExtensionDefns():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extensionDefns", theExtensionDefns), currentHashCode, theExtensionDefns);
        }
        {
            List<ProfileQuery> theQueries;
            theQueries = (((this.queries!= null)&&(!this.queries.isEmpty()))?this.getQueries():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "queries", theQueries), currentHashCode, theQueries);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
