//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.MedicationDispenseSubstitution;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationDispense.Substitution", propOrder = {
    "type",
    "reasons",
    "responsibleParties"
})
public class MedicationDispenseSubstitutionImpl
    extends BackboneElementImpl
    implements Serializable, MedicationDispenseSubstitution, Equals, HashCode
{

    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "reason", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> reasons;
    @XmlElement(name = "responsibleParty", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> responsibleParties;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__MEDICATIONDISPENSESUBS_0")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONS_MEDICATIONDISPENSESU_0")
    public List<CodeableConcept> getReasons() {
        if (reasons == null) {
            reasons = new ArrayList<CodeableConcept>();
        }
        return this.reasons;
    }

    public void setReasons(List<CodeableConcept> reasons) {
        this.reasons = reasons;
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESPONSIBLEPARTIES_MEDICATIO_0")
    public List<ResourceReference> getResponsibleParties() {
        if (responsibleParties == null) {
            responsibleParties = new ArrayList<ResourceReference>();
        }
        return this.responsibleParties;
    }

    public void setResponsibleParties(List<ResourceReference> responsibleParties) {
        this.responsibleParties = responsibleParties;
    }

    public MedicationDispenseSubstitutionImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public MedicationDispenseSubstitutionImpl withReasons(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getReasons().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseSubstitutionImpl withReasons(Collection<CodeableConcept> values) {
        if (values!= null) {
            getReasons().addAll(values);
        }
        return this;
    }

    public MedicationDispenseSubstitutionImpl withReasons(List<CodeableConcept> reasons) {
        setReasons(reasons);
        return this;
    }

    public MedicationDispenseSubstitutionImpl withResponsibleParties(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getResponsibleParties().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseSubstitutionImpl withResponsibleParties(Collection<ResourceReference> values) {
        if (values!= null) {
            getResponsibleParties().addAll(values);
        }
        return this;
    }

    public MedicationDispenseSubstitutionImpl withResponsibleParties(List<ResourceReference> responsibleParties) {
        setResponsibleParties(responsibleParties);
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationDispenseSubstitutionImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationDispenseSubstitutionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationDispenseSubstitutionImpl that = ((MedicationDispenseSubstitutionImpl) object);
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsReasons;
            lhsReasons = (((this.reasons!= null)&&(!this.reasons.isEmpty()))?this.getReasons():null);
            List<CodeableConcept> rhsReasons;
            rhsReasons = (((that.reasons!= null)&&(!that.reasons.isEmpty()))?that.getReasons():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasons", lhsReasons), LocatorUtils.property(thatLocator, "reasons", rhsReasons), lhsReasons, rhsReasons)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsResponsibleParties;
            lhsResponsibleParties = (((this.responsibleParties!= null)&&(!this.responsibleParties.isEmpty()))?this.getResponsibleParties():null);
            List<ResourceReference> rhsResponsibleParties;
            rhsResponsibleParties = (((that.responsibleParties!= null)&&(!that.responsibleParties.isEmpty()))?that.getResponsibleParties():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "responsibleParties", lhsResponsibleParties), LocatorUtils.property(thatLocator, "responsibleParties", rhsResponsibleParties), lhsResponsibleParties, rhsResponsibleParties)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            List<CodeableConcept> theReasons;
            theReasons = (((this.reasons!= null)&&(!this.reasons.isEmpty()))?this.getReasons():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasons", theReasons), currentHashCode, theReasons);
        }
        {
            List<ResourceReference> theResponsibleParties;
            theResponsibleParties = (((this.responsibleParties!= null)&&(!this.responsibleParties.isEmpty()))?this.getResponsibleParties():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "responsibleParties", theResponsibleParties), currentHashCode, theResponsibleParties);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
