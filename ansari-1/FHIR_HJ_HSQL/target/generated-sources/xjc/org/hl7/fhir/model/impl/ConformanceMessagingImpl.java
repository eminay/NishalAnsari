//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.ConformanceEvent;
import org.hl7.fhir.model.ConformanceMessaging;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Messaging", propOrder = {
    "endpoint",
    "reliableCache",
    "documentation",
    "events"
})
public class ConformanceMessagingImpl
    extends BackboneElementImpl
    implements Serializable, ConformanceMessaging, Equals, HashCode
{

    @XmlElement(type = UriImpl.class)
    protected UriImpl endpoint;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl reliableCache;
    @XmlElement(type = StringImpl.class)
    protected StringImpl documentation;
    @XmlElement(name = "event", required = true, type = ConformanceEventImpl.class)
    protected List<ConformanceEvent> events;

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENDPOINT_CONFORMANCEMESSAGIN_0")
    public Uri getEndpoint() {
        return endpoint;
    }

    public void setEndpoint(Uri value) {
        this.endpoint = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELIABLECACHE_CONFORMANCEMES_0")
    public Integer getReliableCache() {
        return reliableCache;
    }

    public void setReliableCache(Integer value) {
        this.reliableCache = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTATION_CONFORMANCEMES_0")
    public org.hl7.fhir.model.String getDocumentation() {
        return documentation;
    }

    public void setDocumentation(org.hl7.fhir.model.String value) {
        this.documentation = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ConformanceEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_CONFORMANCEMESSAGING__0")
    public List<ConformanceEvent> getEvents() {
        if (events == null) {
            events = new ArrayList<ConformanceEvent>();
        }
        return this.events;
    }

    public void setEvents(List<ConformanceEvent> events) {
        this.events = events;
    }

    public ConformanceMessagingImpl withEndpoint(Uri value) {
        setEndpoint(value);
        return this;
    }

    public ConformanceMessagingImpl withReliableCache(Integer value) {
        setReliableCache(value);
        return this;
    }

    public ConformanceMessagingImpl withDocumentation(org.hl7.fhir.model.String value) {
        setDocumentation(value);
        return this;
    }

    public ConformanceMessagingImpl withEvents(ConformanceEvent... values) {
        if (values!= null) {
            for (ConformanceEvent value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public ConformanceMessagingImpl withEvents(Collection<ConformanceEvent> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public ConformanceMessagingImpl withEvents(List<ConformanceEvent> events) {
        setEvents(events);
        return this;
    }

    @Override
    public ConformanceMessagingImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceMessagingImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceMessagingImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConformanceMessagingImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceMessagingImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceMessagingImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConformanceMessagingImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceMessagingImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceMessagingImpl that = ((ConformanceMessagingImpl) object);
        {
            Uri lhsEndpoint;
            lhsEndpoint = this.getEndpoint();
            Uri rhsEndpoint;
            rhsEndpoint = that.getEndpoint();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endpoint", lhsEndpoint), LocatorUtils.property(thatLocator, "endpoint", rhsEndpoint), lhsEndpoint, rhsEndpoint)) {
                return false;
            }
        }
        {
            Integer lhsReliableCache;
            lhsReliableCache = this.getReliableCache();
            Integer rhsReliableCache;
            rhsReliableCache = that.getReliableCache();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reliableCache", lhsReliableCache), LocatorUtils.property(thatLocator, "reliableCache", rhsReliableCache), lhsReliableCache, rhsReliableCache)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDocumentation;
            lhsDocumentation = this.getDocumentation();
            org.hl7.fhir.model.String rhsDocumentation;
            rhsDocumentation = that.getDocumentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentation", lhsDocumentation), LocatorUtils.property(thatLocator, "documentation", rhsDocumentation), lhsDocumentation, rhsDocumentation)) {
                return false;
            }
        }
        {
            List<ConformanceEvent> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<ConformanceEvent> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theEndpoint;
            theEndpoint = this.getEndpoint();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endpoint", theEndpoint), currentHashCode, theEndpoint);
        }
        {
            Integer theReliableCache;
            theReliableCache = this.getReliableCache();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reliableCache", theReliableCache), currentHashCode, theReliableCache);
        }
        {
            org.hl7.fhir.model.String theDocumentation;
            theDocumentation = this.getDocumentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentation", theDocumentation), currentHashCode, theDocumentation);
        }
        {
            List<ConformanceEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
