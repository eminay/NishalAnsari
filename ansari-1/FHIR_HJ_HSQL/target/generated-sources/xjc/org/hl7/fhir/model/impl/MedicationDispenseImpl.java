//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.MedicationDispense;
import org.hl7.fhir.model.MedicationDispenseDispense;
import org.hl7.fhir.model.MedicationDispenseStatus;
import org.hl7.fhir.model.MedicationDispenseSubstitution;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationDispense", propOrder = {
    "identifier",
    "status",
    "patient",
    "dispenser",
    "authorizingPrescriptions",
    "dispenses",
    "substitution"
})
@XmlRootElement(name = "MedicationDispense")
public class MedicationDispenseImpl
    extends ResourceImpl
    implements Serializable, MedicationDispense, Equals, HashCode
{

    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(type = MedicationDispenseStatusImpl.class)
    protected MedicationDispenseStatusImpl status;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl patient;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl dispenser;
    @XmlElement(name = "authorizingPrescription", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> authorizingPrescriptions;
    @XmlElement(name = "dispense", type = MedicationDispenseDispenseImpl.class)
    protected List<MedicationDispenseDispense> dispenses;
    @XmlElement(type = MedicationDispenseSubstitutionImpl.class)
    protected MedicationDispenseSubstitutionImpl substitution;

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MEDICATIONDISPENS_0")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = MedicationDispenseStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONDISPENSE_HJ_0")
    public MedicationDispenseStatus getStatus() {
        return status;
    }

    public void setStatus(MedicationDispenseStatus value) {
        this.status = ((MedicationDispenseStatusImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONDISPENSE_H_0")
    public ResourceReference getPatient() {
        return patient;
    }

    public void setPatient(ResourceReference value) {
        this.patient = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSER_MEDICATIONDISPENSE_0")
    public ResourceReference getDispenser() {
        return dispenser;
    }

    public void setDispenser(ResourceReference value) {
        this.dispenser = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHORIZINGPRESCRIPTIONS_MED_0")
    public List<ResourceReference> getAuthorizingPrescriptions() {
        if (authorizingPrescriptions == null) {
            authorizingPrescriptions = new ArrayList<ResourceReference>();
        }
        return this.authorizingPrescriptions;
    }

    public void setAuthorizingPrescriptions(List<ResourceReference> authorizingPrescriptions) {
        this.authorizingPrescriptions = authorizingPrescriptions;
    }

    @OneToMany(targetEntity = MedicationDispenseDispense.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSES_MEDICATIONDISPENSE_0")
    public List<MedicationDispenseDispense> getDispenses() {
        if (dispenses == null) {
            dispenses = new ArrayList<MedicationDispenseDispense>();
        }
        return this.dispenses;
    }

    public void setDispenses(List<MedicationDispenseDispense> dispenses) {
        this.dispenses = dispenses;
    }

    @ManyToOne(targetEntity = MedicationDispenseSubstitution.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTITUTION_MEDICATIONDISPE_0")
    public MedicationDispenseSubstitution getSubstitution() {
        return substitution;
    }

    public void setSubstitution(MedicationDispenseSubstitution value) {
        this.substitution = ((MedicationDispenseSubstitutionImpl) value);
    }

    public MedicationDispenseImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public MedicationDispenseImpl withStatus(MedicationDispenseStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationDispenseImpl withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationDispenseImpl withDispenser(ResourceReference value) {
        setDispenser(value);
        return this;
    }

    public MedicationDispenseImpl withAuthorizingPrescriptions(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAuthorizingPrescriptions().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseImpl withAuthorizingPrescriptions(Collection<ResourceReference> values) {
        if (values!= null) {
            getAuthorizingPrescriptions().addAll(values);
        }
        return this;
    }

    public MedicationDispenseImpl withAuthorizingPrescriptions(List<ResourceReference> authorizingPrescriptions) {
        setAuthorizingPrescriptions(authorizingPrescriptions);
        return this;
    }

    public MedicationDispenseImpl withDispenses(MedicationDispenseDispense... values) {
        if (values!= null) {
            for (MedicationDispenseDispense value: values) {
                getDispenses().add(value);
            }
        }
        return this;
    }

    public MedicationDispenseImpl withDispenses(Collection<MedicationDispenseDispense> values) {
        if (values!= null) {
            getDispenses().addAll(values);
        }
        return this;
    }

    public MedicationDispenseImpl withDispenses(List<MedicationDispenseDispense> dispenses) {
        setDispenses(dispenses);
        return this;
    }

    public MedicationDispenseImpl withSubstitution(MedicationDispenseSubstitution value) {
        setSubstitution(value);
        return this;
    }

    @Override
    public MedicationDispenseImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationDispenseImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationDispenseImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public MedicationDispenseImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationDispenseImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispenseImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationDispenseImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationDispenseImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationDispenseImpl that = ((MedicationDispenseImpl) object);
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            MedicationDispenseStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationDispenseStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ResourceReference lhsDispenser;
            lhsDispenser = this.getDispenser();
            ResourceReference rhsDispenser;
            rhsDispenser = that.getDispenser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispenser", lhsDispenser), LocatorUtils.property(thatLocator, "dispenser", rhsDispenser), lhsDispenser, rhsDispenser)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAuthorizingPrescriptions;
            lhsAuthorizingPrescriptions = (((this.authorizingPrescriptions!= null)&&(!this.authorizingPrescriptions.isEmpty()))?this.getAuthorizingPrescriptions():null);
            List<ResourceReference> rhsAuthorizingPrescriptions;
            rhsAuthorizingPrescriptions = (((that.authorizingPrescriptions!= null)&&(!that.authorizingPrescriptions.isEmpty()))?that.getAuthorizingPrescriptions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authorizingPrescriptions", lhsAuthorizingPrescriptions), LocatorUtils.property(thatLocator, "authorizingPrescriptions", rhsAuthorizingPrescriptions), lhsAuthorizingPrescriptions, rhsAuthorizingPrescriptions)) {
                return false;
            }
        }
        {
            List<MedicationDispenseDispense> lhsDispenses;
            lhsDispenses = (((this.dispenses!= null)&&(!this.dispenses.isEmpty()))?this.getDispenses():null);
            List<MedicationDispenseDispense> rhsDispenses;
            rhsDispenses = (((that.dispenses!= null)&&(!that.dispenses.isEmpty()))?that.getDispenses():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispenses", lhsDispenses), LocatorUtils.property(thatLocator, "dispenses", rhsDispenses), lhsDispenses, rhsDispenses)) {
                return false;
            }
        }
        {
            MedicationDispenseSubstitution lhsSubstitution;
            lhsSubstitution = this.getSubstitution();
            MedicationDispenseSubstitution rhsSubstitution;
            rhsSubstitution = that.getSubstitution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substitution", lhsSubstitution), LocatorUtils.property(thatLocator, "substitution", rhsSubstitution), lhsSubstitution, rhsSubstitution)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            MedicationDispenseStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ResourceReference theDispenser;
            theDispenser = this.getDispenser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispenser", theDispenser), currentHashCode, theDispenser);
        }
        {
            List<ResourceReference> theAuthorizingPrescriptions;
            theAuthorizingPrescriptions = (((this.authorizingPrescriptions!= null)&&(!this.authorizingPrescriptions.isEmpty()))?this.getAuthorizingPrescriptions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorizingPrescriptions", theAuthorizingPrescriptions), currentHashCode, theAuthorizingPrescriptions);
        }
        {
            List<MedicationDispenseDispense> theDispenses;
            theDispenses = (((this.dispenses!= null)&&(!this.dispenses.isEmpty()))?this.getDispenses():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispenses", theDispenses), currentHashCode, theDispenses);
        }
        {
            MedicationDispenseSubstitution theSubstitution;
            theSubstitution = this.getSubstitution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substitution", theSubstitution), currentHashCode, theSubstitution);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
