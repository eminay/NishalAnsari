//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Specimen;
import org.hl7.fhir.model.SpecimenCollection;
import org.hl7.fhir.model.SpecimenContainer;
import org.hl7.fhir.model.SpecimenSource;
import org.hl7.fhir.model.SpecimenTreatment;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Specimen", propOrder = {
    "identifiers",
    "type",
    "sources",
    "subject",
    "accessionIdentifier",
    "receivedTime",
    "collection",
    "treatments",
    "containers"
})
@XmlRootElement(name = "Specimen")
public class SpecimenImpl
    extends ResourceImpl
    implements Serializable, Specimen, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "source", type = SpecimenSourceImpl.class)
    protected List<SpecimenSource> sources;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl accessionIdentifier;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl receivedTime;
    @XmlElement(required = true, type = SpecimenCollectionImpl.class)
    protected SpecimenCollectionImpl collection;
    @XmlElement(name = "treatment", type = SpecimenTreatmentImpl.class)
    protected List<SpecimenTreatment> treatments;
    @XmlElement(name = "container", type = SpecimenContainerImpl.class)
    protected List<SpecimenContainer> containers;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_SPECIMEN_HJID")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SPECIMEN_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = SpecimenSource.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOURCES_SPECIMEN_HJID")
    public List<SpecimenSource> getSources() {
        if (sources == null) {
            sources = new ArrayList<SpecimenSource>();
        }
        return this.sources;
    }

    public void setSources(List<SpecimenSource> sources) {
        this.sources = sources;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_SPECIMEN_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACCESSIONIDENTIFIER_SPECIMEN_0")
    public Identifier getAccessionIdentifier() {
        return accessionIdentifier;
    }

    public void setAccessionIdentifier(Identifier value) {
        this.accessionIdentifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECEIVEDTIME_SPECIMEN_HJID")
    public DateTime getReceivedTime() {
        return receivedTime;
    }

    public void setReceivedTime(DateTime value) {
        this.receivedTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = SpecimenCollection.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COLLECTION_SPECIMEN_HJID")
    public SpecimenCollection getCollection() {
        return collection;
    }

    public void setCollection(SpecimenCollection value) {
        this.collection = ((SpecimenCollectionImpl) value);
    }

    @OneToMany(targetEntity = SpecimenTreatment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TREATMENTS_SPECIMEN_HJID")
    public List<SpecimenTreatment> getTreatments() {
        if (treatments == null) {
            treatments = new ArrayList<SpecimenTreatment>();
        }
        return this.treatments;
    }

    public void setTreatments(List<SpecimenTreatment> treatments) {
        this.treatments = treatments;
    }

    @OneToMany(targetEntity = SpecimenContainer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTAINERS_SPECIMEN_HJID")
    public List<SpecimenContainer> getContainers() {
        if (containers == null) {
            containers = new ArrayList<SpecimenContainer>();
        }
        return this.containers;
    }

    public void setContainers(List<SpecimenContainer> containers) {
        this.containers = containers;
    }

    public SpecimenImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public SpecimenImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public SpecimenImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public SpecimenImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public SpecimenImpl withSources(SpecimenSource... values) {
        if (values!= null) {
            for (SpecimenSource value: values) {
                getSources().add(value);
            }
        }
        return this;
    }

    public SpecimenImpl withSources(Collection<SpecimenSource> values) {
        if (values!= null) {
            getSources().addAll(values);
        }
        return this;
    }

    public SpecimenImpl withSources(List<SpecimenSource> sources) {
        setSources(sources);
        return this;
    }

    public SpecimenImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public SpecimenImpl withAccessionIdentifier(Identifier value) {
        setAccessionIdentifier(value);
        return this;
    }

    public SpecimenImpl withReceivedTime(DateTime value) {
        setReceivedTime(value);
        return this;
    }

    public SpecimenImpl withCollection(SpecimenCollection value) {
        setCollection(value);
        return this;
    }

    public SpecimenImpl withTreatments(SpecimenTreatment... values) {
        if (values!= null) {
            for (SpecimenTreatment value: values) {
                getTreatments().add(value);
            }
        }
        return this;
    }

    public SpecimenImpl withTreatments(Collection<SpecimenTreatment> values) {
        if (values!= null) {
            getTreatments().addAll(values);
        }
        return this;
    }

    public SpecimenImpl withTreatments(List<SpecimenTreatment> treatments) {
        setTreatments(treatments);
        return this;
    }

    public SpecimenImpl withContainers(SpecimenContainer... values) {
        if (values!= null) {
            for (SpecimenContainer value: values) {
                getContainers().add(value);
            }
        }
        return this;
    }

    public SpecimenImpl withContainers(Collection<SpecimenContainer> values) {
        if (values!= null) {
            getContainers().addAll(values);
        }
        return this;
    }

    public SpecimenImpl withContainers(List<SpecimenContainer> containers) {
        setContainers(containers);
        return this;
    }

    @Override
    public SpecimenImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SpecimenImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public SpecimenImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public SpecimenImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SpecimenImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SpecimenImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SpecimenImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SpecimenImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SpecimenImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SpecimenImpl that = ((SpecimenImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            List<SpecimenSource> lhsSources;
            lhsSources = (((this.sources!= null)&&(!this.sources.isEmpty()))?this.getSources():null);
            List<SpecimenSource> rhsSources;
            rhsSources = (((that.sources!= null)&&(!that.sources.isEmpty()))?that.getSources():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sources", lhsSources), LocatorUtils.property(thatLocator, "sources", rhsSources), lhsSources, rhsSources)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            Identifier lhsAccessionIdentifier;
            lhsAccessionIdentifier = this.getAccessionIdentifier();
            Identifier rhsAccessionIdentifier;
            rhsAccessionIdentifier = that.getAccessionIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accessionIdentifier", lhsAccessionIdentifier), LocatorUtils.property(thatLocator, "accessionIdentifier", rhsAccessionIdentifier), lhsAccessionIdentifier, rhsAccessionIdentifier)) {
                return false;
            }
        }
        {
            DateTime lhsReceivedTime;
            lhsReceivedTime = this.getReceivedTime();
            DateTime rhsReceivedTime;
            rhsReceivedTime = that.getReceivedTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivedTime", lhsReceivedTime), LocatorUtils.property(thatLocator, "receivedTime", rhsReceivedTime), lhsReceivedTime, rhsReceivedTime)) {
                return false;
            }
        }
        {
            SpecimenCollection lhsCollection;
            lhsCollection = this.getCollection();
            SpecimenCollection rhsCollection;
            rhsCollection = that.getCollection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "collection", lhsCollection), LocatorUtils.property(thatLocator, "collection", rhsCollection), lhsCollection, rhsCollection)) {
                return false;
            }
        }
        {
            List<SpecimenTreatment> lhsTreatments;
            lhsTreatments = (((this.treatments!= null)&&(!this.treatments.isEmpty()))?this.getTreatments():null);
            List<SpecimenTreatment> rhsTreatments;
            rhsTreatments = (((that.treatments!= null)&&(!that.treatments.isEmpty()))?that.getTreatments():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "treatments", lhsTreatments), LocatorUtils.property(thatLocator, "treatments", rhsTreatments), lhsTreatments, rhsTreatments)) {
                return false;
            }
        }
        {
            List<SpecimenContainer> lhsContainers;
            lhsContainers = (((this.containers!= null)&&(!this.containers.isEmpty()))?this.getContainers():null);
            List<SpecimenContainer> rhsContainers;
            rhsContainers = (((that.containers!= null)&&(!that.containers.isEmpty()))?that.getContainers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "containers", lhsContainers), LocatorUtils.property(thatLocator, "containers", rhsContainers), lhsContainers, rhsContainers)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            List<SpecimenSource> theSources;
            theSources = (((this.sources!= null)&&(!this.sources.isEmpty()))?this.getSources():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sources", theSources), currentHashCode, theSources);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            Identifier theAccessionIdentifier;
            theAccessionIdentifier = this.getAccessionIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accessionIdentifier", theAccessionIdentifier), currentHashCode, theAccessionIdentifier);
        }
        {
            DateTime theReceivedTime;
            theReceivedTime = this.getReceivedTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivedTime", theReceivedTime), currentHashCode, theReceivedTime);
        }
        {
            SpecimenCollection theCollection;
            theCollection = this.getCollection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "collection", theCollection), currentHashCode, theCollection);
        }
        {
            List<SpecimenTreatment> theTreatments;
            theTreatments = (((this.treatments!= null)&&(!this.treatments.isEmpty()))?this.getTreatments():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "treatments", theTreatments), currentHashCode, theTreatments);
        }
        {
            List<SpecimenContainer> theContainers;
            theContainers = (((this.containers!= null)&&(!this.containers.isEmpty()))?this.getContainers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "containers", theContainers), currentHashCode, theContainers);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
