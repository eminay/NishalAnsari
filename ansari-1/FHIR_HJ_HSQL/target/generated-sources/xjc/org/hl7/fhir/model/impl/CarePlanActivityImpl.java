//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderColumn;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CarePlanActivity;
import org.hl7.fhir.model.CarePlanActivityStatus;
import org.hl7.fhir.model.CarePlanSimple;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CarePlan.Activity", propOrder = {
    "goals",
    "status",
    "prohibited",
    "actionResultings",
    "notes",
    "detail",
    "simple"
})
public class CarePlanActivityImpl
    extends BackboneElementImpl
    implements Serializable, CarePlanActivity, Equals, HashCode
{

    @XmlElement(name = "goal")
    protected List<java.lang.String> goals;
    @XmlElement(type = CarePlanActivityStatusImpl.class)
    protected CarePlanActivityStatusImpl status;
    @XmlElement(required = true, type = BooleanImpl.class)
    protected BooleanImpl prohibited;
    @XmlElement(name = "actionResulting", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> actionResultings;
    @XmlElement(type = StringImpl.class)
    protected StringImpl notes;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl detail;
    @XmlElement(type = CarePlanSimpleImpl.class)
    protected CarePlanSimpleImpl simple;

    @ElementCollection
    @OrderColumn(name = "HJINDEX")
    @Column(name = "HJVALUE", length = 255)
    @CollectionTable(name = "CAREPLANACTIVITY_GOALS", joinColumns = {
        @JoinColumn(name = "HJID")
    })
    public List<java.lang.String> getGoals() {
        if (goals == null) {
            goals = new ArrayList<java.lang.String>();
        }
        return this.goals;
    }

    public void setGoals(List<java.lang.String> goals) {
        this.goals = goals;
    }

    @ManyToOne(targetEntity = CarePlanActivityStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CAREPLANACTIVITY_HJID")
    public CarePlanActivityStatus getStatus() {
        return status;
    }

    public void setStatus(CarePlanActivityStatus value) {
        this.status = ((CarePlanActivityStatusImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROHIBITED_CAREPLANACTIVITY__0")
    public Boolean getProhibited() {
        return prohibited;
    }

    public void setProhibited(Boolean value) {
        this.prohibited = ((BooleanImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTIONRESULTINGS_CAREPLANACT_0")
    public List<ResourceReference> getActionResultings() {
        if (actionResultings == null) {
            actionResultings = new ArrayList<ResourceReference>();
        }
        return this.actionResultings;
    }

    public void setActionResultings(List<ResourceReference> actionResultings) {
        this.actionResultings = actionResultings;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NOTES_CAREPLANACTIVITY_HJID")
    public org.hl7.fhir.model.String getNotes() {
        return notes;
    }

    public void setNotes(org.hl7.fhir.model.String value) {
        this.notes = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DETAIL_CAREPLANACTIVITY_HJID")
    public ResourceReference getDetail() {
        return detail;
    }

    public void setDetail(ResourceReference value) {
        this.detail = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CarePlanSimple.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SIMPLE__CAREPLANACTIVITY_HJID")
    public CarePlanSimple getSimple() {
        return simple;
    }

    public void setSimple(CarePlanSimple value) {
        this.simple = ((CarePlanSimpleImpl) value);
    }

    public CarePlanActivityImpl withGoals(java.lang.String... values) {
        if (values!= null) {
            for (java.lang.String value: values) {
                getGoals().add(value);
            }
        }
        return this;
    }

    public CarePlanActivityImpl withGoals(Collection<java.lang.String> values) {
        if (values!= null) {
            getGoals().addAll(values);
        }
        return this;
    }

    public CarePlanActivityImpl withGoals(List<java.lang.String> goals) {
        setGoals(goals);
        return this;
    }

    public CarePlanActivityImpl withStatus(CarePlanActivityStatus value) {
        setStatus(value);
        return this;
    }

    public CarePlanActivityImpl withProhibited(Boolean value) {
        setProhibited(value);
        return this;
    }

    public CarePlanActivityImpl withActionResultings(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getActionResultings().add(value);
            }
        }
        return this;
    }

    public CarePlanActivityImpl withActionResultings(Collection<ResourceReference> values) {
        if (values!= null) {
            getActionResultings().addAll(values);
        }
        return this;
    }

    public CarePlanActivityImpl withActionResultings(List<ResourceReference> actionResultings) {
        setActionResultings(actionResultings);
        return this;
    }

    public CarePlanActivityImpl withNotes(org.hl7.fhir.model.String value) {
        setNotes(value);
        return this;
    }

    public CarePlanActivityImpl withDetail(ResourceReference value) {
        setDetail(value);
        return this;
    }

    public CarePlanActivityImpl withSimple(CarePlanSimple value) {
        setSimple(value);
        return this;
    }

    @Override
    public CarePlanActivityImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CarePlanActivityImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CarePlanActivityImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public CarePlanActivityImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public CarePlanActivityImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public CarePlanActivityImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public CarePlanActivityImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CarePlanActivityImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CarePlanActivityImpl that = ((CarePlanActivityImpl) object);
        {
            List<java.lang.String> lhsGoals;
            lhsGoals = (((this.goals!= null)&&(!this.goals.isEmpty()))?this.getGoals():null);
            List<java.lang.String> rhsGoals;
            rhsGoals = (((that.goals!= null)&&(!that.goals.isEmpty()))?that.getGoals():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "goals", lhsGoals), LocatorUtils.property(thatLocator, "goals", rhsGoals), lhsGoals, rhsGoals)) {
                return false;
            }
        }
        {
            CarePlanActivityStatus lhsStatus;
            lhsStatus = this.getStatus();
            CarePlanActivityStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Boolean lhsProhibited;
            lhsProhibited = this.getProhibited();
            Boolean rhsProhibited;
            rhsProhibited = that.getProhibited();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prohibited", lhsProhibited), LocatorUtils.property(thatLocator, "prohibited", rhsProhibited), lhsProhibited, rhsProhibited)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsActionResultings;
            lhsActionResultings = (((this.actionResultings!= null)&&(!this.actionResultings.isEmpty()))?this.getActionResultings():null);
            List<ResourceReference> rhsActionResultings;
            rhsActionResultings = (((that.actionResultings!= null)&&(!that.actionResultings.isEmpty()))?that.getActionResultings():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "actionResultings", lhsActionResultings), LocatorUtils.property(thatLocator, "actionResultings", rhsActionResultings), lhsActionResultings, rhsActionResultings)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsNotes;
            lhsNotes = this.getNotes();
            org.hl7.fhir.model.String rhsNotes;
            rhsNotes = that.getNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        {
            ResourceReference lhsDetail;
            lhsDetail = this.getDetail();
            ResourceReference rhsDetail;
            rhsDetail = that.getDetail();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "detail", lhsDetail), LocatorUtils.property(thatLocator, "detail", rhsDetail), lhsDetail, rhsDetail)) {
                return false;
            }
        }
        {
            CarePlanSimple lhsSimple;
            lhsSimple = this.getSimple();
            CarePlanSimple rhsSimple;
            rhsSimple = that.getSimple();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "simple", lhsSimple), LocatorUtils.property(thatLocator, "simple", rhsSimple), lhsSimple, rhsSimple)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<java.lang.String> theGoals;
            theGoals = (((this.goals!= null)&&(!this.goals.isEmpty()))?this.getGoals():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "goals", theGoals), currentHashCode, theGoals);
        }
        {
            CarePlanActivityStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Boolean theProhibited;
            theProhibited = this.getProhibited();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prohibited", theProhibited), currentHashCode, theProhibited);
        }
        {
            List<ResourceReference> theActionResultings;
            theActionResultings = (((this.actionResultings!= null)&&(!this.actionResultings.isEmpty()))?this.getActionResultings():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "actionResultings", theActionResultings), currentHashCode, theActionResultings);
        }
        {
            org.hl7.fhir.model.String theNotes;
            theNotes = this.getNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        {
            ResourceReference theDetail;
            theDetail = this.getDetail();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "detail", theDetail), currentHashCode, theDetail);
        }
        {
            CarePlanSimple theSimple;
            theSimple = this.getSimple();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "simple", theSimple), currentHashCode, theSimple);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
