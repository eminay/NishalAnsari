//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.ConformanceSearchParam;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.SearchParamType;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.SearchParam", propOrder = {
    "name",
    "definition",
    "type",
    "documentation",
    "targets",
    "chains"
})
public class ConformanceSearchParamImpl
    extends BackboneElementImpl
    implements Serializable, ConformanceSearchParam, Equals, HashCode
{

    @XmlElement(required = true, type = StringImpl.class)
    protected StringImpl name;
    @XmlElement(type = UriImpl.class)
    protected UriImpl definition;
    @XmlElement(required = true, type = SearchParamTypeImpl.class)
    protected SearchParamTypeImpl type;
    @XmlElement(type = StringImpl.class)
    protected StringImpl documentation;
    @XmlElement(name = "target", type = CodeImpl.class)
    protected List<Code> targets;
    @XmlElement(name = "chain", type = StringImpl.class)
    protected List<org.hl7.fhir.model.String> chains;

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__CONFORMANCESEARCHPARAM_0")
    public org.hl7.fhir.model.String getName() {
        return name;
    }

    public void setName(org.hl7.fhir.model.String value) {
        this.name = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEFINITION_CONFORMANCESEARCH_0")
    public Uri getDefinition() {
        return definition;
    }

    public void setDefinition(Uri value) {
        this.definition = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = SearchParamType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__CONFORMANCESEARCHPARAM_0")
    public SearchParamType getType() {
        return type;
    }

    public void setType(SearchParamType value) {
        this.type = ((SearchParamTypeImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTATION_CONFORMANCESEA_0")
    public org.hl7.fhir.model.String getDocumentation() {
        return documentation;
    }

    public void setDocumentation(org.hl7.fhir.model.String value) {
        this.documentation = ((StringImpl) value);
    }

    @OneToMany(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TARGETS_CONFORMANCESEARCHPAR_0")
    public List<Code> getTargets() {
        if (targets == null) {
            targets = new ArrayList<Code>();
        }
        return this.targets;
    }

    public void setTargets(List<Code> targets) {
        this.targets = targets;
    }

    @OneToMany(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CHAINS_CONFORMANCESEARCHPARA_0")
    public List<org.hl7.fhir.model.String> getChains() {
        if (chains == null) {
            chains = new ArrayList<org.hl7.fhir.model.String>();
        }
        return this.chains;
    }

    public void setChains(List<org.hl7.fhir.model.String> chains) {
        this.chains = chains;
    }

    public ConformanceSearchParamImpl withName(org.hl7.fhir.model.String value) {
        setName(value);
        return this;
    }

    public ConformanceSearchParamImpl withDefinition(Uri value) {
        setDefinition(value);
        return this;
    }

    public ConformanceSearchParamImpl withType(SearchParamType value) {
        setType(value);
        return this;
    }

    public ConformanceSearchParamImpl withDocumentation(org.hl7.fhir.model.String value) {
        setDocumentation(value);
        return this;
    }

    public ConformanceSearchParamImpl withTargets(Code... values) {
        if (values!= null) {
            for (Code value: values) {
                getTargets().add(value);
            }
        }
        return this;
    }

    public ConformanceSearchParamImpl withTargets(Collection<Code> values) {
        if (values!= null) {
            getTargets().addAll(values);
        }
        return this;
    }

    public ConformanceSearchParamImpl withTargets(List<Code> targets) {
        setTargets(targets);
        return this;
    }

    public ConformanceSearchParamImpl withChains(org.hl7.fhir.model.String... values) {
        if (values!= null) {
            for (org.hl7.fhir.model.String value: values) {
                getChains().add(value);
            }
        }
        return this;
    }

    public ConformanceSearchParamImpl withChains(Collection<org.hl7.fhir.model.String> values) {
        if (values!= null) {
            getChains().addAll(values);
        }
        return this;
    }

    public ConformanceSearchParamImpl withChains(List<org.hl7.fhir.model.String> chains) {
        setChains(chains);
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConformanceSearchParamImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceSearchParamImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceSearchParamImpl that = ((ConformanceSearchParamImpl) object);
        {
            org.hl7.fhir.model.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.model.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Uri lhsDefinition;
            lhsDefinition = this.getDefinition();
            Uri rhsDefinition;
            rhsDefinition = that.getDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "definition", lhsDefinition), LocatorUtils.property(thatLocator, "definition", rhsDefinition), lhsDefinition, rhsDefinition)) {
                return false;
            }
        }
        {
            SearchParamType lhsType;
            lhsType = this.getType();
            SearchParamType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDocumentation;
            lhsDocumentation = this.getDocumentation();
            org.hl7.fhir.model.String rhsDocumentation;
            rhsDocumentation = that.getDocumentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentation", lhsDocumentation), LocatorUtils.property(thatLocator, "documentation", rhsDocumentation), lhsDocumentation, rhsDocumentation)) {
                return false;
            }
        }
        {
            List<Code> lhsTargets;
            lhsTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            List<Code> rhsTargets;
            rhsTargets = (((that.targets!= null)&&(!that.targets.isEmpty()))?that.getTargets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "targets", lhsTargets), LocatorUtils.property(thatLocator, "targets", rhsTargets), lhsTargets, rhsTargets)) {
                return false;
            }
        }
        {
            List<org.hl7.fhir.model.String> lhsChains;
            lhsChains = (((this.chains!= null)&&(!this.chains.isEmpty()))?this.getChains():null);
            List<org.hl7.fhir.model.String> rhsChains;
            rhsChains = (((that.chains!= null)&&(!that.chains.isEmpty()))?that.getChains():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "chains", lhsChains), LocatorUtils.property(thatLocator, "chains", rhsChains), lhsChains, rhsChains)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.model.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Uri theDefinition;
            theDefinition = this.getDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "definition", theDefinition), currentHashCode, theDefinition);
        }
        {
            SearchParamType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            org.hl7.fhir.model.String theDocumentation;
            theDocumentation = this.getDocumentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentation", theDocumentation), currentHashCode, theDocumentation);
        }
        {
            List<Code> theTargets;
            theTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targets", theTargets), currentHashCode, theTargets);
        }
        {
            List<org.hl7.fhir.model.String> theChains;
            theChains = (((this.chains!= null)&&(!this.chains.isEmpty()))?this.getChains():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "chains", theChains), currentHashCode, theChains);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
