//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.DiagnosticOrder;
import org.hl7.fhir.model.DiagnosticOrderEvent;
import org.hl7.fhir.model.DiagnosticOrderItem;
import org.hl7.fhir.model.DiagnosticOrderPriority;
import org.hl7.fhir.model.DiagnosticOrderStatus;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticOrder", propOrder = {
    "subject",
    "orderer",
    "identifiers",
    "encounter",
    "clinicalNotes",
    "specimens",
    "status",
    "priority",
    "events",
    "items"
})
@XmlRootElement(name = "DiagnosticOrder")
public class DiagnosticOrderImpl
    extends ResourceImpl
    implements Serializable, DiagnosticOrder, Equals, HashCode
{

    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl orderer;
    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl clinicalNotes;
    @XmlElement(name = "specimen", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> specimens;
    @XmlElement(type = DiagnosticOrderStatusImpl.class)
    protected DiagnosticOrderStatusImpl status;
    @XmlElement(type = DiagnosticOrderPriorityImpl.class)
    protected DiagnosticOrderPriorityImpl priority;
    @XmlElement(name = "event", type = DiagnosticOrderEventImpl.class)
    protected List<DiagnosticOrderEvent> events;
    @XmlElement(name = "item", type = DiagnosticOrderItemImpl.class)
    protected List<DiagnosticOrderItem> items;

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DIAGNOSTICORDER_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDERER_DIAGNOSTICORDER_HJID")
    public ResourceReference getOrderer() {
        return orderer;
    }

    public void setOrderer(ResourceReference value) {
        this.orderer = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_DIAGNOSTICORDER__0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_DIAGNOSTICORDER_HJ_0")
    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLINICALNOTES_DIAGNOSTICORDE_0")
    public org.hl7.fhir.model.String getClinicalNotes() {
        return clinicalNotes;
    }

    public void setClinicalNotes(org.hl7.fhir.model.String value) {
        this.clinicalNotes = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMENS_DIAGNOSTICORDER_HJ_0")
    public List<ResourceReference> getSpecimens() {
        if (specimens == null) {
            specimens = new ArrayList<ResourceReference>();
        }
        return this.specimens;
    }

    public void setSpecimens(List<ResourceReference> specimens) {
        this.specimens = specimens;
    }

    @ManyToOne(targetEntity = DiagnosticOrderStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DIAGNOSTICORDER_HJID")
    public DiagnosticOrderStatus getStatus() {
        return status;
    }

    public void setStatus(DiagnosticOrderStatus value) {
        this.status = ((DiagnosticOrderStatusImpl) value);
    }

    @ManyToOne(targetEntity = DiagnosticOrderPriority.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIORITY_DIAGNOSTICORDER_HJID")
    public DiagnosticOrderPriority getPriority() {
        return priority;
    }

    public void setPriority(DiagnosticOrderPriority value) {
        this.priority = ((DiagnosticOrderPriorityImpl) value);
    }

    @OneToMany(targetEntity = DiagnosticOrderEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_DIAGNOSTICORDER_HJID")
    public List<DiagnosticOrderEvent> getEvents() {
        if (events == null) {
            events = new ArrayList<DiagnosticOrderEvent>();
        }
        return this.events;
    }

    public void setEvents(List<DiagnosticOrderEvent> events) {
        this.events = events;
    }

    @OneToMany(targetEntity = DiagnosticOrderItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ITEMS_DIAGNOSTICORDER_HJID")
    public List<DiagnosticOrderItem> getItems() {
        if (items == null) {
            items = new ArrayList<DiagnosticOrderItem>();
        }
        return this.items;
    }

    public void setItems(List<DiagnosticOrderItem> items) {
        this.items = items;
    }

    public DiagnosticOrderImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DiagnosticOrderImpl withOrderer(ResourceReference value) {
        setOrderer(value);
        return this;
    }

    public DiagnosticOrderImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public DiagnosticOrderImpl withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public DiagnosticOrderImpl withClinicalNotes(org.hl7.fhir.model.String value) {
        setClinicalNotes(value);
        return this;
    }

    public DiagnosticOrderImpl withSpecimens(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSpecimens().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderImpl withSpecimens(Collection<ResourceReference> values) {
        if (values!= null) {
            getSpecimens().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderImpl withSpecimens(List<ResourceReference> specimens) {
        setSpecimens(specimens);
        return this;
    }

    public DiagnosticOrderImpl withStatus(DiagnosticOrderStatus value) {
        setStatus(value);
        return this;
    }

    public DiagnosticOrderImpl withPriority(DiagnosticOrderPriority value) {
        setPriority(value);
        return this;
    }

    public DiagnosticOrderImpl withEvents(DiagnosticOrderEvent... values) {
        if (values!= null) {
            for (DiagnosticOrderEvent value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderImpl withEvents(Collection<DiagnosticOrderEvent> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderImpl withEvents(List<DiagnosticOrderEvent> events) {
        setEvents(events);
        return this;
    }

    public DiagnosticOrderImpl withItems(DiagnosticOrderItem... values) {
        if (values!= null) {
            for (DiagnosticOrderItem value: values) {
                getItems().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderImpl withItems(Collection<DiagnosticOrderItem> values) {
        if (values!= null) {
            getItems().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderImpl withItems(List<DiagnosticOrderItem> items) {
        setItems(items);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrderImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DiagnosticOrderImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DiagnosticOrderImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DiagnosticOrderImpl that = ((DiagnosticOrderImpl) object);
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrderer;
            lhsOrderer = this.getOrderer();
            ResourceReference rhsOrderer;
            rhsOrderer = that.getOrderer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderer", lhsOrderer), LocatorUtils.property(thatLocator, "orderer", rhsOrderer), lhsOrderer, rhsOrderer)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsClinicalNotes;
            lhsClinicalNotes = this.getClinicalNotes();
            org.hl7.fhir.model.String rhsClinicalNotes;
            rhsClinicalNotes = that.getClinicalNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clinicalNotes", lhsClinicalNotes), LocatorUtils.property(thatLocator, "clinicalNotes", rhsClinicalNotes), lhsClinicalNotes, rhsClinicalNotes)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSpecimens;
            lhsSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            List<ResourceReference> rhsSpecimens;
            rhsSpecimens = (((that.specimens!= null)&&(!that.specimens.isEmpty()))?that.getSpecimens():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimens", lhsSpecimens), LocatorUtils.property(thatLocator, "specimens", rhsSpecimens), lhsSpecimens, rhsSpecimens)) {
                return false;
            }
        }
        {
            DiagnosticOrderStatus lhsStatus;
            lhsStatus = this.getStatus();
            DiagnosticOrderStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            DiagnosticOrderPriority lhsPriority;
            lhsPriority = this.getPriority();
            DiagnosticOrderPriority rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority)) {
                return false;
            }
        }
        {
            List<DiagnosticOrderEvent> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<DiagnosticOrderEvent> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        {
            List<DiagnosticOrderItem> lhsItems;
            lhsItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            List<DiagnosticOrderItem> rhsItems;
            rhsItems = (((that.items!= null)&&(!that.items.isEmpty()))?that.getItems():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "items", lhsItems), LocatorUtils.property(thatLocator, "items", rhsItems), lhsItems, rhsItems)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theOrderer;
            theOrderer = this.getOrderer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderer", theOrderer), currentHashCode, theOrderer);
        }
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            org.hl7.fhir.model.String theClinicalNotes;
            theClinicalNotes = this.getClinicalNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clinicalNotes", theClinicalNotes), currentHashCode, theClinicalNotes);
        }
        {
            List<ResourceReference> theSpecimens;
            theSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimens", theSpecimens), currentHashCode, theSpecimens);
        }
        {
            DiagnosticOrderStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            DiagnosticOrderPriority thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority);
        }
        {
            List<DiagnosticOrderEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        {
            List<DiagnosticOrderItem> theItems;
            theItems = (((this.items!= null)&&(!this.items.isEmpty()))?this.getItems():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "items", theItems), currentHashCode, theItems);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
