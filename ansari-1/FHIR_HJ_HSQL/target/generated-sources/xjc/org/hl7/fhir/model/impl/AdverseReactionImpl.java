//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.AdverseReaction;
import org.hl7.fhir.model.AdverseReactionExposure;
import org.hl7.fhir.model.AdverseReactionSymptom;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdverseReaction", propOrder = {
    "identifiers",
    "date",
    "subject",
    "didNotOccurFlag",
    "recorder",
    "symptoms",
    "exposures"
})
@XmlRootElement(name = "AdverseReaction")
public class AdverseReactionImpl
    extends ResourceImpl
    implements Serializable, AdverseReaction, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = BooleanImpl.class)
    protected BooleanImpl didNotOccurFlag;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl recorder;
    @XmlElement(name = "symptom", type = AdverseReactionSymptomImpl.class)
    protected List<AdverseReactionSymptom> symptoms;
    @XmlElement(name = "exposure", type = AdverseReactionExposureImpl.class)
    protected List<AdverseReactionExposure> exposures;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_ADVERSEREACTION__0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__ADVERSEREACTION_HJID")
    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ADVERSEREACTION_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIDNOTOCCURFLAG_ADVERSEREACT_0")
    public Boolean getDidNotOccurFlag() {
        return didNotOccurFlag;
    }

    public void setDidNotOccurFlag(Boolean value) {
        this.didNotOccurFlag = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDER_ADVERSEREACTION_HJID")
    public ResourceReference getRecorder() {
        return recorder;
    }

    public void setRecorder(ResourceReference value) {
        this.recorder = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = AdverseReactionSymptom.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYMPTOMS_ADVERSEREACTION_HJID")
    public List<AdverseReactionSymptom> getSymptoms() {
        if (symptoms == null) {
            symptoms = new ArrayList<AdverseReactionSymptom>();
        }
        return this.symptoms;
    }

    public void setSymptoms(List<AdverseReactionSymptom> symptoms) {
        this.symptoms = symptoms;
    }

    @OneToMany(targetEntity = AdverseReactionExposure.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPOSURES_ADVERSEREACTION_HJ_0")
    public List<AdverseReactionExposure> getExposures() {
        if (exposures == null) {
            exposures = new ArrayList<AdverseReactionExposure>();
        }
        return this.exposures;
    }

    public void setExposures(List<AdverseReactionExposure> exposures) {
        this.exposures = exposures;
    }

    public AdverseReactionImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public AdverseReactionImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public AdverseReactionImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public AdverseReactionImpl withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public AdverseReactionImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public AdverseReactionImpl withDidNotOccurFlag(Boolean value) {
        setDidNotOccurFlag(value);
        return this;
    }

    public AdverseReactionImpl withRecorder(ResourceReference value) {
        setRecorder(value);
        return this;
    }

    public AdverseReactionImpl withSymptoms(AdverseReactionSymptom... values) {
        if (values!= null) {
            for (AdverseReactionSymptom value: values) {
                getSymptoms().add(value);
            }
        }
        return this;
    }

    public AdverseReactionImpl withSymptoms(Collection<AdverseReactionSymptom> values) {
        if (values!= null) {
            getSymptoms().addAll(values);
        }
        return this;
    }

    public AdverseReactionImpl withSymptoms(List<AdverseReactionSymptom> symptoms) {
        setSymptoms(symptoms);
        return this;
    }

    public AdverseReactionImpl withExposures(AdverseReactionExposure... values) {
        if (values!= null) {
            for (AdverseReactionExposure value: values) {
                getExposures().add(value);
            }
        }
        return this;
    }

    public AdverseReactionImpl withExposures(Collection<AdverseReactionExposure> values) {
        if (values!= null) {
            getExposures().addAll(values);
        }
        return this;
    }

    public AdverseReactionImpl withExposures(List<AdverseReactionExposure> exposures) {
        setExposures(exposures);
        return this;
    }

    @Override
    public AdverseReactionImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public AdverseReactionImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public AdverseReactionImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public AdverseReactionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public AdverseReactionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReactionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public AdverseReactionImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AdverseReactionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AdverseReactionImpl that = ((AdverseReactionImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            Boolean lhsDidNotOccurFlag;
            lhsDidNotOccurFlag = this.getDidNotOccurFlag();
            Boolean rhsDidNotOccurFlag;
            rhsDidNotOccurFlag = that.getDidNotOccurFlag();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "didNotOccurFlag", lhsDidNotOccurFlag), LocatorUtils.property(thatLocator, "didNotOccurFlag", rhsDidNotOccurFlag), lhsDidNotOccurFlag, rhsDidNotOccurFlag)) {
                return false;
            }
        }
        {
            ResourceReference lhsRecorder;
            lhsRecorder = this.getRecorder();
            ResourceReference rhsRecorder;
            rhsRecorder = that.getRecorder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recorder", lhsRecorder), LocatorUtils.property(thatLocator, "recorder", rhsRecorder), lhsRecorder, rhsRecorder)) {
                return false;
            }
        }
        {
            List<AdverseReactionSymptom> lhsSymptoms;
            lhsSymptoms = (((this.symptoms!= null)&&(!this.symptoms.isEmpty()))?this.getSymptoms():null);
            List<AdverseReactionSymptom> rhsSymptoms;
            rhsSymptoms = (((that.symptoms!= null)&&(!that.symptoms.isEmpty()))?that.getSymptoms():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "symptoms", lhsSymptoms), LocatorUtils.property(thatLocator, "symptoms", rhsSymptoms), lhsSymptoms, rhsSymptoms)) {
                return false;
            }
        }
        {
            List<AdverseReactionExposure> lhsExposures;
            lhsExposures = (((this.exposures!= null)&&(!this.exposures.isEmpty()))?this.getExposures():null);
            List<AdverseReactionExposure> rhsExposures;
            rhsExposures = (((that.exposures!= null)&&(!that.exposures.isEmpty()))?that.getExposures():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exposures", lhsExposures), LocatorUtils.property(thatLocator, "exposures", rhsExposures), lhsExposures, rhsExposures)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            Boolean theDidNotOccurFlag;
            theDidNotOccurFlag = this.getDidNotOccurFlag();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "didNotOccurFlag", theDidNotOccurFlag), currentHashCode, theDidNotOccurFlag);
        }
        {
            ResourceReference theRecorder;
            theRecorder = this.getRecorder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recorder", theRecorder), currentHashCode, theRecorder);
        }
        {
            List<AdverseReactionSymptom> theSymptoms;
            theSymptoms = (((this.symptoms!= null)&&(!this.symptoms.isEmpty()))?this.getSymptoms():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "symptoms", theSymptoms), currentHashCode, theSymptoms);
        }
        {
            List<AdverseReactionExposure> theExposures;
            theExposures = (((this.exposures!= null)&&(!this.exposures.isEmpty()))?this.getExposures():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exposures", theExposures), currentHashCode, theExposures);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
