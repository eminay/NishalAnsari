//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.EncounterParticipant;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter.Participant", propOrder = {
    "types",
    "individual"
})
public class EncounterParticipantImpl
    extends BackboneElementImpl
    implements Serializable, EncounterParticipant, Equals, HashCode
{

    @XmlElement(name = "type", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> types;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl individual;

    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPES_ENCOUNTERPARTICIPANT_H_0")
    public List<CodeableConcept> getTypes() {
        if (types == null) {
            types = new ArrayList<CodeableConcept>();
        }
        return this.types;
    }

    public void setTypes(List<CodeableConcept> types) {
        this.types = types;
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDIVIDUAL_ENCOUNTERPARTICIP_0")
    public ResourceReference getIndividual() {
        return individual;
    }

    public void setIndividual(ResourceReference value) {
        this.individual = ((ResourceReferenceImpl) value);
    }

    public EncounterParticipantImpl withTypes(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getTypes().add(value);
            }
        }
        return this;
    }

    public EncounterParticipantImpl withTypes(Collection<CodeableConcept> values) {
        if (values!= null) {
            getTypes().addAll(values);
        }
        return this;
    }

    public EncounterParticipantImpl withTypes(List<CodeableConcept> types) {
        setTypes(types);
        return this;
    }

    public EncounterParticipantImpl withIndividual(ResourceReference value) {
        setIndividual(value);
        return this;
    }

    @Override
    public EncounterParticipantImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterParticipantImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterParticipantImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public EncounterParticipantImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public EncounterParticipantImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public EncounterParticipantImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public EncounterParticipantImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof EncounterParticipantImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final EncounterParticipantImpl that = ((EncounterParticipantImpl) object);
        {
            List<CodeableConcept> lhsTypes;
            lhsTypes = (((this.types!= null)&&(!this.types.isEmpty()))?this.getTypes():null);
            List<CodeableConcept> rhsTypes;
            rhsTypes = (((that.types!= null)&&(!that.types.isEmpty()))?that.getTypes():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "types", lhsTypes), LocatorUtils.property(thatLocator, "types", rhsTypes), lhsTypes, rhsTypes)) {
                return false;
            }
        }
        {
            ResourceReference lhsIndividual;
            lhsIndividual = this.getIndividual();
            ResourceReference rhsIndividual;
            rhsIndividual = that.getIndividual();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "individual", lhsIndividual), LocatorUtils.property(thatLocator, "individual", rhsIndividual), lhsIndividual, rhsIndividual)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theTypes;
            theTypes = (((this.types!= null)&&(!this.types.isEmpty()))?this.getTypes():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "types", theTypes), currentHashCode, theTypes);
        }
        {
            ResourceReference theIndividual;
            theIndividual = this.getIndividual();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "individual", theIndividual), currentHashCode, theIndividual);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
