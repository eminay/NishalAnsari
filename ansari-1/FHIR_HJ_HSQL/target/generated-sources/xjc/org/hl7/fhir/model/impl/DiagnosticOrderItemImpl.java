//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DiagnosticOrderEvent;
import org.hl7.fhir.model.DiagnosticOrderItem;
import org.hl7.fhir.model.DiagnosticOrderStatus;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticOrder.Item", propOrder = {
    "code",
    "specimens",
    "bodySite",
    "status",
    "events"
})
public class DiagnosticOrderItemImpl
    extends BackboneElementImpl
    implements Serializable, DiagnosticOrderItem, Equals, HashCode
{

    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl code;
    @XmlElement(name = "specimen", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> specimens;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl bodySite;
    @XmlElement(type = DiagnosticOrderStatusImpl.class)
    protected DiagnosticOrderStatusImpl status;
    @XmlElement(name = "event", type = DiagnosticOrderEventImpl.class)
    protected List<DiagnosticOrderEvent> events;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_DIAGNOSTICORDERITEM_HJID")
    public CodeableConcept getCode() {
        return code;
    }

    public void setCode(CodeableConcept value) {
        this.code = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMENS_DIAGNOSTICORDERITE_0")
    public List<ResourceReference> getSpecimens() {
        if (specimens == null) {
            specimens = new ArrayList<ResourceReference>();
        }
        return this.specimens;
    }

    public void setSpecimens(List<ResourceReference> specimens) {
        this.specimens = specimens;
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BODYSITE_DIAGNOSTICORDERITEM_0")
    public CodeableConcept getBodySite() {
        return bodySite;
    }

    public void setBodySite(CodeableConcept value) {
        this.bodySite = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = DiagnosticOrderStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DIAGNOSTICORDERITEM_H_0")
    public DiagnosticOrderStatus getStatus() {
        return status;
    }

    public void setStatus(DiagnosticOrderStatus value) {
        this.status = ((DiagnosticOrderStatusImpl) value);
    }

    @OneToMany(targetEntity = DiagnosticOrderEvent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVENTS_DIAGNOSTICORDERITEM_H_0")
    public List<DiagnosticOrderEvent> getEvents() {
        if (events == null) {
            events = new ArrayList<DiagnosticOrderEvent>();
        }
        return this.events;
    }

    public void setEvents(List<DiagnosticOrderEvent> events) {
        this.events = events;
    }

    public DiagnosticOrderItemImpl withCode(CodeableConcept value) {
        setCode(value);
        return this;
    }

    public DiagnosticOrderItemImpl withSpecimens(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSpecimens().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderItemImpl withSpecimens(Collection<ResourceReference> values) {
        if (values!= null) {
            getSpecimens().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderItemImpl withSpecimens(List<ResourceReference> specimens) {
        setSpecimens(specimens);
        return this;
    }

    public DiagnosticOrderItemImpl withBodySite(CodeableConcept value) {
        setBodySite(value);
        return this;
    }

    public DiagnosticOrderItemImpl withStatus(DiagnosticOrderStatus value) {
        setStatus(value);
        return this;
    }

    public DiagnosticOrderItemImpl withEvents(DiagnosticOrderEvent... values) {
        if (values!= null) {
            for (DiagnosticOrderEvent value: values) {
                getEvents().add(value);
            }
        }
        return this;
    }

    public DiagnosticOrderItemImpl withEvents(Collection<DiagnosticOrderEvent> values) {
        if (values!= null) {
            getEvents().addAll(values);
        }
        return this;
    }

    public DiagnosticOrderItemImpl withEvents(List<DiagnosticOrderEvent> events) {
        setEvents(events);
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public DiagnosticOrderItemImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DiagnosticOrderItemImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DiagnosticOrderItemImpl that = ((DiagnosticOrderItemImpl) object);
        {
            CodeableConcept lhsCode;
            lhsCode = this.getCode();
            CodeableConcept rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSpecimens;
            lhsSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            List<ResourceReference> rhsSpecimens;
            rhsSpecimens = (((that.specimens!= null)&&(!that.specimens.isEmpty()))?that.getSpecimens():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimens", lhsSpecimens), LocatorUtils.property(thatLocator, "specimens", rhsSpecimens), lhsSpecimens, rhsSpecimens)) {
                return false;
            }
        }
        {
            CodeableConcept lhsBodySite;
            lhsBodySite = this.getBodySite();
            CodeableConcept rhsBodySite;
            rhsBodySite = that.getBodySite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bodySite", lhsBodySite), LocatorUtils.property(thatLocator, "bodySite", rhsBodySite), lhsBodySite, rhsBodySite)) {
                return false;
            }
        }
        {
            DiagnosticOrderStatus lhsStatus;
            lhsStatus = this.getStatus();
            DiagnosticOrderStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            List<DiagnosticOrderEvent> lhsEvents;
            lhsEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            List<DiagnosticOrderEvent> rhsEvents;
            rhsEvents = (((that.events!= null)&&(!that.events.isEmpty()))?that.getEvents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "events", lhsEvents), LocatorUtils.property(thatLocator, "events", rhsEvents), lhsEvents, rhsEvents)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            List<ResourceReference> theSpecimens;
            theSpecimens = (((this.specimens!= null)&&(!this.specimens.isEmpty()))?this.getSpecimens():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimens", theSpecimens), currentHashCode, theSpecimens);
        }
        {
            CodeableConcept theBodySite;
            theBodySite = this.getBodySite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bodySite", theBodySite), currentHashCode, theBodySite);
        }
        {
            DiagnosticOrderStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            List<DiagnosticOrderEvent> theEvents;
            theEvents = (((this.events!= null)&&(!this.events.isEmpty()))?this.getEvents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "events", theEvents), currentHashCode, theEvents);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
