//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.ConceptMapDependsOn;
import org.hl7.fhir.model.ConceptMapEquivalence;
import org.hl7.fhir.model.ConceptMapMap;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConceptMap.Map", propOrder = {
    "system",
    "code",
    "equivalence",
    "comments",
    "products"
})
public class ConceptMapMapImpl
    extends BackboneElementImpl
    implements Serializable, ConceptMapMap, Equals, HashCode
{

    @XmlElement(type = UriImpl.class)
    protected UriImpl system;
    @XmlElement(type = CodeImpl.class)
    protected CodeImpl code;
    @XmlElement(required = true, type = ConceptMapEquivalenceImpl.class)
    protected ConceptMapEquivalenceImpl equivalence;
    @XmlElement(type = StringImpl.class)
    protected StringImpl comments;
    @XmlElement(name = "product", type = ConceptMapDependsOnImpl.class)
    protected List<ConceptMapDependsOn> products;

    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__CONCEPTMAPMAP_HJID")
    public Uri getSystem() {
        return system;
    }

    public void setSystem(Uri value) {
        this.system = ((UriImpl) value);
    }

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONCEPTMAPMAP_HJID")
    public Code getCode() {
        return code;
    }

    public void setCode(Code value) {
        this.code = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = ConceptMapEquivalence.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EQUIVALENCE_CONCEPTMAPMAP_HJ_0")
    public ConceptMapEquivalence getEquivalence() {
        return equivalence;
    }

    public void setEquivalence(ConceptMapEquivalence value) {
        this.equivalence = ((ConceptMapEquivalenceImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMENTS_CONCEPTMAPMAP_HJID")
    public org.hl7.fhir.model.String getComments() {
        return comments;
    }

    public void setComments(org.hl7.fhir.model.String value) {
        this.comments = ((StringImpl) value);
    }

    @OneToMany(targetEntity = ConceptMapDependsOn.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRODUCTS_CONCEPTMAPMAP_HJID")
    public List<ConceptMapDependsOn> getProducts() {
        if (products == null) {
            products = new ArrayList<ConceptMapDependsOn>();
        }
        return this.products;
    }

    public void setProducts(List<ConceptMapDependsOn> products) {
        this.products = products;
    }

    public ConceptMapMapImpl withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ConceptMapMapImpl withCode(Code value) {
        setCode(value);
        return this;
    }

    public ConceptMapMapImpl withEquivalence(ConceptMapEquivalence value) {
        setEquivalence(value);
        return this;
    }

    public ConceptMapMapImpl withComments(org.hl7.fhir.model.String value) {
        setComments(value);
        return this;
    }

    public ConceptMapMapImpl withProducts(ConceptMapDependsOn... values) {
        if (values!= null) {
            for (ConceptMapDependsOn value: values) {
                getProducts().add(value);
            }
        }
        return this;
    }

    public ConceptMapMapImpl withProducts(Collection<ConceptMapDependsOn> values) {
        if (values!= null) {
            getProducts().addAll(values);
        }
        return this;
    }

    public ConceptMapMapImpl withProducts(List<ConceptMapDependsOn> products) {
        setProducts(products);
        return this;
    }

    @Override
    public ConceptMapMapImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapMapImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapMapImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConceptMapMapImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConceptMapMapImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConceptMapMapImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConceptMapMapImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConceptMapMapImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConceptMapMapImpl that = ((ConceptMapMapImpl) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            Code lhsCode;
            lhsCode = this.getCode();
            Code rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            ConceptMapEquivalence lhsEquivalence;
            lhsEquivalence = this.getEquivalence();
            ConceptMapEquivalence rhsEquivalence;
            rhsEquivalence = that.getEquivalence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "equivalence", lhsEquivalence), LocatorUtils.property(thatLocator, "equivalence", rhsEquivalence), lhsEquivalence, rhsEquivalence)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsComments;
            lhsComments = this.getComments();
            org.hl7.fhir.model.String rhsComments;
            rhsComments = that.getComments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comments", lhsComments), LocatorUtils.property(thatLocator, "comments", rhsComments), lhsComments, rhsComments)) {
                return false;
            }
        }
        {
            List<ConceptMapDependsOn> lhsProducts;
            lhsProducts = (((this.products!= null)&&(!this.products.isEmpty()))?this.getProducts():null);
            List<ConceptMapDependsOn> rhsProducts;
            rhsProducts = (((that.products!= null)&&(!that.products.isEmpty()))?that.getProducts():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "products", lhsProducts), LocatorUtils.property(thatLocator, "products", rhsProducts), lhsProducts, rhsProducts)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            Code theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            ConceptMapEquivalence theEquivalence;
            theEquivalence = this.getEquivalence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "equivalence", theEquivalence), currentHashCode, theEquivalence);
        }
        {
            org.hl7.fhir.model.String theComments;
            theComments = this.getComments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comments", theComments), currentHashCode, theComments);
        }
        {
            List<ConceptMapDependsOn> theProducts;
            theProducts = (((this.products!= null)&&(!this.products.isEmpty()))?this.getProducts():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "products", theProducts), currentHashCode, theProducts);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
