//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ImmunizationRecommendationDateCriterion;
import org.hl7.fhir.model.ImmunizationRecommendationProtocol;
import org.hl7.fhir.model.ImmunizationRecommendationRecommendation;
import org.hl7.fhir.model.Integer;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImmunizationRecommendation.Recommendation", propOrder = {
    "date",
    "vaccineType",
    "doseNumber",
    "forecastStatus",
    "dateCriterions",
    "protocol",
    "supportingImmunizations",
    "supportingPatientInformations"
})
public class ImmunizationRecommendationRecommendationImpl
    extends BackboneElementImpl
    implements Serializable, ImmunizationRecommendationRecommendation, Equals, HashCode
{

    @XmlElement(required = true, type = DateTimeImpl.class)
    protected DateTimeImpl date;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl vaccineType;
    @XmlElement(type = IntegerImpl.class)
    protected IntegerImpl doseNumber;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl forecastStatus;
    @XmlElement(name = "dateCriterion", type = ImmunizationRecommendationDateCriterionImpl.class)
    protected List<ImmunizationRecommendationDateCriterion> dateCriterions;
    @XmlElement(type = ImmunizationRecommendationProtocolImpl.class)
    protected ImmunizationRecommendationProtocolImpl protocol;
    @XmlElement(name = "supportingImmunization", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> supportingImmunizations;
    @XmlElement(name = "supportingPatientInformation", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> supportingPatientInformations;

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__IMMUNIZATIONRECOMMENDA_0")
    public DateTime getDate() {
        return date;
    }

    public void setDate(DateTime value) {
        this.date = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VACCINETYPE_IMMUNIZATIONRECO_0")
    public CodeableConcept getVaccineType() {
        return vaccineType;
    }

    public void setVaccineType(CodeableConcept value) {
        this.vaccineType = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSENUMBER_IMMUNIZATIONRECOM_0")
    public Integer getDoseNumber() {
        return doseNumber;
    }

    public void setDoseNumber(Integer value) {
        this.doseNumber = ((IntegerImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORECASTSTATUS_IMMUNIZATIONR_0")
    public CodeableConcept getForecastStatus() {
        return forecastStatus;
    }

    public void setForecastStatus(CodeableConcept value) {
        this.forecastStatus = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = ImmunizationRecommendationDateCriterion.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATECRITERIONS_IMMUNIZATIONR_0")
    public List<ImmunizationRecommendationDateCriterion> getDateCriterions() {
        if (dateCriterions == null) {
            dateCriterions = new ArrayList<ImmunizationRecommendationDateCriterion>();
        }
        return this.dateCriterions;
    }

    public void setDateCriterions(List<ImmunizationRecommendationDateCriterion> dateCriterions) {
        this.dateCriterions = dateCriterions;
    }

    @ManyToOne(targetEntity = ImmunizationRecommendationProtocol.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROTOCOL_IMMUNIZATIONRECOMME_0")
    public ImmunizationRecommendationProtocol getProtocol() {
        return protocol;
    }

    public void setProtocol(ImmunizationRecommendationProtocol value) {
        this.protocol = ((ImmunizationRecommendationProtocolImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPORTINGIMMUNIZATIONS_IMMU_0")
    public List<ResourceReference> getSupportingImmunizations() {
        if (supportingImmunizations == null) {
            supportingImmunizations = new ArrayList<ResourceReference>();
        }
        return this.supportingImmunizations;
    }

    public void setSupportingImmunizations(List<ResourceReference> supportingImmunizations) {
        this.supportingImmunizations = supportingImmunizations;
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPORTINGPATIENTINFORMATION_0")
    public List<ResourceReference> getSupportingPatientInformations() {
        if (supportingPatientInformations == null) {
            supportingPatientInformations = new ArrayList<ResourceReference>();
        }
        return this.supportingPatientInformations;
    }

    public void setSupportingPatientInformations(List<ResourceReference> supportingPatientInformations) {
        this.supportingPatientInformations = supportingPatientInformations;
    }

    public ImmunizationRecommendationRecommendationImpl withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withVaccineType(CodeableConcept value) {
        setVaccineType(value);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withDoseNumber(Integer value) {
        setDoseNumber(value);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withForecastStatus(CodeableConcept value) {
        setForecastStatus(value);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withDateCriterions(ImmunizationRecommendationDateCriterion... values) {
        if (values!= null) {
            for (ImmunizationRecommendationDateCriterion value: values) {
                getDateCriterions().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withDateCriterions(Collection<ImmunizationRecommendationDateCriterion> values) {
        if (values!= null) {
            getDateCriterions().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withDateCriterions(List<ImmunizationRecommendationDateCriterion> dateCriterions) {
        setDateCriterions(dateCriterions);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withProtocol(ImmunizationRecommendationProtocol value) {
        setProtocol(value);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingImmunizations(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSupportingImmunizations().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingImmunizations(Collection<ResourceReference> values) {
        if (values!= null) {
            getSupportingImmunizations().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingImmunizations(List<ResourceReference> supportingImmunizations) {
        setSupportingImmunizations(supportingImmunizations);
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingPatientInformations(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSupportingPatientInformations().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingPatientInformations(Collection<ResourceReference> values) {
        if (values!= null) {
            getSupportingPatientInformations().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendationImpl withSupportingPatientInformations(List<ResourceReference> supportingPatientInformations) {
        setSupportingPatientInformations(supportingPatientInformations);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendationImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImmunizationRecommendationRecommendationImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImmunizationRecommendationRecommendationImpl that = ((ImmunizationRecommendationRecommendationImpl) object);
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            CodeableConcept lhsVaccineType;
            lhsVaccineType = this.getVaccineType();
            CodeableConcept rhsVaccineType;
            rhsVaccineType = that.getVaccineType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vaccineType", lhsVaccineType), LocatorUtils.property(thatLocator, "vaccineType", rhsVaccineType), lhsVaccineType, rhsVaccineType)) {
                return false;
            }
        }
        {
            Integer lhsDoseNumber;
            lhsDoseNumber = this.getDoseNumber();
            Integer rhsDoseNumber;
            rhsDoseNumber = that.getDoseNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "doseNumber", lhsDoseNumber), LocatorUtils.property(thatLocator, "doseNumber", rhsDoseNumber), lhsDoseNumber, rhsDoseNumber)) {
                return false;
            }
        }
        {
            CodeableConcept lhsForecastStatus;
            lhsForecastStatus = this.getForecastStatus();
            CodeableConcept rhsForecastStatus;
            rhsForecastStatus = that.getForecastStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "forecastStatus", lhsForecastStatus), LocatorUtils.property(thatLocator, "forecastStatus", rhsForecastStatus), lhsForecastStatus, rhsForecastStatus)) {
                return false;
            }
        }
        {
            List<ImmunizationRecommendationDateCriterion> lhsDateCriterions;
            lhsDateCriterions = (((this.dateCriterions!= null)&&(!this.dateCriterions.isEmpty()))?this.getDateCriterions():null);
            List<ImmunizationRecommendationDateCriterion> rhsDateCriterions;
            rhsDateCriterions = (((that.dateCriterions!= null)&&(!that.dateCriterions.isEmpty()))?that.getDateCriterions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateCriterions", lhsDateCriterions), LocatorUtils.property(thatLocator, "dateCriterions", rhsDateCriterions), lhsDateCriterions, rhsDateCriterions)) {
                return false;
            }
        }
        {
            ImmunizationRecommendationProtocol lhsProtocol;
            lhsProtocol = this.getProtocol();
            ImmunizationRecommendationProtocol rhsProtocol;
            rhsProtocol = that.getProtocol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "protocol", lhsProtocol), LocatorUtils.property(thatLocator, "protocol", rhsProtocol), lhsProtocol, rhsProtocol)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSupportingImmunizations;
            lhsSupportingImmunizations = (((this.supportingImmunizations!= null)&&(!this.supportingImmunizations.isEmpty()))?this.getSupportingImmunizations():null);
            List<ResourceReference> rhsSupportingImmunizations;
            rhsSupportingImmunizations = (((that.supportingImmunizations!= null)&&(!that.supportingImmunizations.isEmpty()))?that.getSupportingImmunizations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supportingImmunizations", lhsSupportingImmunizations), LocatorUtils.property(thatLocator, "supportingImmunizations", rhsSupportingImmunizations), lhsSupportingImmunizations, rhsSupportingImmunizations)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSupportingPatientInformations;
            lhsSupportingPatientInformations = (((this.supportingPatientInformations!= null)&&(!this.supportingPatientInformations.isEmpty()))?this.getSupportingPatientInformations():null);
            List<ResourceReference> rhsSupportingPatientInformations;
            rhsSupportingPatientInformations = (((that.supportingPatientInformations!= null)&&(!that.supportingPatientInformations.isEmpty()))?that.getSupportingPatientInformations():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supportingPatientInformations", lhsSupportingPatientInformations), LocatorUtils.property(thatLocator, "supportingPatientInformations", rhsSupportingPatientInformations), lhsSupportingPatientInformations, rhsSupportingPatientInformations)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            CodeableConcept theVaccineType;
            theVaccineType = this.getVaccineType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vaccineType", theVaccineType), currentHashCode, theVaccineType);
        }
        {
            Integer theDoseNumber;
            theDoseNumber = this.getDoseNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doseNumber", theDoseNumber), currentHashCode, theDoseNumber);
        }
        {
            CodeableConcept theForecastStatus;
            theForecastStatus = this.getForecastStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "forecastStatus", theForecastStatus), currentHashCode, theForecastStatus);
        }
        {
            List<ImmunizationRecommendationDateCriterion> theDateCriterions;
            theDateCriterions = (((this.dateCriterions!= null)&&(!this.dateCriterions.isEmpty()))?this.getDateCriterions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateCriterions", theDateCriterions), currentHashCode, theDateCriterions);
        }
        {
            ImmunizationRecommendationProtocol theProtocol;
            theProtocol = this.getProtocol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "protocol", theProtocol), currentHashCode, theProtocol);
        }
        {
            List<ResourceReference> theSupportingImmunizations;
            theSupportingImmunizations = (((this.supportingImmunizations!= null)&&(!this.supportingImmunizations.isEmpty()))?this.getSupportingImmunizations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supportingImmunizations", theSupportingImmunizations), currentHashCode, theSupportingImmunizations);
        }
        {
            List<ResourceReference> theSupportingPatientInformations;
            theSupportingPatientInformations = (((this.supportingPatientInformations!= null)&&(!this.supportingPatientInformations.isEmpty()))?this.getSupportingPatientInformations():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supportingPatientInformations", theSupportingPatientInformations), currentHashCode, theSupportingPatientInformations);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
