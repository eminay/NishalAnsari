//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.ConditionStage;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Condition.Stage", propOrder = {
    "summary",
    "assessments"
})
public class ConditionStageImpl
    extends BackboneElementImpl
    implements Serializable, ConditionStage, Equals, HashCode
{

    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl summary;
    @XmlElement(name = "assessment", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> assessments;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUMMARY_CONDITIONSTAGE_HJID")
    public CodeableConcept getSummary() {
        return summary;
    }

    public void setSummary(CodeableConcept value) {
        this.summary = ((CodeableConceptImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASSESSMENTS_CONDITIONSTAGE_H_0")
    public List<ResourceReference> getAssessments() {
        if (assessments == null) {
            assessments = new ArrayList<ResourceReference>();
        }
        return this.assessments;
    }

    public void setAssessments(List<ResourceReference> assessments) {
        this.assessments = assessments;
    }

    public ConditionStageImpl withSummary(CodeableConcept value) {
        setSummary(value);
        return this;
    }

    public ConditionStageImpl withAssessments(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAssessments().add(value);
            }
        }
        return this;
    }

    public ConditionStageImpl withAssessments(Collection<ResourceReference> values) {
        if (values!= null) {
            getAssessments().addAll(values);
        }
        return this;
    }

    public ConditionStageImpl withAssessments(List<ResourceReference> assessments) {
        setAssessments(assessments);
        return this;
    }

    @Override
    public ConditionStageImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionStageImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionStageImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ConditionStageImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionStageImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionStageImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ConditionStageImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConditionStageImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConditionStageImpl that = ((ConditionStageImpl) object);
        {
            CodeableConcept lhsSummary;
            lhsSummary = this.getSummary();
            CodeableConcept rhsSummary;
            rhsSummary = that.getSummary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "summary", lhsSummary), LocatorUtils.property(thatLocator, "summary", rhsSummary), lhsSummary, rhsSummary)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAssessments;
            lhsAssessments = (((this.assessments!= null)&&(!this.assessments.isEmpty()))?this.getAssessments():null);
            List<ResourceReference> rhsAssessments;
            rhsAssessments = (((that.assessments!= null)&&(!that.assessments.isEmpty()))?that.getAssessments():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "assessments", lhsAssessments), LocatorUtils.property(thatLocator, "assessments", rhsAssessments), lhsAssessments, rhsAssessments)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theSummary;
            theSummary = this.getSummary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "summary", theSummary), currentHashCode, theSummary);
        }
        {
            List<ResourceReference> theAssessments;
            theAssessments = (((this.assessments!= null)&&(!this.assessments.isEmpty()))?this.getAssessments():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "assessments", theAssessments), currentHashCode, theAssessments);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
