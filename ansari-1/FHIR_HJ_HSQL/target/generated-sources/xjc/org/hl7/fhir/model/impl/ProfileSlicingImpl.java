//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.ProfileSlicing;
import org.hl7.fhir.model.SlicingRules;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Slicing", propOrder = {
    "discriminator",
    "ordered",
    "rules"
})
public class ProfileSlicingImpl
    extends BackboneElementImpl
    implements Serializable, ProfileSlicing, Equals, HashCode
{

    @XmlElement(required = true, type = IdImpl.class)
    protected IdImpl discriminator;
    @XmlElement(required = true, type = BooleanImpl.class)
    protected BooleanImpl ordered;
    @XmlElement(required = true, type = SlicingRulesImpl.class)
    protected SlicingRulesImpl rules;

    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISCRIMINATOR_PROFILESLICING_0")
    public Id getDiscriminator() {
        return discriminator;
    }

    public void setDiscriminator(Id value) {
        this.discriminator = ((IdImpl) value);
    }

    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORDERED_PROFILESLICING_HJID")
    public Boolean getOrdered() {
        return ordered;
    }

    public void setOrdered(Boolean value) {
        this.ordered = ((BooleanImpl) value);
    }

    @ManyToOne(targetEntity = SlicingRules.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RULES_PROFILESLICING_HJID")
    public SlicingRules getRules() {
        return rules;
    }

    public void setRules(SlicingRules value) {
        this.rules = ((SlicingRulesImpl) value);
    }

    public ProfileSlicingImpl withDiscriminator(Id value) {
        setDiscriminator(value);
        return this;
    }

    public ProfileSlicingImpl withOrdered(Boolean value) {
        setOrdered(value);
        return this;
    }

    public ProfileSlicingImpl withRules(SlicingRules value) {
        setRules(value);
        return this;
    }

    @Override
    public ProfileSlicingImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileSlicingImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileSlicingImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProfileSlicingImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileSlicingImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileSlicingImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProfileSlicingImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileSlicingImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileSlicingImpl that = ((ProfileSlicingImpl) object);
        {
            Id lhsDiscriminator;
            lhsDiscriminator = this.getDiscriminator();
            Id rhsDiscriminator;
            rhsDiscriminator = that.getDiscriminator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discriminator", lhsDiscriminator), LocatorUtils.property(thatLocator, "discriminator", rhsDiscriminator), lhsDiscriminator, rhsDiscriminator)) {
                return false;
            }
        }
        {
            Boolean lhsOrdered;
            lhsOrdered = this.getOrdered();
            Boolean rhsOrdered;
            rhsOrdered = that.getOrdered();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ordered", lhsOrdered), LocatorUtils.property(thatLocator, "ordered", rhsOrdered), lhsOrdered, rhsOrdered)) {
                return false;
            }
        }
        {
            SlicingRules lhsRules;
            lhsRules = this.getRules();
            SlicingRules rhsRules;
            rhsRules = that.getRules();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rules", lhsRules), LocatorUtils.property(thatLocator, "rules", rhsRules), lhsRules, rhsRules)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Id theDiscriminator;
            theDiscriminator = this.getDiscriminator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discriminator", theDiscriminator), currentHashCode, theDiscriminator);
        }
        {
            Boolean theOrdered;
            theOrdered = this.getOrdered();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ordered", theOrdered), currentHashCode, theOrdered);
        }
        {
            SlicingRules theRules;
            theRules = this.getRules();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rules", theRules), currentHashCode, theRules);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
