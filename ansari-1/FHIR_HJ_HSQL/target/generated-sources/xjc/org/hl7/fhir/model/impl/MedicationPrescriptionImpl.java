//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.MedicationPrescription;
import org.hl7.fhir.model.MedicationPrescriptionDispense;
import org.hl7.fhir.model.MedicationPrescriptionDosageInstruction;
import org.hl7.fhir.model.MedicationPrescriptionStatus;
import org.hl7.fhir.model.MedicationPrescriptionSubstitution;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationPrescription", propOrder = {
    "identifiers",
    "dateWritten",
    "status",
    "patient",
    "prescriber",
    "encounter",
    "reasonResource",
    "reasonCodeableConcept",
    "medication",
    "dosageInstructions",
    "dispense",
    "substitution"
})
@XmlRootElement(name = "MedicationPrescription")
public class MedicationPrescriptionImpl
    extends ResourceImpl
    implements Serializable, MedicationPrescription, Equals, HashCode
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl dateWritten;
    @XmlElement(type = MedicationPrescriptionStatusImpl.class)
    protected MedicationPrescriptionStatusImpl status;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl patient;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl prescriber;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl reasonResource;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reasonCodeableConcept;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl medication;
    @XmlElement(name = "dosageInstruction", type = MedicationPrescriptionDosageInstructionImpl.class)
    protected List<MedicationPrescriptionDosageInstruction> dosageInstructions;
    @XmlElement(type = MedicationPrescriptionDispenseImpl.class)
    protected MedicationPrescriptionDispenseImpl dispense;
    @XmlElement(type = MedicationPrescriptionSubstitutionImpl.class)
    protected MedicationPrescriptionSubstitutionImpl substitution;

    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIERS_MEDICATIONPRESCR_0")
    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public void setIdentifiers(List<Identifier> identifiers) {
        this.identifiers = identifiers;
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATEWRITTEN_MEDICATIONPRESCR_0")
    public DateTime getDateWritten() {
        return dateWritten;
    }

    public void setDateWritten(DateTime value) {
        this.dateWritten = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = MedicationPrescriptionStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONPRESCRIPTIO_0")
    public MedicationPrescriptionStatus getStatus() {
        return status;
    }

    public void setStatus(MedicationPrescriptionStatus value) {
        this.status = ((MedicationPrescriptionStatusImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONPRESCRIPTI_0")
    public ResourceReference getPatient() {
        return patient;
    }

    public void setPatient(ResourceReference value) {
        this.patient = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRESCRIBER_MEDICATIONPRESCRI_0")
    public ResourceReference getPrescriber() {
        return prescriber;
    }

    public void setPrescriber(ResourceReference value) {
        this.prescriber = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_MEDICATIONPRESCRIP_0")
    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONRESOURCE_MEDICATIONPRE_0")
    public ResourceReference getReasonResource() {
        return reasonResource;
    }

    public void setReasonResource(ResourceReference value) {
        this.reasonResource = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONCODEABLECONCEPT_MEDICA_0")
    public CodeableConcept getReasonCodeableConcept() {
        return reasonCodeableConcept;
    }

    public void setReasonCodeableConcept(CodeableConcept value) {
        this.reasonCodeableConcept = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONPRESCRI_0")
    public ResourceReference getMedication() {
        return medication;
    }

    public void setMedication(ResourceReference value) {
        this.medication = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = MedicationPrescriptionDosageInstruction.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSAGEINSTRUCTIONS_MEDICATIO_0")
    public List<MedicationPrescriptionDosageInstruction> getDosageInstructions() {
        if (dosageInstructions == null) {
            dosageInstructions = new ArrayList<MedicationPrescriptionDosageInstruction>();
        }
        return this.dosageInstructions;
    }

    public void setDosageInstructions(List<MedicationPrescriptionDosageInstruction> dosageInstructions) {
        this.dosageInstructions = dosageInstructions;
    }

    @ManyToOne(targetEntity = MedicationPrescriptionDispense.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSE_MEDICATIONPRESCRIPT_0")
    public MedicationPrescriptionDispense getDispense() {
        return dispense;
    }

    public void setDispense(MedicationPrescriptionDispense value) {
        this.dispense = ((MedicationPrescriptionDispenseImpl) value);
    }

    @ManyToOne(targetEntity = MedicationPrescriptionSubstitution.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTITUTION_MEDICATIONPRESC_0")
    public MedicationPrescriptionSubstitution getSubstitution() {
        return substitution;
    }

    public void setSubstitution(MedicationPrescriptionSubstitution value) {
        this.substitution = ((MedicationPrescriptionSubstitutionImpl) value);
    }

    public MedicationPrescriptionImpl withIdentifiers(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifiers().add(value);
            }
        }
        return this;
    }

    public MedicationPrescriptionImpl withIdentifiers(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifiers().addAll(values);
        }
        return this;
    }

    public MedicationPrescriptionImpl withIdentifiers(List<Identifier> identifiers) {
        setIdentifiers(identifiers);
        return this;
    }

    public MedicationPrescriptionImpl withDateWritten(DateTime value) {
        setDateWritten(value);
        return this;
    }

    public MedicationPrescriptionImpl withStatus(MedicationPrescriptionStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationPrescriptionImpl withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationPrescriptionImpl withPrescriber(ResourceReference value) {
        setPrescriber(value);
        return this;
    }

    public MedicationPrescriptionImpl withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public MedicationPrescriptionImpl withReasonResource(ResourceReference value) {
        setReasonResource(value);
        return this;
    }

    public MedicationPrescriptionImpl withReasonCodeableConcept(CodeableConcept value) {
        setReasonCodeableConcept(value);
        return this;
    }

    public MedicationPrescriptionImpl withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationPrescriptionImpl withDosageInstructions(MedicationPrescriptionDosageInstruction... values) {
        if (values!= null) {
            for (MedicationPrescriptionDosageInstruction value: values) {
                getDosageInstructions().add(value);
            }
        }
        return this;
    }

    public MedicationPrescriptionImpl withDosageInstructions(Collection<MedicationPrescriptionDosageInstruction> values) {
        if (values!= null) {
            getDosageInstructions().addAll(values);
        }
        return this;
    }

    public MedicationPrescriptionImpl withDosageInstructions(List<MedicationPrescriptionDosageInstruction> dosageInstructions) {
        setDosageInstructions(dosageInstructions);
        return this;
    }

    public MedicationPrescriptionImpl withDispense(MedicationPrescriptionDispense value) {
        setDispense(value);
        return this;
    }

    public MedicationPrescriptionImpl withSubstitution(MedicationPrescriptionSubstitution value) {
        setSubstitution(value);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public MedicationPrescriptionImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationPrescriptionImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationPrescriptionImpl that = ((MedicationPrescriptionImpl) object);
        {
            List<Identifier> lhsIdentifiers;
            lhsIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            List<Identifier> rhsIdentifiers;
            rhsIdentifiers = (((that.identifiers!= null)&&(!that.identifiers.isEmpty()))?that.getIdentifiers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifiers", lhsIdentifiers), LocatorUtils.property(thatLocator, "identifiers", rhsIdentifiers), lhsIdentifiers, rhsIdentifiers)) {
                return false;
            }
        }
        {
            DateTime lhsDateWritten;
            lhsDateWritten = this.getDateWritten();
            DateTime rhsDateWritten;
            rhsDateWritten = that.getDateWritten();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateWritten", lhsDateWritten), LocatorUtils.property(thatLocator, "dateWritten", rhsDateWritten), lhsDateWritten, rhsDateWritten)) {
                return false;
            }
        }
        {
            MedicationPrescriptionStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationPrescriptionStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ResourceReference lhsPrescriber;
            lhsPrescriber = this.getPrescriber();
            ResourceReference rhsPrescriber;
            rhsPrescriber = that.getPrescriber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prescriber", lhsPrescriber), LocatorUtils.property(thatLocator, "prescriber", rhsPrescriber), lhsPrescriber, rhsPrescriber)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            ResourceReference lhsReasonResource;
            lhsReasonResource = this.getReasonResource();
            ResourceReference rhsReasonResource;
            rhsReasonResource = that.getReasonResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonResource", lhsReasonResource), LocatorUtils.property(thatLocator, "reasonResource", rhsReasonResource), lhsReasonResource, rhsReasonResource)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReasonCodeableConcept;
            lhsReasonCodeableConcept = this.getReasonCodeableConcept();
            CodeableConcept rhsReasonCodeableConcept;
            rhsReasonCodeableConcept = that.getReasonCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonCodeableConcept", lhsReasonCodeableConcept), LocatorUtils.property(thatLocator, "reasonCodeableConcept", rhsReasonCodeableConcept), lhsReasonCodeableConcept, rhsReasonCodeableConcept)) {
                return false;
            }
        }
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            List<MedicationPrescriptionDosageInstruction> lhsDosageInstructions;
            lhsDosageInstructions = (((this.dosageInstructions!= null)&&(!this.dosageInstructions.isEmpty()))?this.getDosageInstructions():null);
            List<MedicationPrescriptionDosageInstruction> rhsDosageInstructions;
            rhsDosageInstructions = (((that.dosageInstructions!= null)&&(!that.dosageInstructions.isEmpty()))?that.getDosageInstructions():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dosageInstructions", lhsDosageInstructions), LocatorUtils.property(thatLocator, "dosageInstructions", rhsDosageInstructions), lhsDosageInstructions, rhsDosageInstructions)) {
                return false;
            }
        }
        {
            MedicationPrescriptionDispense lhsDispense;
            lhsDispense = this.getDispense();
            MedicationPrescriptionDispense rhsDispense;
            rhsDispense = that.getDispense();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispense", lhsDispense), LocatorUtils.property(thatLocator, "dispense", rhsDispense), lhsDispense, rhsDispense)) {
                return false;
            }
        }
        {
            MedicationPrescriptionSubstitution lhsSubstitution;
            lhsSubstitution = this.getSubstitution();
            MedicationPrescriptionSubstitution rhsSubstitution;
            rhsSubstitution = that.getSubstitution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substitution", lhsSubstitution), LocatorUtils.property(thatLocator, "substitution", rhsSubstitution), lhsSubstitution, rhsSubstitution)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifiers", theIdentifiers), currentHashCode, theIdentifiers);
        }
        {
            DateTime theDateWritten;
            theDateWritten = this.getDateWritten();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateWritten", theDateWritten), currentHashCode, theDateWritten);
        }
        {
            MedicationPrescriptionStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ResourceReference thePrescriber;
            thePrescriber = this.getPrescriber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prescriber", thePrescriber), currentHashCode, thePrescriber);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            ResourceReference theReasonResource;
            theReasonResource = this.getReasonResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonResource", theReasonResource), currentHashCode, theReasonResource);
        }
        {
            CodeableConcept theReasonCodeableConcept;
            theReasonCodeableConcept = this.getReasonCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonCodeableConcept", theReasonCodeableConcept), currentHashCode, theReasonCodeableConcept);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            List<MedicationPrescriptionDosageInstruction> theDosageInstructions;
            theDosageInstructions = (((this.dosageInstructions!= null)&&(!this.dosageInstructions.isEmpty()))?this.getDosageInstructions():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dosageInstructions", theDosageInstructions), currentHashCode, theDosageInstructions);
        }
        {
            MedicationPrescriptionDispense theDispense;
            theDispense = this.getDispense();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispense", theDispense), currentHashCode, theDispense);
        }
        {
            MedicationPrescriptionSubstitution theSubstitution;
            theSubstitution = this.getSubstitution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substitution", theSubstitution), currentHashCode, theSubstitution);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
