//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Resource;
import org.hl7.fhir.model.ResourceInline;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Resource", propOrder = {
    "language",
    "text",
    "containeds"
})
@XmlSeeAlso({
    DiagnosticOrderImpl.class,
    ImagingStudyImpl.class,
    AdverseReactionImpl.class,
    PractitionerImpl.class,
    ConceptMapImpl.class,
    PatientImpl.class,
    AlertImpl.class,
    OrderResponseImpl.class,
    SpecimenImpl.class,
    RelatedPersonImpl.class,
    ImmunizationImpl.class,
    DocumentReferenceImpl.class,
    AllergyIntoleranceImpl.class,
    ObservationImpl.class,
    LocationImpl.class,
    ProfileImpl.class,
    OtherImpl.class,
    FamilyHistoryImpl.class,
    MediaImpl.class,
    ConformanceImpl.class,
    DeviceObservationReportImpl.class,
    OperationOutcomeImpl.class,
    CompositionImpl.class,
    QuestionnaireImpl.class,
    ListImpl.class,
    MedicationStatementImpl.class,
    SecurityEventImpl.class,
    EncounterImpl.class,
    MedicationAdministrationImpl.class,
    MedicationPrescriptionImpl.class,
    MedicationDispenseImpl.class,
    DocumentManifestImpl.class,
    ImmunizationRecommendationImpl.class,
    MessageHeaderImpl.class,
    MedicationImpl.class,
    ValueSetImpl.class,
    GroupImpl.class,
    DiagnosticReportImpl.class,
    SubstanceImpl.class,
    ProcedureImpl.class,
    OrganizationImpl.class,
    OrderImpl.class,
    QueryImpl.class,
    DeviceImpl.class,
    SupplyImpl.class,
    CarePlanImpl.class,
    ConditionImpl.class,
    ProvenanceImpl.class
})
public class ResourceImpl
    extends BackboneElementImpl
    implements Serializable, Resource, Equals, HashCode
{

    @XmlElement(type = CodeImpl.class)
    protected CodeImpl language;
    @XmlElement(type = NarrativeImpl.class)
    protected NarrativeImpl text;
    @XmlElement(name = "contained", type = ResourceInlineImpl.class)
    protected List<ResourceInline> containeds;

    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LANGUAGE__RESOURCE__HJID")
    public Code getLanguage() {
        return language;
    }

    public void setLanguage(Code value) {
        this.language = ((CodeImpl) value);
    }

    @ManyToOne(targetEntity = Narrative.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TEXT_RESOURCE__HJID")
    public Narrative getText() {
        return text;
    }

    public void setText(Narrative value) {
        this.text = ((NarrativeImpl) value);
    }

    @OneToMany(targetEntity = ResourceInline.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTAINEDS_RESOURCE__HJID")
    public List<ResourceInline> getContaineds() {
        if (containeds == null) {
            containeds = new ArrayList<ResourceInline>();
        }
        return this.containeds;
    }

    public void setContaineds(List<ResourceInline> containeds) {
        this.containeds = containeds;
    }

    public ResourceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    public ResourceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    public ResourceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    public ResourceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    public ResourceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ResourceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ResourceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ResourceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ResourceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ResourceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ResourceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ResourceImpl withId(String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ResourceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ResourceImpl that = ((ResourceImpl) object);
        {
            Code lhsLanguage;
            lhsLanguage = this.getLanguage();
            Code rhsLanguage;
            rhsLanguage = that.getLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "language", lhsLanguage), LocatorUtils.property(thatLocator, "language", rhsLanguage), lhsLanguage, rhsLanguage)) {
                return false;
            }
        }
        {
            Narrative lhsText;
            lhsText = this.getText();
            Narrative rhsText;
            rhsText = that.getText();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "text", lhsText), LocatorUtils.property(thatLocator, "text", rhsText), lhsText, rhsText)) {
                return false;
            }
        }
        {
            List<ResourceInline> lhsContaineds;
            lhsContaineds = (((this.containeds!= null)&&(!this.containeds.isEmpty()))?this.getContaineds():null);
            List<ResourceInline> rhsContaineds;
            rhsContaineds = (((that.containeds!= null)&&(!that.containeds.isEmpty()))?that.getContaineds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "containeds", lhsContaineds), LocatorUtils.property(thatLocator, "containeds", rhsContaineds), lhsContaineds, rhsContaineds)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theLanguage;
            theLanguage = this.getLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "language", theLanguage), currentHashCode, theLanguage);
        }
        {
            Narrative theText;
            theText = this.getText();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "text", theText), currentHashCode, theText);
        }
        {
            List<ResourceInline> theContaineds;
            theContaineds = (((this.containeds!= null)&&(!this.containeds.isEmpty()))?this.getContaineds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "containeds", theContaineds), currentHashCode, theContaineds);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
