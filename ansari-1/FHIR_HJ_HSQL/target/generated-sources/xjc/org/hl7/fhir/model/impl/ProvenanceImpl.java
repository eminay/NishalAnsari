//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Provenance;
import org.hl7.fhir.model.ProvenanceAgent;
import org.hl7.fhir.model.ProvenanceEntity;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.Uri;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Provenance", propOrder = {
    "targets",
    "period",
    "recorded",
    "reason",
    "location",
    "policies",
    "agents",
    "entities",
    "integritySignature"
})
@XmlRootElement(name = "Provenance")
public class ProvenanceImpl
    extends ResourceImpl
    implements Serializable, Provenance, Equals, HashCode
{

    @XmlElement(name = "target", required = true, type = ResourceReferenceImpl.class)
    protected List<ResourceReference> targets;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl recorded;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reason;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl location;
    @XmlElement(name = "policy", type = UriImpl.class)
    protected List<Uri> policies;
    @XmlElement(name = "agent", type = ProvenanceAgentImpl.class)
    protected List<ProvenanceAgent> agents;
    @XmlElement(name = "entity", type = ProvenanceEntityImpl.class)
    protected List<ProvenanceEntity> entities;
    @XmlElement(type = StringImpl.class)
    protected StringImpl integritySignature;

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TARGETS_PROVENANCE_HJID")
    public List<ResourceReference> getTargets() {
        if (targets == null) {
            targets = new ArrayList<ResourceReference>();
        }
        return this.targets;
    }

    public void setTargets(List<ResourceReference> targets) {
        this.targets = targets;
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_PROVENANCE_HJID")
    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDED_PROVENANCE_HJID")
    public Instant getRecorded() {
        return recorded;
    }

    public void setRecorded(Instant value) {
        this.recorded = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_PROVENANCE_HJID")
    public CodeableConcept getReason() {
        return reason;
    }

    public void setReason(CodeableConcept value) {
        this.reason = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__PROVENANCE_HJID")
    public ResourceReference getLocation() {
        return location;
    }

    public void setLocation(ResourceReference value) {
        this.location = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POLICIES_PROVENANCE_HJID")
    public List<Uri> getPolicies() {
        if (policies == null) {
            policies = new ArrayList<Uri>();
        }
        return this.policies;
    }

    public void setPolicies(List<Uri> policies) {
        this.policies = policies;
    }

    @OneToMany(targetEntity = ProvenanceAgent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AGENTS_PROVENANCE_HJID")
    public List<ProvenanceAgent> getAgents() {
        if (agents == null) {
            agents = new ArrayList<ProvenanceAgent>();
        }
        return this.agents;
    }

    public void setAgents(List<ProvenanceAgent> agents) {
        this.agents = agents;
    }

    @OneToMany(targetEntity = ProvenanceEntity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENTITIES_PROVENANCE_HJID")
    public List<ProvenanceEntity> getEntities() {
        if (entities == null) {
            entities = new ArrayList<ProvenanceEntity>();
        }
        return this.entities;
    }

    public void setEntities(List<ProvenanceEntity> entities) {
        this.entities = entities;
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INTEGRITYSIGNATURE_PROVENANC_0")
    public org.hl7.fhir.model.String getIntegritySignature() {
        return integritySignature;
    }

    public void setIntegritySignature(org.hl7.fhir.model.String value) {
        this.integritySignature = ((StringImpl) value);
    }

    public ProvenanceImpl withTargets(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getTargets().add(value);
            }
        }
        return this;
    }

    public ProvenanceImpl withTargets(Collection<ResourceReference> values) {
        if (values!= null) {
            getTargets().addAll(values);
        }
        return this;
    }

    public ProvenanceImpl withTargets(List<ResourceReference> targets) {
        setTargets(targets);
        return this;
    }

    public ProvenanceImpl withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public ProvenanceImpl withRecorded(Instant value) {
        setRecorded(value);
        return this;
    }

    public ProvenanceImpl withReason(CodeableConcept value) {
        setReason(value);
        return this;
    }

    public ProvenanceImpl withLocation(ResourceReference value) {
        setLocation(value);
        return this;
    }

    public ProvenanceImpl withPolicies(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getPolicies().add(value);
            }
        }
        return this;
    }

    public ProvenanceImpl withPolicies(Collection<Uri> values) {
        if (values!= null) {
            getPolicies().addAll(values);
        }
        return this;
    }

    public ProvenanceImpl withPolicies(List<Uri> policies) {
        setPolicies(policies);
        return this;
    }

    public ProvenanceImpl withAgents(ProvenanceAgent... values) {
        if (values!= null) {
            for (ProvenanceAgent value: values) {
                getAgents().add(value);
            }
        }
        return this;
    }

    public ProvenanceImpl withAgents(Collection<ProvenanceAgent> values) {
        if (values!= null) {
            getAgents().addAll(values);
        }
        return this;
    }

    public ProvenanceImpl withAgents(List<ProvenanceAgent> agents) {
        setAgents(agents);
        return this;
    }

    public ProvenanceImpl withEntities(ProvenanceEntity... values) {
        if (values!= null) {
            for (ProvenanceEntity value: values) {
                getEntities().add(value);
            }
        }
        return this;
    }

    public ProvenanceImpl withEntities(Collection<ProvenanceEntity> values) {
        if (values!= null) {
            getEntities().addAll(values);
        }
        return this;
    }

    public ProvenanceImpl withEntities(List<ProvenanceEntity> entities) {
        setEntities(entities);
        return this;
    }

    public ProvenanceImpl withIntegritySignature(org.hl7.fhir.model.String value) {
        setIntegritySignature(value);
        return this;
    }

    @Override
    public ProvenanceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ProvenanceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ProvenanceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ProvenanceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ProvenanceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ProvenanceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProvenanceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProvenanceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ProvenanceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ProvenanceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ProvenanceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ProvenanceImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProvenanceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProvenanceImpl that = ((ProvenanceImpl) object);
        {
            List<ResourceReference> lhsTargets;
            lhsTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            List<ResourceReference> rhsTargets;
            rhsTargets = (((that.targets!= null)&&(!that.targets.isEmpty()))?that.getTargets():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "targets", lhsTargets), LocatorUtils.property(thatLocator, "targets", rhsTargets), lhsTargets, rhsTargets)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            Instant lhsRecorded;
            lhsRecorded = this.getRecorded();
            Instant rhsRecorded;
            rhsRecorded = that.getRecorded();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recorded", lhsRecorded), LocatorUtils.property(thatLocator, "recorded", rhsRecorded), lhsRecorded, rhsRecorded)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReason;
            lhsReason = this.getReason();
            CodeableConcept rhsReason;
            rhsReason = that.getReason();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            ResourceReference lhsLocation;
            lhsLocation = this.getLocation();
            ResourceReference rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            List<Uri> lhsPolicies;
            lhsPolicies = (((this.policies!= null)&&(!this.policies.isEmpty()))?this.getPolicies():null);
            List<Uri> rhsPolicies;
            rhsPolicies = (((that.policies!= null)&&(!that.policies.isEmpty()))?that.getPolicies():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "policies", lhsPolicies), LocatorUtils.property(thatLocator, "policies", rhsPolicies), lhsPolicies, rhsPolicies)) {
                return false;
            }
        }
        {
            List<ProvenanceAgent> lhsAgents;
            lhsAgents = (((this.agents!= null)&&(!this.agents.isEmpty()))?this.getAgents():null);
            List<ProvenanceAgent> rhsAgents;
            rhsAgents = (((that.agents!= null)&&(!that.agents.isEmpty()))?that.getAgents():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agents", lhsAgents), LocatorUtils.property(thatLocator, "agents", rhsAgents), lhsAgents, rhsAgents)) {
                return false;
            }
        }
        {
            List<ProvenanceEntity> lhsEntities;
            lhsEntities = (((this.entities!= null)&&(!this.entities.isEmpty()))?this.getEntities():null);
            List<ProvenanceEntity> rhsEntities;
            rhsEntities = (((that.entities!= null)&&(!that.entities.isEmpty()))?that.getEntities():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "entities", lhsEntities), LocatorUtils.property(thatLocator, "entities", rhsEntities), lhsEntities, rhsEntities)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsIntegritySignature;
            lhsIntegritySignature = this.getIntegritySignature();
            org.hl7.fhir.model.String rhsIntegritySignature;
            rhsIntegritySignature = that.getIntegritySignature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "integritySignature", lhsIntegritySignature), LocatorUtils.property(thatLocator, "integritySignature", rhsIntegritySignature), lhsIntegritySignature, rhsIntegritySignature)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<ResourceReference> theTargets;
            theTargets = (((this.targets!= null)&&(!this.targets.isEmpty()))?this.getTargets():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "targets", theTargets), currentHashCode, theTargets);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            Instant theRecorded;
            theRecorded = this.getRecorded();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recorded", theRecorded), currentHashCode, theRecorded);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            ResourceReference theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            List<Uri> thePolicies;
            thePolicies = (((this.policies!= null)&&(!this.policies.isEmpty()))?this.getPolicies():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "policies", thePolicies), currentHashCode, thePolicies);
        }
        {
            List<ProvenanceAgent> theAgents;
            theAgents = (((this.agents!= null)&&(!this.agents.isEmpty()))?this.getAgents():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agents", theAgents), currentHashCode, theAgents);
        }
        {
            List<ProvenanceEntity> theEntities;
            theEntities = (((this.entities!= null)&&(!this.entities.isEmpty()))?this.getEntities():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "entities", theEntities), currentHashCode, theEntities);
        }
        {
            org.hl7.fhir.model.String theIntegritySignature;
            theIntegritySignature = this.getIntegritySignature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "integritySignature", theIntegritySignature), currentHashCode, theIntegritySignature);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
