//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.Substance;
import org.hl7.fhir.model.SubstanceIngredient;
import org.hl7.fhir.model.SubstanceInstance;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Substance", propOrder = {
    "type",
    "description",
    "instance",
    "ingredients"
})
@XmlRootElement(name = "Substance")
public class SubstanceImpl
    extends ResourceImpl
    implements Serializable, Substance, Equals, HashCode
{

    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(type = SubstanceInstanceImpl.class)
    protected SubstanceInstanceImpl instance;
    @XmlElement(name = "ingredient", type = SubstanceIngredientImpl.class)
    protected List<SubstanceIngredient> ingredients;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SUBSTANCE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_SUBSTANCE_HJID")
    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = SubstanceInstance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INSTANCE__SUBSTANCE_HJID")
    public SubstanceInstance getInstance() {
        return instance;
    }

    public void setInstance(SubstanceInstance value) {
        this.instance = ((SubstanceInstanceImpl) value);
    }

    @OneToMany(targetEntity = SubstanceIngredient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INGREDIENTS_SUBSTANCE_HJID")
    public List<SubstanceIngredient> getIngredients() {
        if (ingredients == null) {
            ingredients = new ArrayList<SubstanceIngredient>();
        }
        return this.ingredients;
    }

    public void setIngredients(List<SubstanceIngredient> ingredients) {
        this.ingredients = ingredients;
    }

    public SubstanceImpl withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public SubstanceImpl withDescription(org.hl7.fhir.model.String value) {
        setDescription(value);
        return this;
    }

    public SubstanceImpl withInstance(SubstanceInstance value) {
        setInstance(value);
        return this;
    }

    public SubstanceImpl withIngredients(SubstanceIngredient... values) {
        if (values!= null) {
            for (SubstanceIngredient value: values) {
                getIngredients().add(value);
            }
        }
        return this;
    }

    public SubstanceImpl withIngredients(Collection<SubstanceIngredient> values) {
        if (values!= null) {
            getIngredients().addAll(values);
        }
        return this;
    }

    public SubstanceImpl withIngredients(List<SubstanceIngredient> ingredients) {
        setIngredients(ingredients);
        return this;
    }

    @Override
    public SubstanceImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SubstanceImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public SubstanceImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public SubstanceImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public SubstanceImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public SubstanceImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SubstanceImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SubstanceImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public SubstanceImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public SubstanceImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public SubstanceImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public SubstanceImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SubstanceImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SubstanceImpl that = ((SubstanceImpl) object);
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.model.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            SubstanceInstance lhsInstance;
            lhsInstance = this.getInstance();
            SubstanceInstance rhsInstance;
            rhsInstance = that.getInstance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instance", lhsInstance), LocatorUtils.property(thatLocator, "instance", rhsInstance), lhsInstance, rhsInstance)) {
                return false;
            }
        }
        {
            List<SubstanceIngredient> lhsIngredients;
            lhsIngredients = (((this.ingredients!= null)&&(!this.ingredients.isEmpty()))?this.getIngredients():null);
            List<SubstanceIngredient> rhsIngredients;
            rhsIngredients = (((that.ingredients!= null)&&(!that.ingredients.isEmpty()))?that.getIngredients():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ingredients", lhsIngredients), LocatorUtils.property(thatLocator, "ingredients", rhsIngredients), lhsIngredients, rhsIngredients)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            SubstanceInstance theInstance;
            theInstance = this.getInstance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instance", theInstance), currentHashCode, theInstance);
        }
        {
            List<SubstanceIngredient> theIngredients;
            theIngredients = (((this.ingredients!= null)&&(!this.ingredients.isEmpty()))?this.getIngredients():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ingredients", theIngredients), currentHashCode, theIngredients);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
