//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 10:05:24 PM MST 
//


package org.hl7.fhir.model.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.Code;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.Extension;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.Narrative;
import org.hl7.fhir.model.Observation;
import org.hl7.fhir.model.ObservationReferenceRange;
import org.hl7.fhir.model.ObservationRelated;
import org.hl7.fhir.model.ObservationReliability;
import org.hl7.fhir.model.ObservationStatus;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Quantity;
import org.hl7.fhir.model.Ratio;
import org.hl7.fhir.model.ResourceInline;
import org.hl7.fhir.model.ResourceReference;
import org.hl7.fhir.model.SampledData;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Observation", propOrder = {
    "name",
    "valueString",
    "valueSampledData",
    "valuePeriod",
    "valueRatio",
    "valueAttachment",
    "valueCodeableConcept",
    "valueQuantity",
    "interpretation",
    "comments",
    "appliesPeriod",
    "appliesDateTime",
    "issued",
    "status",
    "reliability",
    "bodySite",
    "method",
    "identifier",
    "subject",
    "specimen",
    "performers",
    "referenceRanges",
    "relateds"
})
@XmlRootElement(name = "Observation")
public class ObservationImpl
    extends ResourceImpl
    implements Serializable, Observation, Equals, HashCode
{

    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl name;
    @XmlElement(type = StringImpl.class)
    protected StringImpl valueString;
    @XmlElement(type = SampledDataImpl.class)
    protected SampledDataImpl valueSampledData;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl valuePeriod;
    @XmlElement(type = RatioImpl.class)
    protected RatioImpl valueRatio;
    @XmlElement(type = AttachmentImpl.class)
    protected AttachmentImpl valueAttachment;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl valueCodeableConcept;
    @XmlElement(type = QuantityImpl.class)
    protected QuantityImpl valueQuantity;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl interpretation;
    @XmlElement(type = StringImpl.class)
    protected StringImpl comments;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl appliesPeriod;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl appliesDateTime;
    @XmlElement(type = InstantImpl.class)
    protected InstantImpl issued;
    @XmlElement(required = true, type = ObservationStatusImpl.class)
    protected ObservationStatusImpl status;
    @XmlElement(required = true, type = ObservationReliabilityImpl.class)
    protected ObservationReliabilityImpl reliability;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl bodySite;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl method;
    @XmlElement(type = IdentifierImpl.class)
    protected IdentifierImpl identifier;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl specimen;
    @XmlElement(name = "performer", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> performers;
    @XmlElement(name = "referenceRange", type = ObservationReferenceRangeImpl.class)
    protected List<ObservationReferenceRange> referenceRanges;
    @XmlElement(name = "related", type = ObservationRelatedImpl.class)
    protected List<ObservationRelated> relateds;

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__OBSERVATION_HJID")
    public CodeableConcept getName() {
        return name;
    }

    public void setName(CodeableConcept value) {
        this.name = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUESTRING_OBSERVATION_HJID")
    public org.hl7.fhir.model.String getValueString() {
        return valueString;
    }

    public void setValueString(org.hl7.fhir.model.String value) {
        this.valueString = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = SampledData.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUESAMPLEDDATA_OBSERVATION_0")
    public SampledData getValueSampledData() {
        return valueSampledData;
    }

    public void setValueSampledData(SampledData value) {
        this.valueSampledData = ((SampledDataImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUEPERIOD_OBSERVATION_HJID")
    public Period getValuePeriod() {
        return valuePeriod;
    }

    public void setValuePeriod(Period value) {
        this.valuePeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = Ratio.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUERATIO_OBSERVATION_HJID")
    public Ratio getValueRatio() {
        return valueRatio;
    }

    public void setValueRatio(Ratio value) {
        this.valueRatio = ((RatioImpl) value);
    }

    @ManyToOne(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUEATTACHMENT_OBSERVATION__0")
    public Attachment getValueAttachment() {
        return valueAttachment;
    }

    public void setValueAttachment(Attachment value) {
        this.valueAttachment = ((AttachmentImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUECODEABLECONCEPT_OBSERVA_0")
    public CodeableConcept getValueCodeableConcept() {
        return valueCodeableConcept;
    }

    public void setValueCodeableConcept(CodeableConcept value) {
        this.valueCodeableConcept = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VALUEQUANTITY_OBSERVATION_HJ_0")
    public Quantity getValueQuantity() {
        return valueQuantity;
    }

    public void setValueQuantity(Quantity value) {
        this.valueQuantity = ((QuantityImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INTERPRETATION_OBSERVATION_H_0")
    public CodeableConcept getInterpretation() {
        return interpretation;
    }

    public void setInterpretation(CodeableConcept value) {
        this.interpretation = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = org.hl7.fhir.model.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMENTS_OBSERVATION_HJID")
    public org.hl7.fhir.model.String getComments() {
        return comments;
    }

    public void setComments(org.hl7.fhir.model.String value) {
        this.comments = ((StringImpl) value);
    }

    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "APPLIESPERIOD_OBSERVATION_HJ_0")
    public Period getAppliesPeriod() {
        return appliesPeriod;
    }

    public void setAppliesPeriod(Period value) {
        this.appliesPeriod = ((PeriodImpl) value);
    }

    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "APPLIESDATETIME_OBSERVATION__0")
    public DateTime getAppliesDateTime() {
        return appliesDateTime;
    }

    public void setAppliesDateTime(DateTime value) {
        this.appliesDateTime = ((DateTimeImpl) value);
    }

    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ISSUED_OBSERVATION_HJID")
    public Instant getIssued() {
        return issued;
    }

    public void setIssued(Instant value) {
        this.issued = ((InstantImpl) value);
    }

    @ManyToOne(targetEntity = ObservationStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_OBSERVATION_HJID")
    public ObservationStatus getStatus() {
        return status;
    }

    public void setStatus(ObservationStatus value) {
        this.status = ((ObservationStatusImpl) value);
    }

    @ManyToOne(targetEntity = ObservationReliability.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELIABILITY_OBSERVATION_HJID")
    public ObservationReliability getReliability() {
        return reliability;
    }

    public void setReliability(ObservationReliability value) {
        this.reliability = ((ObservationReliabilityImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BODYSITE_OBSERVATION_HJID")
    public CodeableConcept getBodySite() {
        return bodySite;
    }

    public void setBodySite(CodeableConcept value) {
        this.bodySite = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "METHOD__OBSERVATION_HJID")
    public CodeableConcept getMethod() {
        return method;
    }

    public void setMethod(CodeableConcept value) {
        this.method = ((CodeableConceptImpl) value);
    }

    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_OBSERVATION_HJID")
    public Identifier getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Identifier value) {
        this.identifier = ((IdentifierImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_OBSERVATION_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMEN_OBSERVATION_HJID")
    public ResourceReference getSpecimen() {
        return specimen;
    }

    public void setSpecimen(ResourceReference value) {
        this.specimen = ((ResourceReferenceImpl) value);
    }

    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERFORMERS_OBSERVATION_HJID")
    public List<ResourceReference> getPerformers() {
        if (performers == null) {
            performers = new ArrayList<ResourceReference>();
        }
        return this.performers;
    }

    public void setPerformers(List<ResourceReference> performers) {
        this.performers = performers;
    }

    @OneToMany(targetEntity = ObservationReferenceRange.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCERANGES_OBSERVATION__0")
    public List<ObservationReferenceRange> getReferenceRanges() {
        if (referenceRanges == null) {
            referenceRanges = new ArrayList<ObservationReferenceRange>();
        }
        return this.referenceRanges;
    }

    public void setReferenceRanges(List<ObservationReferenceRange> referenceRanges) {
        this.referenceRanges = referenceRanges;
    }

    @OneToMany(targetEntity = ObservationRelated.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATEDS_OBSERVATION_HJID")
    public List<ObservationRelated> getRelateds() {
        if (relateds == null) {
            relateds = new ArrayList<ObservationRelated>();
        }
        return this.relateds;
    }

    public void setRelateds(List<ObservationRelated> relateds) {
        this.relateds = relateds;
    }

    public ObservationImpl withName(CodeableConcept value) {
        setName(value);
        return this;
    }

    public ObservationImpl withValueString(org.hl7.fhir.model.String value) {
        setValueString(value);
        return this;
    }

    public ObservationImpl withValueSampledData(SampledData value) {
        setValueSampledData(value);
        return this;
    }

    public ObservationImpl withValuePeriod(Period value) {
        setValuePeriod(value);
        return this;
    }

    public ObservationImpl withValueRatio(Ratio value) {
        setValueRatio(value);
        return this;
    }

    public ObservationImpl withValueAttachment(Attachment value) {
        setValueAttachment(value);
        return this;
    }

    public ObservationImpl withValueCodeableConcept(CodeableConcept value) {
        setValueCodeableConcept(value);
        return this;
    }

    public ObservationImpl withValueQuantity(Quantity value) {
        setValueQuantity(value);
        return this;
    }

    public ObservationImpl withInterpretation(CodeableConcept value) {
        setInterpretation(value);
        return this;
    }

    public ObservationImpl withComments(org.hl7.fhir.model.String value) {
        setComments(value);
        return this;
    }

    public ObservationImpl withAppliesPeriod(Period value) {
        setAppliesPeriod(value);
        return this;
    }

    public ObservationImpl withAppliesDateTime(DateTime value) {
        setAppliesDateTime(value);
        return this;
    }

    public ObservationImpl withIssued(Instant value) {
        setIssued(value);
        return this;
    }

    public ObservationImpl withStatus(ObservationStatus value) {
        setStatus(value);
        return this;
    }

    public ObservationImpl withReliability(ObservationReliability value) {
        setReliability(value);
        return this;
    }

    public ObservationImpl withBodySite(CodeableConcept value) {
        setBodySite(value);
        return this;
    }

    public ObservationImpl withMethod(CodeableConcept value) {
        setMethod(value);
        return this;
    }

    public ObservationImpl withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public ObservationImpl withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public ObservationImpl withSpecimen(ResourceReference value) {
        setSpecimen(value);
        return this;
    }

    public ObservationImpl withPerformers(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getPerformers().add(value);
            }
        }
        return this;
    }

    public ObservationImpl withPerformers(Collection<ResourceReference> values) {
        if (values!= null) {
            getPerformers().addAll(values);
        }
        return this;
    }

    public ObservationImpl withPerformers(List<ResourceReference> performers) {
        setPerformers(performers);
        return this;
    }

    public ObservationImpl withReferenceRanges(ObservationReferenceRange... values) {
        if (values!= null) {
            for (ObservationReferenceRange value: values) {
                getReferenceRanges().add(value);
            }
        }
        return this;
    }

    public ObservationImpl withReferenceRanges(Collection<ObservationReferenceRange> values) {
        if (values!= null) {
            getReferenceRanges().addAll(values);
        }
        return this;
    }

    public ObservationImpl withReferenceRanges(List<ObservationReferenceRange> referenceRanges) {
        setReferenceRanges(referenceRanges);
        return this;
    }

    public ObservationImpl withRelateds(ObservationRelated... values) {
        if (values!= null) {
            for (ObservationRelated value: values) {
                getRelateds().add(value);
            }
        }
        return this;
    }

    public ObservationImpl withRelateds(Collection<ObservationRelated> values) {
        if (values!= null) {
            getRelateds().addAll(values);
        }
        return this;
    }

    public ObservationImpl withRelateds(List<ObservationRelated> relateds) {
        setRelateds(relateds);
        return this;
    }

    @Override
    public ObservationImpl withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public ObservationImpl withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public ObservationImpl withContaineds(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContaineds().add(value);
            }
        }
        return this;
    }

    @Override
    public ObservationImpl withContaineds(Collection<ResourceInline> values) {
        if (values!= null) {
            getContaineds().addAll(values);
        }
        return this;
    }

    @Override
    public ObservationImpl withContaineds(List<ResourceInline> containeds) {
        setContaineds(containeds);
        return this;
    }

    @Override
    public ObservationImpl withModifierExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ObservationImpl withModifierExtensions(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ObservationImpl withModifierExtensions(List<Extension> modifierExtensions) {
        setModifierExtensions(modifierExtensions);
        return this;
    }

    @Override
    public ObservationImpl withExtensions(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ObservationImpl withExtensions(Collection<Extension> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

    @Override
    public ObservationImpl withExtensions(List<Extension> extensions) {
        setExtensions(extensions);
        return this;
    }

    @Override
    public ObservationImpl withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ObservationImpl)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ObservationImpl that = ((ObservationImpl) object);
        {
            CodeableConcept lhsName;
            lhsName = this.getName();
            CodeableConcept rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsValueString;
            lhsValueString = this.getValueString();
            org.hl7.fhir.model.String rhsValueString;
            rhsValueString = that.getValueString();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueString", lhsValueString), LocatorUtils.property(thatLocator, "valueString", rhsValueString), lhsValueString, rhsValueString)) {
                return false;
            }
        }
        {
            SampledData lhsValueSampledData;
            lhsValueSampledData = this.getValueSampledData();
            SampledData rhsValueSampledData;
            rhsValueSampledData = that.getValueSampledData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueSampledData", lhsValueSampledData), LocatorUtils.property(thatLocator, "valueSampledData", rhsValueSampledData), lhsValueSampledData, rhsValueSampledData)) {
                return false;
            }
        }
        {
            Period lhsValuePeriod;
            lhsValuePeriod = this.getValuePeriod();
            Period rhsValuePeriod;
            rhsValuePeriod = that.getValuePeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valuePeriod", lhsValuePeriod), LocatorUtils.property(thatLocator, "valuePeriod", rhsValuePeriod), lhsValuePeriod, rhsValuePeriod)) {
                return false;
            }
        }
        {
            Ratio lhsValueRatio;
            lhsValueRatio = this.getValueRatio();
            Ratio rhsValueRatio;
            rhsValueRatio = that.getValueRatio();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueRatio", lhsValueRatio), LocatorUtils.property(thatLocator, "valueRatio", rhsValueRatio), lhsValueRatio, rhsValueRatio)) {
                return false;
            }
        }
        {
            Attachment lhsValueAttachment;
            lhsValueAttachment = this.getValueAttachment();
            Attachment rhsValueAttachment;
            rhsValueAttachment = that.getValueAttachment();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueAttachment", lhsValueAttachment), LocatorUtils.property(thatLocator, "valueAttachment", rhsValueAttachment), lhsValueAttachment, rhsValueAttachment)) {
                return false;
            }
        }
        {
            CodeableConcept lhsValueCodeableConcept;
            lhsValueCodeableConcept = this.getValueCodeableConcept();
            CodeableConcept rhsValueCodeableConcept;
            rhsValueCodeableConcept = that.getValueCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueCodeableConcept", lhsValueCodeableConcept), LocatorUtils.property(thatLocator, "valueCodeableConcept", rhsValueCodeableConcept), lhsValueCodeableConcept, rhsValueCodeableConcept)) {
                return false;
            }
        }
        {
            Quantity lhsValueQuantity;
            lhsValueQuantity = this.getValueQuantity();
            Quantity rhsValueQuantity;
            rhsValueQuantity = that.getValueQuantity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "valueQuantity", lhsValueQuantity), LocatorUtils.property(thatLocator, "valueQuantity", rhsValueQuantity), lhsValueQuantity, rhsValueQuantity)) {
                return false;
            }
        }
        {
            CodeableConcept lhsInterpretation;
            lhsInterpretation = this.getInterpretation();
            CodeableConcept rhsInterpretation;
            rhsInterpretation = that.getInterpretation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interpretation", lhsInterpretation), LocatorUtils.property(thatLocator, "interpretation", rhsInterpretation), lhsInterpretation, rhsInterpretation)) {
                return false;
            }
        }
        {
            org.hl7.fhir.model.String lhsComments;
            lhsComments = this.getComments();
            org.hl7.fhir.model.String rhsComments;
            rhsComments = that.getComments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comments", lhsComments), LocatorUtils.property(thatLocator, "comments", rhsComments), lhsComments, rhsComments)) {
                return false;
            }
        }
        {
            Period lhsAppliesPeriod;
            lhsAppliesPeriod = this.getAppliesPeriod();
            Period rhsAppliesPeriod;
            rhsAppliesPeriod = that.getAppliesPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appliesPeriod", lhsAppliesPeriod), LocatorUtils.property(thatLocator, "appliesPeriod", rhsAppliesPeriod), lhsAppliesPeriod, rhsAppliesPeriod)) {
                return false;
            }
        }
        {
            DateTime lhsAppliesDateTime;
            lhsAppliesDateTime = this.getAppliesDateTime();
            DateTime rhsAppliesDateTime;
            rhsAppliesDateTime = that.getAppliesDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "appliesDateTime", lhsAppliesDateTime), LocatorUtils.property(thatLocator, "appliesDateTime", rhsAppliesDateTime), lhsAppliesDateTime, rhsAppliesDateTime)) {
                return false;
            }
        }
        {
            Instant lhsIssued;
            lhsIssued = this.getIssued();
            Instant rhsIssued;
            rhsIssued = that.getIssued();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issued", lhsIssued), LocatorUtils.property(thatLocator, "issued", rhsIssued), lhsIssued, rhsIssued)) {
                return false;
            }
        }
        {
            ObservationStatus lhsStatus;
            lhsStatus = this.getStatus();
            ObservationStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ObservationReliability lhsReliability;
            lhsReliability = this.getReliability();
            ObservationReliability rhsReliability;
            rhsReliability = that.getReliability();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reliability", lhsReliability), LocatorUtils.property(thatLocator, "reliability", rhsReliability), lhsReliability, rhsReliability)) {
                return false;
            }
        }
        {
            CodeableConcept lhsBodySite;
            lhsBodySite = this.getBodySite();
            CodeableConcept rhsBodySite;
            rhsBodySite = that.getBodySite();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bodySite", lhsBodySite), LocatorUtils.property(thatLocator, "bodySite", rhsBodySite), lhsBodySite, rhsBodySite)) {
                return false;
            }
        }
        {
            CodeableConcept lhsMethod;
            lhsMethod = this.getMethod();
            CodeableConcept rhsMethod;
            rhsMethod = that.getMethod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "method", lhsMethod), LocatorUtils.property(thatLocator, "method", rhsMethod), lhsMethod, rhsMethod)) {
                return false;
            }
        }
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsSpecimen;
            lhsSpecimen = this.getSpecimen();
            ResourceReference rhsSpecimen;
            rhsSpecimen = that.getSpecimen();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimen", lhsSpecimen), LocatorUtils.property(thatLocator, "specimen", rhsSpecimen), lhsSpecimen, rhsSpecimen)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsPerformers;
            lhsPerformers = (((this.performers!= null)&&(!this.performers.isEmpty()))?this.getPerformers():null);
            List<ResourceReference> rhsPerformers;
            rhsPerformers = (((that.performers!= null)&&(!that.performers.isEmpty()))?that.getPerformers():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "performers", lhsPerformers), LocatorUtils.property(thatLocator, "performers", rhsPerformers), lhsPerformers, rhsPerformers)) {
                return false;
            }
        }
        {
            List<ObservationReferenceRange> lhsReferenceRanges;
            lhsReferenceRanges = (((this.referenceRanges!= null)&&(!this.referenceRanges.isEmpty()))?this.getReferenceRanges():null);
            List<ObservationReferenceRange> rhsReferenceRanges;
            rhsReferenceRanges = (((that.referenceRanges!= null)&&(!that.referenceRanges.isEmpty()))?that.getReferenceRanges():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceRanges", lhsReferenceRanges), LocatorUtils.property(thatLocator, "referenceRanges", rhsReferenceRanges), lhsReferenceRanges, rhsReferenceRanges)) {
                return false;
            }
        }
        {
            List<ObservationRelated> lhsRelateds;
            lhsRelateds = (((this.relateds!= null)&&(!this.relateds.isEmpty()))?this.getRelateds():null);
            List<ObservationRelated> rhsRelateds;
            rhsRelateds = (((that.relateds!= null)&&(!that.relateds.isEmpty()))?that.getRelateds():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relateds", lhsRelateds), LocatorUtils.property(thatLocator, "relateds", rhsRelateds), lhsRelateds, rhsRelateds)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.model.String theValueString;
            theValueString = this.getValueString();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueString", theValueString), currentHashCode, theValueString);
        }
        {
            SampledData theValueSampledData;
            theValueSampledData = this.getValueSampledData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueSampledData", theValueSampledData), currentHashCode, theValueSampledData);
        }
        {
            Period theValuePeriod;
            theValuePeriod = this.getValuePeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valuePeriod", theValuePeriod), currentHashCode, theValuePeriod);
        }
        {
            Ratio theValueRatio;
            theValueRatio = this.getValueRatio();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueRatio", theValueRatio), currentHashCode, theValueRatio);
        }
        {
            Attachment theValueAttachment;
            theValueAttachment = this.getValueAttachment();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueAttachment", theValueAttachment), currentHashCode, theValueAttachment);
        }
        {
            CodeableConcept theValueCodeableConcept;
            theValueCodeableConcept = this.getValueCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueCodeableConcept", theValueCodeableConcept), currentHashCode, theValueCodeableConcept);
        }
        {
            Quantity theValueQuantity;
            theValueQuantity = this.getValueQuantity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "valueQuantity", theValueQuantity), currentHashCode, theValueQuantity);
        }
        {
            CodeableConcept theInterpretation;
            theInterpretation = this.getInterpretation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interpretation", theInterpretation), currentHashCode, theInterpretation);
        }
        {
            org.hl7.fhir.model.String theComments;
            theComments = this.getComments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comments", theComments), currentHashCode, theComments);
        }
        {
            Period theAppliesPeriod;
            theAppliesPeriod = this.getAppliesPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appliesPeriod", theAppliesPeriod), currentHashCode, theAppliesPeriod);
        }
        {
            DateTime theAppliesDateTime;
            theAppliesDateTime = this.getAppliesDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "appliesDateTime", theAppliesDateTime), currentHashCode, theAppliesDateTime);
        }
        {
            Instant theIssued;
            theIssued = this.getIssued();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issued", theIssued), currentHashCode, theIssued);
        }
        {
            ObservationStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ObservationReliability theReliability;
            theReliability = this.getReliability();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reliability", theReliability), currentHashCode, theReliability);
        }
        {
            CodeableConcept theBodySite;
            theBodySite = this.getBodySite();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bodySite", theBodySite), currentHashCode, theBodySite);
        }
        {
            CodeableConcept theMethod;
            theMethod = this.getMethod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "method", theMethod), currentHashCode, theMethod);
        }
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theSpecimen;
            theSpecimen = this.getSpecimen();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimen", theSpecimen), currentHashCode, theSpecimen);
        }
        {
            List<ResourceReference> thePerformers;
            thePerformers = (((this.performers!= null)&&(!this.performers.isEmpty()))?this.getPerformers():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "performers", thePerformers), currentHashCode, thePerformers);
        }
        {
            List<ObservationReferenceRange> theReferenceRanges;
            theReferenceRanges = (((this.referenceRanges!= null)&&(!this.referenceRanges.isEmpty()))?this.getReferenceRanges():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceRanges", theReferenceRanges), currentHashCode, theReferenceRanges);
        }
        {
            List<ObservationRelated> theRelateds;
            theRelateds = (((this.relateds!= null)&&(!this.relateds.isEmpty()))?this.getRelateds():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relateds", theRelateds), currentHashCode, theRelateds);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
