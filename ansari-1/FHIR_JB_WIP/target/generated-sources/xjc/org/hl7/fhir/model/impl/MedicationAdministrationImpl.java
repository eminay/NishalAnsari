//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 06:17:33 PM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.MedicationAdministration;
import org.hl7.fhir.model.MedicationAdministrationDosage;
import org.hl7.fhir.model.MedicationAdministrationStatus;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationAdministration", propOrder = {
    "identifiers",
    "status",
    "patient",
    "practitioner",
    "encounter",
    "prescription",
    "wasNotGiven",
    "reasonNotGivens",
    "whenGiven",
    "medication",
    "devices",
    "dosages"
})
@XmlRootElement(name = "MedicationAdministration")
public class MedicationAdministrationImpl
    extends ResourceImpl
    implements MedicationAdministration, ToString
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = MedicationAdministrationStatusImpl.class)
    protected MedicationAdministrationStatusImpl status;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl patient;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl practitioner;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl prescription;
    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl wasNotGiven;
    @XmlElement(name = "reasonNotGiven", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> reasonNotGivens;
    @XmlElement(required = true, type = PeriodImpl.class)
    protected PeriodImpl whenGiven;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl medication;
    @XmlElement(name = "device", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> devices;
    @XmlElement(name = "dosage", type = MedicationAdministrationDosageImpl.class)
    protected List<MedicationAdministrationDosage> dosages;

    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public MedicationAdministrationStatus getStatus() {
        return status;
    }

    public void setStatus(MedicationAdministrationStatus value) {
        this.status = ((MedicationAdministrationStatusImpl) value);
    }

    public ResourceReference getPatient() {
        return patient;
    }

    public void setPatient(ResourceReference value) {
        this.patient = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getPractitioner() {
        return practitioner;
    }

    public void setPractitioner(ResourceReference value) {
        this.practitioner = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getPrescription() {
        return prescription;
    }

    public void setPrescription(ResourceReference value) {
        this.prescription = ((ResourceReferenceImpl) value);
    }

    public Boolean getWasNotGiven() {
        return wasNotGiven;
    }

    public void setWasNotGiven(Boolean value) {
        this.wasNotGiven = ((BooleanImpl) value);
    }

    public List<CodeableConcept> getReasonNotGivens() {
        if (reasonNotGivens == null) {
            reasonNotGivens = new ArrayList<CodeableConcept>();
        }
        return this.reasonNotGivens;
    }

    public Period getWhenGiven() {
        return whenGiven;
    }

    public void setWhenGiven(Period value) {
        this.whenGiven = ((PeriodImpl) value);
    }

    public ResourceReference getMedication() {
        return medication;
    }

    public void setMedication(ResourceReference value) {
        this.medication = ((ResourceReferenceImpl) value);
    }

    public List<ResourceReference> getDevices() {
        if (devices == null) {
            devices = new ArrayList<ResourceReference>();
        }
        return this.devices;
    }

    public List<MedicationAdministrationDosage> getDosages() {
        if (dosages == null) {
            dosages = new ArrayList<MedicationAdministrationDosage>();
        }
        return this.dosages;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            strategy.appendField(locator, this, "identifiers", buffer, theIdentifiers);
        }
        {
            MedicationAdministrationStatus theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            strategy.appendField(locator, this, "patient", buffer, thePatient);
        }
        {
            ResourceReference thePractitioner;
            thePractitioner = this.getPractitioner();
            strategy.appendField(locator, this, "practitioner", buffer, thePractitioner);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            strategy.appendField(locator, this, "encounter", buffer, theEncounter);
        }
        {
            ResourceReference thePrescription;
            thePrescription = this.getPrescription();
            strategy.appendField(locator, this, "prescription", buffer, thePrescription);
        }
        {
            Boolean theWasNotGiven;
            theWasNotGiven = this.getWasNotGiven();
            strategy.appendField(locator, this, "wasNotGiven", buffer, theWasNotGiven);
        }
        {
            List<CodeableConcept> theReasonNotGivens;
            theReasonNotGivens = (((this.reasonNotGivens!= null)&&(!this.reasonNotGivens.isEmpty()))?this.getReasonNotGivens():null);
            strategy.appendField(locator, this, "reasonNotGivens", buffer, theReasonNotGivens);
        }
        {
            Period theWhenGiven;
            theWhenGiven = this.getWhenGiven();
            strategy.appendField(locator, this, "whenGiven", buffer, theWhenGiven);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            strategy.appendField(locator, this, "medication", buffer, theMedication);
        }
        {
            List<ResourceReference> theDevices;
            theDevices = (((this.devices!= null)&&(!this.devices.isEmpty()))?this.getDevices():null);
            strategy.appendField(locator, this, "devices", buffer, theDevices);
        }
        {
            List<MedicationAdministrationDosage> theDosages;
            theDosages = (((this.dosages!= null)&&(!this.dosages.isEmpty()))?this.getDosages():null);
            strategy.appendField(locator, this, "dosages", buffer, theDosages);
        }
        return buffer;
    }

}
