//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 06:17:33 PM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Address;
import org.hl7.fhir.model.Attachment;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Contact;
import org.hl7.fhir.model.DateTime;
import org.hl7.fhir.model.HumanName;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Practitioner;
import org.hl7.fhir.model.PractitionerQualification;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Practitioner", propOrder = {
    "identifiers",
    "name",
    "telecoms",
    "address",
    "gender",
    "birthDate",
    "photos",
    "organization",
    "roles",
    "specialties",
    "period",
    "locations",
    "qualifications",
    "communications"
})
@XmlRootElement(name = "Practitioner")
public class PractitionerImpl
    extends ResourceImpl
    implements Practitioner, ToString
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(type = HumanNameImpl.class)
    protected HumanNameImpl name;
    @XmlElement(name = "telecom", type = ContactImpl.class)
    protected List<Contact> telecoms;
    @XmlElement(type = AddressImpl.class)
    protected AddressImpl address;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl gender;
    @XmlElement(type = DateTimeImpl.class)
    protected DateTimeImpl birthDate;
    @XmlElement(name = "photo", type = AttachmentImpl.class)
    protected List<Attachment> photos;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl organization;
    @XmlElement(name = "role", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> roles;
    @XmlElement(name = "specialty", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> specialties;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl period;
    @XmlElement(name = "location", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> locations;
    @XmlElement(name = "qualification", type = PractitionerQualificationImpl.class)
    protected List<PractitionerQualification> qualifications;
    @XmlElement(name = "communication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> communications;

    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public HumanName getName() {
        return name;
    }

    public void setName(HumanName value) {
        this.name = ((HumanNameImpl) value);
    }

    public List<Contact> getTelecoms() {
        if (telecoms == null) {
            telecoms = new ArrayList<Contact>();
        }
        return this.telecoms;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address value) {
        this.address = ((AddressImpl) value);
    }

    public CodeableConcept getGender() {
        return gender;
    }

    public void setGender(CodeableConcept value) {
        this.gender = ((CodeableConceptImpl) value);
    }

    public DateTime getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(DateTime value) {
        this.birthDate = ((DateTimeImpl) value);
    }

    public List<Attachment> getPhotos() {
        if (photos == null) {
            photos = new ArrayList<Attachment>();
        }
        return this.photos;
    }

    public ResourceReference getOrganization() {
        return organization;
    }

    public void setOrganization(ResourceReference value) {
        this.organization = ((ResourceReferenceImpl) value);
    }

    public List<CodeableConcept> getRoles() {
        if (roles == null) {
            roles = new ArrayList<CodeableConcept>();
        }
        return this.roles;
    }

    public List<CodeableConcept> getSpecialties() {
        if (specialties == null) {
            specialties = new ArrayList<CodeableConcept>();
        }
        return this.specialties;
    }

    public Period getPeriod() {
        return period;
    }

    public void setPeriod(Period value) {
        this.period = ((PeriodImpl) value);
    }

    public List<ResourceReference> getLocations() {
        if (locations == null) {
            locations = new ArrayList<ResourceReference>();
        }
        return this.locations;
    }

    public List<PractitionerQualification> getQualifications() {
        if (qualifications == null) {
            qualifications = new ArrayList<PractitionerQualification>();
        }
        return this.qualifications;
    }

    public List<CodeableConcept> getCommunications() {
        if (communications == null) {
            communications = new ArrayList<CodeableConcept>();
        }
        return this.communications;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            strategy.appendField(locator, this, "identifiers", buffer, theIdentifiers);
        }
        {
            HumanName theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            List<Contact> theTelecoms;
            theTelecoms = (((this.telecoms!= null)&&(!this.telecoms.isEmpty()))?this.getTelecoms():null);
            strategy.appendField(locator, this, "telecoms", buffer, theTelecoms);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            strategy.appendField(locator, this, "gender", buffer, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            strategy.appendField(locator, this, "birthDate", buffer, theBirthDate);
        }
        {
            List<Attachment> thePhotos;
            thePhotos = (((this.photos!= null)&&(!this.photos.isEmpty()))?this.getPhotos():null);
            strategy.appendField(locator, this, "photos", buffer, thePhotos);
        }
        {
            ResourceReference theOrganization;
            theOrganization = this.getOrganization();
            strategy.appendField(locator, this, "organization", buffer, theOrganization);
        }
        {
            List<CodeableConcept> theRoles;
            theRoles = (((this.roles!= null)&&(!this.roles.isEmpty()))?this.getRoles():null);
            strategy.appendField(locator, this, "roles", buffer, theRoles);
        }
        {
            List<CodeableConcept> theSpecialties;
            theSpecialties = (((this.specialties!= null)&&(!this.specialties.isEmpty()))?this.getSpecialties():null);
            strategy.appendField(locator, this, "specialties", buffer, theSpecialties);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            strategy.appendField(locator, this, "period", buffer, thePeriod);
        }
        {
            List<ResourceReference> theLocations;
            theLocations = (((this.locations!= null)&&(!this.locations.isEmpty()))?this.getLocations():null);
            strategy.appendField(locator, this, "locations", buffer, theLocations);
        }
        {
            List<PractitionerQualification> theQualifications;
            theQualifications = (((this.qualifications!= null)&&(!this.qualifications.isEmpty()))?this.getQualifications():null);
            strategy.appendField(locator, this, "qualifications", buffer, theQualifications);
        }
        {
            List<CodeableConcept> theCommunications;
            theCommunications = (((this.communications!= null)&&(!this.communications.isEmpty()))?this.getCommunications():null);
            strategy.appendField(locator, this, "communications", buffer, theCommunications);
        }
        return buffer;
    }

}
