//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 06:17:33 PM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.Boolean;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.ConformanceCertificate;
import org.hl7.fhir.model.ConformanceSecurity;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Security", propOrder = {
    "cors",
    "services",
    "description",
    "certificates"
})
public class ConformanceSecurityImpl
    extends BackboneElementImpl
    implements ConformanceSecurity, ToString
{

    @XmlElement(type = BooleanImpl.class)
    protected BooleanImpl cors;
    @XmlElement(name = "service", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> services;
    @XmlElement(type = StringImpl.class)
    protected StringImpl description;
    @XmlElement(name = "certificate", type = ConformanceCertificateImpl.class)
    protected List<ConformanceCertificate> certificates;

    public Boolean getCors() {
        return cors;
    }

    public void setCors(Boolean value) {
        this.cors = ((BooleanImpl) value);
    }

    public List<CodeableConcept> getServices() {
        if (services == null) {
            services = new ArrayList<CodeableConcept>();
        }
        return this.services;
    }

    public org.hl7.fhir.model.String getDescription() {
        return description;
    }

    public void setDescription(org.hl7.fhir.model.String value) {
        this.description = ((StringImpl) value);
    }

    public List<ConformanceCertificate> getCertificates() {
        if (certificates == null) {
            certificates = new ArrayList<ConformanceCertificate>();
        }
        return this.certificates;
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Boolean theCors;
            theCors = this.getCors();
            strategy.appendField(locator, this, "cors", buffer, theCors);
        }
        {
            List<CodeableConcept> theServices;
            theServices = (((this.services!= null)&&(!this.services.isEmpty()))?this.getServices():null);
            strategy.appendField(locator, this, "services", buffer, theServices);
        }
        {
            org.hl7.fhir.model.String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            List<ConformanceCertificate> theCertificates;
            theCertificates = (((this.certificates!= null)&&(!this.certificates.isEmpty()))?this.getCertificates():null);
            strategy.appendField(locator, this, "certificates", buffer, theCertificates);
        }
        return buffer;
    }

}
