//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 06:17:33 PM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Identifier;
import org.hl7.fhir.model.Period;
import org.hl7.fhir.model.Procedure;
import org.hl7.fhir.model.ProcedurePerformer;
import org.hl7.fhir.model.ProcedureRelatedItem;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Procedure", propOrder = {
    "identifiers",
    "subject",
    "type",
    "bodySites",
    "indications",
    "performers",
    "date",
    "encounter",
    "outcome",
    "reports",
    "complications",
    "followUp",
    "relatedItems",
    "notes"
})
@XmlRootElement(name = "Procedure")
public class ProcedureImpl
    extends ResourceImpl
    implements Procedure, ToString
{

    @XmlElement(name = "identifier", type = IdentifierImpl.class)
    protected List<Identifier> identifiers;
    @XmlElement(required = true, type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl subject;
    @XmlElement(required = true, type = CodeableConceptImpl.class)
    protected CodeableConceptImpl type;
    @XmlElement(name = "bodySite", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> bodySites;
    @XmlElement(name = "indication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> indications;
    @XmlElement(name = "performer", type = ProcedurePerformerImpl.class)
    protected List<ProcedurePerformer> performers;
    @XmlElement(type = PeriodImpl.class)
    protected PeriodImpl date;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl encounter;
    @XmlElement(type = StringImpl.class)
    protected StringImpl outcome;
    @XmlElement(name = "report", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> reports;
    @XmlElement(name = "complication", type = CodeableConceptImpl.class)
    protected List<CodeableConcept> complications;
    @XmlElement(type = StringImpl.class)
    protected StringImpl followUp;
    @XmlElement(name = "relatedItem", type = ProcedureRelatedItemImpl.class)
    protected List<ProcedureRelatedItem> relatedItems;
    @XmlElement(type = StringImpl.class)
    protected StringImpl notes;

    public List<Identifier> getIdentifiers() {
        if (identifiers == null) {
            identifiers = new ArrayList<Identifier>();
        }
        return this.identifiers;
    }

    public ResourceReference getSubject() {
        return subject;
    }

    public void setSubject(ResourceReference value) {
        this.subject = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getType() {
        return type;
    }

    public void setType(CodeableConcept value) {
        this.type = ((CodeableConceptImpl) value);
    }

    public List<CodeableConcept> getBodySites() {
        if (bodySites == null) {
            bodySites = new ArrayList<CodeableConcept>();
        }
        return this.bodySites;
    }

    public List<CodeableConcept> getIndications() {
        if (indications == null) {
            indications = new ArrayList<CodeableConcept>();
        }
        return this.indications;
    }

    public List<ProcedurePerformer> getPerformers() {
        if (performers == null) {
            performers = new ArrayList<ProcedurePerformer>();
        }
        return this.performers;
    }

    public Period getDate() {
        return date;
    }

    public void setDate(Period value) {
        this.date = ((PeriodImpl) value);
    }

    public ResourceReference getEncounter() {
        return encounter;
    }

    public void setEncounter(ResourceReference value) {
        this.encounter = ((ResourceReferenceImpl) value);
    }

    public org.hl7.fhir.model.String getOutcome() {
        return outcome;
    }

    public void setOutcome(org.hl7.fhir.model.String value) {
        this.outcome = ((StringImpl) value);
    }

    public List<ResourceReference> getReports() {
        if (reports == null) {
            reports = new ArrayList<ResourceReference>();
        }
        return this.reports;
    }

    public List<CodeableConcept> getComplications() {
        if (complications == null) {
            complications = new ArrayList<CodeableConcept>();
        }
        return this.complications;
    }

    public org.hl7.fhir.model.String getFollowUp() {
        return followUp;
    }

    public void setFollowUp(org.hl7.fhir.model.String value) {
        this.followUp = ((StringImpl) value);
    }

    public List<ProcedureRelatedItem> getRelatedItems() {
        if (relatedItems == null) {
            relatedItems = new ArrayList<ProcedureRelatedItem>();
        }
        return this.relatedItems;
    }

    public org.hl7.fhir.model.String getNotes() {
        return notes;
    }

    public void setNotes(org.hl7.fhir.model.String value) {
        this.notes = ((StringImpl) value);
    }

    public java.lang.String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<Identifier> theIdentifiers;
            theIdentifiers = (((this.identifiers!= null)&&(!this.identifiers.isEmpty()))?this.getIdentifiers():null);
            strategy.appendField(locator, this, "identifiers", buffer, theIdentifiers);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            strategy.appendField(locator, this, "subject", buffer, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType);
        }
        {
            List<CodeableConcept> theBodySites;
            theBodySites = (((this.bodySites!= null)&&(!this.bodySites.isEmpty()))?this.getBodySites():null);
            strategy.appendField(locator, this, "bodySites", buffer, theBodySites);
        }
        {
            List<CodeableConcept> theIndications;
            theIndications = (((this.indications!= null)&&(!this.indications.isEmpty()))?this.getIndications():null);
            strategy.appendField(locator, this, "indications", buffer, theIndications);
        }
        {
            List<ProcedurePerformer> thePerformers;
            thePerformers = (((this.performers!= null)&&(!this.performers.isEmpty()))?this.getPerformers():null);
            strategy.appendField(locator, this, "performers", buffer, thePerformers);
        }
        {
            Period theDate;
            theDate = this.getDate();
            strategy.appendField(locator, this, "date", buffer, theDate);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            strategy.appendField(locator, this, "encounter", buffer, theEncounter);
        }
        {
            org.hl7.fhir.model.String theOutcome;
            theOutcome = this.getOutcome();
            strategy.appendField(locator, this, "outcome", buffer, theOutcome);
        }
        {
            List<ResourceReference> theReports;
            theReports = (((this.reports!= null)&&(!this.reports.isEmpty()))?this.getReports():null);
            strategy.appendField(locator, this, "reports", buffer, theReports);
        }
        {
            List<CodeableConcept> theComplications;
            theComplications = (((this.complications!= null)&&(!this.complications.isEmpty()))?this.getComplications():null);
            strategy.appendField(locator, this, "complications", buffer, theComplications);
        }
        {
            org.hl7.fhir.model.String theFollowUp;
            theFollowUp = this.getFollowUp();
            strategy.appendField(locator, this, "followUp", buffer, theFollowUp);
        }
        {
            List<ProcedureRelatedItem> theRelatedItems;
            theRelatedItems = (((this.relatedItems!= null)&&(!this.relatedItems.isEmpty()))?this.getRelatedItems():null);
            strategy.appendField(locator, this, "relatedItems", buffer, theRelatedItems);
        }
        {
            org.hl7.fhir.model.String theNotes;
            theNotes = this.getNotes();
            strategy.appendField(locator, this, "notes", buffer, theNotes);
        }
        return buffer;
    }

}
