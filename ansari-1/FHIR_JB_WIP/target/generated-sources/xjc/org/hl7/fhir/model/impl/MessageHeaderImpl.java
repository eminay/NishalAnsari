//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.05.08 at 06:17:33 PM MST 
//


package org.hl7.fhir.model.impl;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.hl7.fhir.model.CodeableConcept;
import org.hl7.fhir.model.Coding;
import org.hl7.fhir.model.Id;
import org.hl7.fhir.model.Instant;
import org.hl7.fhir.model.MessageHeader;
import org.hl7.fhir.model.MessageHeaderDestination;
import org.hl7.fhir.model.MessageHeaderResponse;
import org.hl7.fhir.model.MessageHeaderSource;
import org.hl7.fhir.model.ResourceReference;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MessageHeader", propOrder = {
    "identifier",
    "timestamp",
    "event",
    "response",
    "source",
    "destinations",
    "enterer",
    "author",
    "receiver",
    "responsible",
    "reason",
    "datas"
})
@XmlRootElement(name = "MessageHeader")
public class MessageHeaderImpl
    extends ResourceImpl
    implements MessageHeader, ToString
{

    @XmlElement(required = true, type = IdImpl.class)
    protected IdImpl identifier;
    @XmlElement(required = true, type = InstantImpl.class)
    protected InstantImpl timestamp;
    @XmlElement(required = true, type = CodingImpl.class)
    protected CodingImpl event;
    @XmlElement(type = MessageHeaderResponseImpl.class)
    protected MessageHeaderResponseImpl response;
    @XmlElement(required = true, type = MessageHeaderSourceImpl.class)
    protected MessageHeaderSourceImpl source;
    @XmlElement(name = "destination", type = MessageHeaderDestinationImpl.class)
    protected List<MessageHeaderDestination> destinations;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl enterer;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl author;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl receiver;
    @XmlElement(type = ResourceReferenceImpl.class)
    protected ResourceReferenceImpl responsible;
    @XmlElement(type = CodeableConceptImpl.class)
    protected CodeableConceptImpl reason;
    @XmlElement(name = "data", type = ResourceReferenceImpl.class)
    protected List<ResourceReference> datas;

    public Id getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Id value) {
        this.identifier = ((IdImpl) value);
    }

    public Instant getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Instant value) {
        this.timestamp = ((InstantImpl) value);
    }

    public Coding getEvent() {
        return event;
    }

    public void setEvent(Coding value) {
        this.event = ((CodingImpl) value);
    }

    public MessageHeaderResponse getResponse() {
        return response;
    }

    public void setResponse(MessageHeaderResponse value) {
        this.response = ((MessageHeaderResponseImpl) value);
    }

    public MessageHeaderSource getSource() {
        return source;
    }

    public void setSource(MessageHeaderSource value) {
        this.source = ((MessageHeaderSourceImpl) value);
    }

    public List<MessageHeaderDestination> getDestinations() {
        if (destinations == null) {
            destinations = new ArrayList<MessageHeaderDestination>();
        }
        return this.destinations;
    }

    public ResourceReference getEnterer() {
        return enterer;
    }

    public void setEnterer(ResourceReference value) {
        this.enterer = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getAuthor() {
        return author;
    }

    public void setAuthor(ResourceReference value) {
        this.author = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getReceiver() {
        return receiver;
    }

    public void setReceiver(ResourceReference value) {
        this.receiver = ((ResourceReferenceImpl) value);
    }

    public ResourceReference getResponsible() {
        return responsible;
    }

    public void setResponsible(ResourceReference value) {
        this.responsible = ((ResourceReferenceImpl) value);
    }

    public CodeableConcept getReason() {
        return reason;
    }

    public void setReason(CodeableConcept value) {
        this.reason = ((CodeableConceptImpl) value);
    }

    public List<ResourceReference> getDatas() {
        if (datas == null) {
            datas = new ArrayList<ResourceReference>();
        }
        return this.datas;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            Id theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier);
        }
        {
            Instant theTimestamp;
            theTimestamp = this.getTimestamp();
            strategy.appendField(locator, this, "timestamp", buffer, theTimestamp);
        }
        {
            Coding theEvent;
            theEvent = this.getEvent();
            strategy.appendField(locator, this, "event", buffer, theEvent);
        }
        {
            MessageHeaderResponse theResponse;
            theResponse = this.getResponse();
            strategy.appendField(locator, this, "response", buffer, theResponse);
        }
        {
            MessageHeaderSource theSource;
            theSource = this.getSource();
            strategy.appendField(locator, this, "source", buffer, theSource);
        }
        {
            List<MessageHeaderDestination> theDestinations;
            theDestinations = (((this.destinations!= null)&&(!this.destinations.isEmpty()))?this.getDestinations():null);
            strategy.appendField(locator, this, "destinations", buffer, theDestinations);
        }
        {
            ResourceReference theEnterer;
            theEnterer = this.getEnterer();
            strategy.appendField(locator, this, "enterer", buffer, theEnterer);
        }
        {
            ResourceReference theAuthor;
            theAuthor = this.getAuthor();
            strategy.appendField(locator, this, "author", buffer, theAuthor);
        }
        {
            ResourceReference theReceiver;
            theReceiver = this.getReceiver();
            strategy.appendField(locator, this, "receiver", buffer, theReceiver);
        }
        {
            ResourceReference theResponsible;
            theResponsible = this.getResponsible();
            strategy.appendField(locator, this, "responsible", buffer, theResponsible);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            strategy.appendField(locator, this, "reason", buffer, theReason);
        }
        {
            List<ResourceReference> theDatas;
            theDatas = (((this.datas!= null)&&(!this.datas.isEmpty()))?this.getDatas():null);
            strategy.appendField(locator, this, "datas", buffer, theDatas);
        }
        return buffer;
    }

}
